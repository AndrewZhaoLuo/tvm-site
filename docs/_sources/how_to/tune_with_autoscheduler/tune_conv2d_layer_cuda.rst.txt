.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the master process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.


.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none






We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 16;
      allocate(conv2d_nchw: Pointer(local float32), float32, [14]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [504]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [768]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [14], [], scope="local", align=32)[0] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[6] = 0f32
        conv2d_nchw_1[7] = 0f32
        conv2d_nchw_1[8] = 0f32
        conv2d_nchw_1[9] = 0f32
        conv2d_nchw_1[10] = 0f32
        conv2d_nchw_1[11] = 0f32
        conv2d_nchw_1[12] = 0f32
        conv2d_nchw_1[13] = 0f32
        for (rc.outer.outer: int32, 0, 64) {
          for (ry.outer.outer: int32, 0, 3) {
            let cse_var_2: int32 = (rc.outer.outer*72)
            let cse_var_1: int32 = (ry.outer.outer*3)
             {
              attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112 {
                if @tir.likely((threadIdx.x_1 < 63), dtype=bool) {
                  pad_temp.shared_1: Buffer(pad_temp.shared, float32, [504], [], scope="shared")[(threadIdx.x_1*8)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*8), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*8), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1*8), 9))) && (floormod((threadIdx.x_1*8), 9) < 8)), data[(((((rc.outer.outer*392) + (floordiv((threadIdx.x_1*8), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1*8), 9)) - 8)], 0f32, dtype=float32)
                }
                if @tir.likely((threadIdx.x_1 < 63), dtype=bool) {
                  pad_temp.shared_1[((threadIdx.x_1*8) + 1)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*8) + 1), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*8) + 1), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*8) + 1), 9))) && (floormod(((threadIdx.x_1*8) + 1), 9) < 8)), data[(((((rc.outer.outer*392) + (floordiv(((threadIdx.x_1*8) + 1), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*8) + 1), 9)) - 8)], 0f32, dtype=float32)
                }
                if @tir.likely((threadIdx.x_1 < 63), dtype=bool) {
                  pad_temp.shared_1[((threadIdx.x_1*8) + 2)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*8) + 2), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*8) + 2), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*8) + 2), 9))) && (floormod(((threadIdx.x_1*8) + 2), 9) < 8)), data[(((((rc.outer.outer*392) + (floordiv(((threadIdx.x_1*8) + 2), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*8) + 2), 9)) - 8)], 0f32, dtype=float32)
                }
                if @tir.likely((threadIdx.x_1 < 63), dtype=bool) {
                  pad_temp.shared_1[((threadIdx.x_1*8) + 3)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*8) + 3), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*8) + 3), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*8) + 3), 9))) && (floormod(((threadIdx.x_1*8) + 3), 9) < 8)), data[(((((rc.outer.outer*392) + (floordiv(((threadIdx.x_1*8) + 3), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*8) + 3), 9)) - 8)], 0f32, dtype=float32)
                }
                if @tir.likely((threadIdx.x_1 < 63), dtype=bool) {
                  pad_temp.shared_1[((threadIdx.x_1*8) + 4)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*8) + 4), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*8) + 4), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*8) + 4), 9))) && (floormod(((threadIdx.x_1*8) + 4), 9) < 8)), data[(((((rc.outer.outer*392) + (floordiv(((threadIdx.x_1*8) + 4), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*8) + 4), 9)) - 8)], 0f32, dtype=float32)
                }
                if @tir.likely((threadIdx.x_1 < 63), dtype=bool) {
                  pad_temp.shared_1[((threadIdx.x_1*8) + 5)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*8) + 5), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*8) + 5), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*8) + 5), 9))) && (floormod(((threadIdx.x_1*8) + 5), 9) < 8)), data[(((((rc.outer.outer*392) + (floordiv(((threadIdx.x_1*8) + 5), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*8) + 5), 9)) - 8)], 0f32, dtype=float32)
                }
                if @tir.likely((threadIdx.x_1 < 63), dtype=bool) {
                  pad_temp.shared_1[((threadIdx.x_1*8) + 6)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*8) + 6), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*8) + 6), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*8) + 6), 9))) && (floormod(((threadIdx.x_1*8) + 6), 9) < 8)), data[(((((rc.outer.outer*392) + (floordiv(((threadIdx.x_1*8) + 6), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*8) + 6), 9)) - 8)], 0f32, dtype=float32)
                }
                if @tir.likely((threadIdx.x_1 < 63), dtype=bool) {
                  pad_temp.shared_1[((threadIdx.x_1*8) + 7)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*8) + 7), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*8) + 7), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*8) + 7), 9))) && (floormod(((threadIdx.x_1*8) + 7), 9) < 8)), data[(((((rc.outer.outer*392) + (floordiv(((threadIdx.x_1*8) + 7), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*8) + 7), 9)) - 8)], 0f32, dtype=float32)
                }
              }
              attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112 {
                kernel.shared_1: Buffer(kernel.shared, float32, [768], [], scope="shared")[(threadIdx.x_2*2)] = kernel[((((((blockIdx.x*147456) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_2) + (floordiv(floormod((threadIdx.x_2*2), 24), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2*2), 3))]
                kernel.shared_1[((threadIdx.x_2*2) + 1)] = kernel[((((((blockIdx.x*147456) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_2) + (floordiv(floormod(((threadIdx.x_2*2) + 1), 24), 3)*9)) + cse_var_1) + floormod(((threadIdx.x_2*2) + 1), 3))]
              }
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112 {
                kernel.shared_1[((threadIdx.x_2*2) + 224)] = kernel[((((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 4) + 28), 3)*4608)) + cse_var_2) + (floordiv(floormod(((threadIdx.x_2*2) + 224), 24), 3)*9)) + cse_var_1) + floormod(((threadIdx.x_2*2) + 2), 3))]
                kernel.shared_1[((threadIdx.x_2*2) + 225)] = kernel[((((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 4) + 28), 3)*4608)) + cse_var_2) + (floormod((floordiv((threadIdx.x_2*2), 3) + 3), 8)*9)) + cse_var_1) + floormod((threadIdx.x_2*2), 3))]
              }
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112 {
                kernel.shared_1[((threadIdx.x_2*2) + 448)] = kernel[((((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 4) + 56), 3)*4608)) + cse_var_2) + (floordiv(floormod(((threadIdx.x_2*2) + 448), 24), 3)*9)) + cse_var_1) + floormod(((threadIdx.x_2*2) + 1), 3))]
                kernel.shared_1[((threadIdx.x_2*2) + 449)] = kernel[((((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 4) + 56), 3)*4608)) + cse_var_2) + (floordiv(floormod(((threadIdx.x_2*2) + 449), 24), 3)*9)) + cse_var_1) + floormod(((threadIdx.x_2*2) + 2), 3))]
              }
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112 {
                if @tir.likely((threadIdx.x_2 < 48), dtype=bool) {
                  kernel.shared_1[((threadIdx.x_2*2) + 672)] = kernel[(((((((blockIdx.x*147456) + (floordiv(floordiv(threadIdx.x_2, 4), 3)*4608)) + cse_var_2) + (floordiv(floormod((threadIdx.x_2*2), 24), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2*2), 3)) + 129024)]
                }
                if @tir.likely((threadIdx.x_2 < 48), dtype=bool) {
                  kernel.shared_1[((threadIdx.x_2*2) + 673)] = kernel[(((((((blockIdx.x*147456) + (floordiv(floordiv(threadIdx.x_2, 4), 3)*4608)) + cse_var_2) + (floordiv(floormod(((threadIdx.x_2*2) + 673), 24), 3)*9)) + cse_var_1) + floormod(((threadIdx.x_2*2) + 1), 3)) + 129024)]
                }
              }
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7)*9)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*48)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 1)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 1)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 2)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 2)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 3)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 64)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 4)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 65)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 5)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 6)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 127)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 7)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 128)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 8)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 189)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 9)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 190)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 10)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 191)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 11)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 1)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*48)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 2)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 1)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 3)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 2)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 64)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 3)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 65)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 4)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 66)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 5)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 127)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 6)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 128)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 7)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 129)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 8)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 190)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 9)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 191)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 10)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 192)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 11)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 2)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*48)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 3)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 1)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 4)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 2)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 65)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 3)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 66)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 4)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 67)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 5)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 128)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 6)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 129)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 7)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 130)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 8)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 191)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 9)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 192)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 10)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 193)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 11)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 3)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*48)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 4)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 1)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 5)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 2)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 66)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 3)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 67)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 4)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 68)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 5)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 129)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 6)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 130)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 7)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 131)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 8)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 192)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 9)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 193)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 10)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 194)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 11)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 4)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*48)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 5)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 1)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 6)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 2)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 67)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 3)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 68)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 4)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 69)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 5)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 130)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 6)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 131)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 7)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 132)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 8)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 193)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 9)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 194)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 10)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 195)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 11)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 5)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*48)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 6)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 1)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 2)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 68)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 3)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 69)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 4)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 5)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 131)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 6)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 132)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 7)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 8)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 194)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 9)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 195)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 10)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 196)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 11)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 6)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*48)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 1)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 8)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 2)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 69)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 3)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 4)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 71)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 5)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 132)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 6)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 7)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 134)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 8)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 195)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 9)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 196)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 10)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 197)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 11)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7)*9)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 24)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 1)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 25)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 2)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 26)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 27)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 64)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 28)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 65)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 29)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 30)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 127)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 31)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 128)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 32)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 189)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 33)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 190)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 34)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 191)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 35)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 1)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 24)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 2)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 25)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 3)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 26)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 64)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 27)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 65)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 28)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 66)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 29)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 127)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 30)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 128)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 31)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 129)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 32)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 190)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 33)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 191)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 34)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 192)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 35)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 2)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 24)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 3)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 25)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 4)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 26)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 65)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 27)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 66)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 28)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 67)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 29)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 128)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 30)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 129)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 31)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 130)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 32)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 191)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 33)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 192)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 34)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 193)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 35)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 3)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 24)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 4)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 25)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 5)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 26)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 66)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 27)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 67)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 28)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 68)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 29)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 129)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 30)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 130)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 31)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 131)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 32)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 192)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 33)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 193)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 34)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 194)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 35)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 4)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 24)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 5)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 25)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 6)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 26)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 67)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 27)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 68)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 28)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 69)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 29)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 130)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 30)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 131)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 31)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 132)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 32)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 193)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 33)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 194)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 34)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 195)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 35)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 5)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 24)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 6)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 25)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 26)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 68)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 27)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 69)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 28)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 29)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 131)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 30)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 132)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 31)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 32)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 194)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 33)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 195)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 34)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 196)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 35)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 6)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 24)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 25)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 8)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 26)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 69)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 27)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 28)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 71)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 29)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 132)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 30)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 31)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 134)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 32)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 195)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 33)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 196)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 34)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 197)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 35)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 252)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 12)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 253)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 13)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 14)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 315)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 15)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 316)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 16)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 317)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 17)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 378)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 18)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 379)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 19)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 380)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 20)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 441)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 21)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 442)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 22)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 443)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 23)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 253)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 12)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 13)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 255)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 14)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 316)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 15)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 317)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 16)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 318)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 17)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 379)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 18)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 380)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 19)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 381)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 20)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 442)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 21)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 443)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 22)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 444)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 23)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 12)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 255)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 13)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 256)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 14)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 317)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 15)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 318)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 16)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 319)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 17)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 380)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 18)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 381)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 19)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 382)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 20)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 443)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 21)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 444)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 22)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 445)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 23)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 255)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 12)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 256)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 13)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 257)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 14)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 318)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 15)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 319)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 16)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 320)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 17)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 381)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 18)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 382)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 19)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 383)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 20)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 444)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 21)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 445)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 22)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 446)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 23)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 256)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 12)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 257)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 13)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 258)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 14)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 319)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 15)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 320)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 16)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 321)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 17)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 382)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 18)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 383)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 19)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 384)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 20)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 445)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 21)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 446)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 22)]))
              conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 447)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 23)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 257)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 12)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 258)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 13)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 259)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 14)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 320)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 15)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 321)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 16)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 322)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 17)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 383)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 18)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 384)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 19)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 385)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 20)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 446)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 21)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 447)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 22)]))
              conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 448)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 23)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 258)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 12)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 259)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 13)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 260)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 14)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 321)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 15)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 322)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 16)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 323)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 17)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 384)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 18)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 385)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 19)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 386)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 20)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 447)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 21)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 448)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 22)]))
              conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 449)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 23)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 252)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 36)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 253)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 37)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 38)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 315)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 39)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 316)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 40)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 317)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 41)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 378)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 42)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 379)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 43)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 380)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 44)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 441)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 45)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 442)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 46)]))
              conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 443)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 47)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 253)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 36)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 37)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 255)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 38)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 316)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 39)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 317)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 40)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 318)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 41)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 379)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 42)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 380)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 43)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 381)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 44)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 442)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 45)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 443)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 46)]))
              conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 444)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 47)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 36)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 255)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 37)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 256)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 38)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 317)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 39)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 318)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 40)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 319)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 41)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 380)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 42)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 381)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 43)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 382)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 44)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 443)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 45)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 444)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 46)]))
              conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 445)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 47)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 255)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 36)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 256)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 37)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 257)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 38)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 318)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 39)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 319)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 40)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 320)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 41)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 381)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 42)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 382)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 43)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 383)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 44)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 444)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 45)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 445)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 46)]))
              conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 446)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 47)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 256)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 36)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 257)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 37)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 258)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 38)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 319)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 39)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 320)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 40)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 321)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 41)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 382)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 42)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 383)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 43)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 384)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 44)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 445)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 45)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 446)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 46)]))
              conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 447)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 47)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 257)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 36)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 258)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 37)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 259)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 38)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 320)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 39)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 321)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 40)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 322)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 41)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 383)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 42)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 384)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 43)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 385)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 44)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 446)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 45)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 447)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 46)]))
              conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 448)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 47)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 258)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 36)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 259)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 37)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 260)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 38)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 321)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 39)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 322)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 40)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 323)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 41)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 384)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 42)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 385)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 43)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 386)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 44)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 447)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 45)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 448)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 46)]))
              conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 449)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*48) + 47)]))
            }
          }
        }
        for (i1.inner: int32, 0, 2) {
          for (i3.inner: int32, 0, 7) {
            compute[(((((blockIdx.x*1568) + (floordiv(threadIdx.x, 7)*98)) + (i1.inner*49)) + (floormod(threadIdx.x, 7)*7)) + i3.inner)] = max((conv2d_nchw_1[((i1.inner*7) + i3.inner)] + bias[(((blockIdx.x*32) + (floordiv(threadIdx.x, 7)*2)) + i1.inner)]), 0f32)
          }
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.293 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.


.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=2)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=16)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=4)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=2)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=3)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=2)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=16)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=7)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=2)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=112)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=8)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=112)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 1024)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(112) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[14];
      __shared__ float pad_temp_shared[504];
      __shared__ float kernel_shared[768];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      conv2d_nchw[7] = 0.000000e+00f;
      conv2d_nchw[8] = 0.000000e+00f;
      conv2d_nchw[9] = 0.000000e+00f;
      conv2d_nchw[10] = 0.000000e+00f;
      conv2d_nchw[11] = 0.000000e+00f;
      conv2d_nchw[12] = 0.000000e+00f;
      conv2d_nchw[13] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 64; ++rc_outer_outer) {
        for (int ry_outer_outer = 0; ry_outer_outer < 3; ++ry_outer_outer) {
          __syncthreads();
          if (((int)threadIdx.x) < 63) {
            pad_temp_shared[(((int)threadIdx.x) * 8)] = (((((1 <= ((((((int)threadIdx.x) * 8) % 63) / 9) + ry_outer_outer)) && (((((((int)threadIdx.x) * 8) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= ((((int)threadIdx.x) * 8) % 9))) && (((((int)threadIdx.x) * 8) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + (((((int)threadIdx.x) * 8) / 9) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 8) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 63) {
            pad_temp_shared[((((int)threadIdx.x) * 8) + 1)] = (((((1 <= (((((((int)threadIdx.x) * 8) + 1) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 8) + 1) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 8) + 1) % 9))) && ((((((int)threadIdx.x) * 8) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + ((((((int)threadIdx.x) * 8) + 1) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 8) + 1) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 63) {
            pad_temp_shared[((((int)threadIdx.x) * 8) + 2)] = (((((1 <= (((((((int)threadIdx.x) * 8) + 2) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 8) + 2) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 8) + 2) % 9))) && ((((((int)threadIdx.x) * 8) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + ((((((int)threadIdx.x) * 8) + 2) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 8) + 2) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 63) {
            pad_temp_shared[((((int)threadIdx.x) * 8) + 3)] = (((((1 <= (((((((int)threadIdx.x) * 8) + 3) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 8) + 3) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 8) + 3) % 9))) && ((((((int)threadIdx.x) * 8) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + ((((((int)threadIdx.x) * 8) + 3) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 8) + 3) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 63) {
            pad_temp_shared[((((int)threadIdx.x) * 8) + 4)] = (((((1 <= (((((((int)threadIdx.x) * 8) + 4) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 8) + 4) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 8) + 4) % 9))) && ((((((int)threadIdx.x) * 8) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + ((((((int)threadIdx.x) * 8) + 4) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 8) + 4) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 63) {
            pad_temp_shared[((((int)threadIdx.x) * 8) + 5)] = (((((1 <= (((((((int)threadIdx.x) * 8) + 5) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 8) + 5) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 8) + 5) % 9))) && ((((((int)threadIdx.x) * 8) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + ((((((int)threadIdx.x) * 8) + 5) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 8) + 5) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 63) {
            pad_temp_shared[((((int)threadIdx.x) * 8) + 6)] = (((((1 <= (((((((int)threadIdx.x) * 8) + 6) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 8) + 6) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 8) + 6) % 9))) && ((((((int)threadIdx.x) * 8) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + ((((((int)threadIdx.x) * 8) + 6) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 8) + 6) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 63) {
            pad_temp_shared[((((int)threadIdx.x) * 8) + 7)] = (((((1 <= (((((((int)threadIdx.x) * 8) + 7) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 8) + 7) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 8) + 7) % 9))) && ((((((int)threadIdx.x) * 8) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + ((((((int)threadIdx.x) * 8) + 7) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 8) + 7) % 9)) - 8)] : 0.000000e+00f);
          }
          kernel_shared[(((int)threadIdx.x) * 2)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) % 12) * 2) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) * 2) % 3))];
          kernel_shared[((((int)threadIdx.x) * 2) + 1)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) % 12) * 2) + 1) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 2) + 1) % 3))];
          kernel_shared[((((int)threadIdx.x) * 2) + 224)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 112) / 12) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 2) + 8) % 24) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 2) + 2) % 3))];
          kernel_shared[((((int)threadIdx.x) * 2) + 225)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 112) / 12) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 2) / 3) + 3) & 7) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) * 2) % 3))];
          kernel_shared[((((int)threadIdx.x) * 2) + 448)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 224) / 12) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 2) + 16) % 24) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 2) + 1) % 3))];
          kernel_shared[((((int)threadIdx.x) * 2) + 449)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 224) / 12) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 2) + 17) % 24) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 2) + 2) % 3))];
          if (((int)threadIdx.x) < 48) {
            kernel_shared[((((int)threadIdx.x) * 2) + 672)] = kernel[(((((((((int)blockIdx.x) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) % 12) * 2) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) * 2) % 3)) + 129024)];
          }
          if (((int)threadIdx.x) < 48) {
            kernel_shared[((((int)threadIdx.x) * 2) + 673)] = kernel[(((((((((int)blockIdx.x) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 2) + 1) % 24) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 2) + 1) % 3)) + 129024)];
          }
          __syncthreads();
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) * 9)] * kernel_shared[((((int)threadIdx.x) / 7) * 48)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 1)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 1)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 2)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 2)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 3)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 64)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 4)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 65)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 5)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 6)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 127)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 7)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 128)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 8)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 189)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 9)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 190)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 10)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 191)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 11)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 1)] * kernel_shared[((((int)threadIdx.x) / 7) * 48)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 2)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 1)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 3)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 2)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 64)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 3)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 65)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 4)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 66)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 5)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 127)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 6)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 128)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 7)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 129)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 8)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 190)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 9)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 191)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 10)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 192)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 11)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 2)] * kernel_shared[((((int)threadIdx.x) / 7) * 48)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 3)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 1)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 4)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 2)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 65)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 3)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 66)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 4)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 67)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 5)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 128)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 6)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 129)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 7)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 130)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 8)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 191)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 9)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 192)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 10)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 193)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 11)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 3)] * kernel_shared[((((int)threadIdx.x) / 7) * 48)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 4)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 1)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 5)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 2)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 66)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 3)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 67)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 4)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 68)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 5)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 129)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 6)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 130)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 7)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 131)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 8)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 192)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 9)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 193)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 10)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 194)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 11)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 4)] * kernel_shared[((((int)threadIdx.x) / 7) * 48)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 5)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 1)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 6)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 2)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 67)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 3)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 68)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 4)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 69)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 5)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 130)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 6)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 131)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 7)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 132)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 8)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 193)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 9)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 194)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 10)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 195)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 11)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 5)] * kernel_shared[((((int)threadIdx.x) / 7) * 48)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 6)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 1)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 2)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 68)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 3)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 69)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 4)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 5)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 131)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 6)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 132)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 7)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 8)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 194)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 9)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 195)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 10)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 196)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 11)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 6)] * kernel_shared[((((int)threadIdx.x) / 7) * 48)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 1)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 8)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 2)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 69)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 3)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 4)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 71)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 5)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 132)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 6)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 7)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 134)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 8)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 195)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 9)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 196)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 10)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 197)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 11)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) * 9)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 24)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 1)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 25)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 2)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 26)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 27)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 64)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 28)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 65)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 29)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 30)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 127)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 31)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 128)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 32)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 189)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 33)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 190)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 34)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 191)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 35)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 1)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 24)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 2)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 25)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 3)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 26)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 64)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 27)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 65)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 28)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 66)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 29)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 127)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 30)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 128)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 31)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 129)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 32)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 190)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 33)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 191)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 34)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 192)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 35)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 2)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 24)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 3)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 25)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 4)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 26)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 65)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 27)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 66)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 28)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 67)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 29)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 128)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 30)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 129)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 31)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 130)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 32)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 191)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 33)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 192)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 34)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 193)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 35)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 3)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 24)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 4)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 25)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 5)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 26)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 66)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 27)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 67)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 28)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 68)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 29)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 129)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 30)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 130)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 31)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 131)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 32)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 192)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 33)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 193)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 34)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 194)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 35)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 4)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 24)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 5)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 25)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 6)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 26)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 67)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 27)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 68)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 28)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 69)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 29)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 130)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 30)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 131)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 31)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 132)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 32)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 193)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 33)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 194)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 34)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 195)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 35)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 5)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 24)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 6)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 25)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 26)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 68)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 27)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 69)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 28)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 29)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 131)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 30)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 132)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 31)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 32)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 194)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 33)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 195)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 34)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 196)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 35)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 6)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 24)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 25)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 8)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 26)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 69)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 27)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 28)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 71)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 29)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 132)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 30)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 31)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 134)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 32)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 195)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 33)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 196)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 34)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 197)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 35)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 252)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 12)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 253)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 13)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 254)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 14)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 315)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 15)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 316)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 16)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 317)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 17)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 378)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 18)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 379)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 19)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 380)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 20)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 441)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 21)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 442)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 22)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 443)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 23)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 253)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 12)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 254)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 13)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 255)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 14)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 316)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 15)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 317)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 16)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 318)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 17)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 379)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 18)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 380)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 19)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 381)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 20)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 442)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 21)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 443)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 22)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 444)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 23)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 254)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 12)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 255)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 13)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 256)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 14)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 317)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 15)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 318)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 16)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 319)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 17)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 380)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 18)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 381)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 19)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 382)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 20)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 443)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 21)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 444)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 22)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 445)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 23)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 255)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 12)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 256)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 13)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 257)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 14)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 318)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 15)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 319)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 16)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 320)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 17)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 381)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 18)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 382)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 19)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 383)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 20)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 444)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 21)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 445)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 22)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 446)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 23)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 256)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 12)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 257)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 13)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 258)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 14)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 319)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 15)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 320)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 16)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 321)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 17)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 382)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 18)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 383)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 19)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 384)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 20)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 445)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 21)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 446)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 22)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 447)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 23)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 257)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 12)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 258)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 13)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 259)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 14)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 320)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 15)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 321)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 16)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 322)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 17)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 383)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 18)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 384)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 19)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 385)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 20)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 446)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 21)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 447)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 22)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 448)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 23)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 258)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 12)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 259)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 13)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 260)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 14)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 321)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 15)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 322)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 16)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 323)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 17)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 384)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 18)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 385)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 19)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 386)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 20)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 447)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 21)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 448)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 22)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 449)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 23)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 252)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 36)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 253)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 37)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 254)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 38)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 315)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 39)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 316)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 40)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 317)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 41)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 378)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 42)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 379)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 43)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 380)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 44)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 441)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 45)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 442)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 46)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 443)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 47)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 253)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 36)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 254)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 37)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 255)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 38)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 316)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 39)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 317)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 40)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 318)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 41)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 379)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 42)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 380)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 43)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 381)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 44)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 442)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 45)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 443)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 46)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 444)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 47)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 254)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 36)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 255)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 37)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 256)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 38)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 317)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 39)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 318)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 40)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 319)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 41)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 380)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 42)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 381)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 43)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 382)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 44)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 443)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 45)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 444)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 46)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 445)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 47)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 255)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 36)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 256)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 37)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 257)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 38)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 318)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 39)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 319)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 40)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 320)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 41)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 381)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 42)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 382)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 43)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 383)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 44)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 444)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 45)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 445)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 46)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 446)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 47)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 256)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 36)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 257)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 37)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 258)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 38)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 319)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 39)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 320)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 40)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 321)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 41)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 382)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 42)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 383)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 43)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 384)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 44)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 445)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 45)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 446)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 46)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 447)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 47)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 257)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 36)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 258)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 37)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 259)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 38)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 320)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 39)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 321)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 40)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 322)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 41)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 383)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 42)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 384)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 43)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 385)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 44)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 446)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 45)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 447)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 46)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 448)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 47)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 258)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 36)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 259)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 37)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 260)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 38)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 321)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 39)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 322)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 40)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 323)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 41)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 384)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 42)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 385)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 43)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 386)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 44)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 447)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 45)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 448)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 46)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 449)] * kernel_shared[(((((int)threadIdx.x) / 7) * 48) + 47)]));
        }
      }
      for (int i1_inner = 0; i1_inner < 2; ++i1_inner) {
        for (int i3_inner = 0; i3_inner < 7; ++i3_inner) {
          compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + i3_inner)] = max((conv2d_nchw[((i1_inner * 7) + i3_inner)] + bias[(((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner)]), 0.000000e+00f);
        }
      }
    }





A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.7/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  15.994 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
