.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the master process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.


.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none






We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute}
      preflattened_buffer_map = {data_1: data_3: Buffer(data_2, float32, [1, 512, 7, 7], []), kernel_1: kernel_3: Buffer(kernel_2, float32, [512, 512, 3, 3], []), bias_1: bias_3: Buffer(bias_2, float32, [1, 512, 1, 1], []), compute_1: compute_3: Buffer(compute_2, float32, [1, 512, 7, 7], [])} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 28;
      allocate(conv2d_nchw: Pointer(local float32), float32, [14]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [216]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [9216]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [14], [], scope="local", align=32)[0] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[6] = 0f32
        conv2d_nchw_1[7] = 0f32
        conv2d_nchw_1[8] = 0f32
        conv2d_nchw_1[9] = 0f32
        conv2d_nchw_1[10] = 0f32
        conv2d_nchw_1[11] = 0f32
        conv2d_nchw_1[12] = 0f32
        conv2d_nchw_1[13] = 0f32
        for (rc.outer.outer: int32, 0, 64) {
          let cse_var_2: int32 = (rc.outer.outer*392)
          let cse_var_1: int32 = (rc.outer.outer*72)
           {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            pad_temp.shared_1: Buffer(pad_temp.shared, float32, [216], [], scope="shared")[threadIdx.x_1] = @tir.if_then_else(((((3 <= floormod(threadIdx.x_1, 27)) && (floormod(threadIdx.x_1, 27) < 24)) && (1 <= (floormod(blockIdx.x, 7) + floormod(threadIdx.x_1, 3)))) && ((floormod(blockIdx.x, 7) + floormod(threadIdx.x_1, 3)) < 8)), data[(((((cse_var_2 + (floordiv(threadIdx.x_1, 27)*49)) + (floordiv(floormod(threadIdx.x_1, 27), 3)*7)) + floormod(blockIdx.x, 7)) + floormod(threadIdx.x_1, 3)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            pad_temp.shared_1[(threadIdx.x_1 + 64)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 64), 27)) && (floormod((threadIdx.x_1 + 10), 27) < 24)) && (1 <= (floormod(blockIdx.x, 7) + floormod((threadIdx.x_1 + 1), 3)))) && ((floormod(blockIdx.x, 7) + floormod((threadIdx.x_1 + 1), 3)) < 8)), data[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 64), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 64), 27), 3)*7)) + floormod(blockIdx.x, 7)) + floormod((threadIdx.x_1 + 1), 3)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            pad_temp.shared_1[(threadIdx.x_1 + 128)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 128), 27)) && (floormod((threadIdx.x_1 + 20), 27) < 24)) && (1 <= (floormod(blockIdx.x, 7) + floormod((threadIdx.x_1 + 2), 3)))) && ((floormod(blockIdx.x, 7) + floormod((threadIdx.x_1 + 2), 3)) < 8)), data[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 128), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 128), 27), 3)*7)) + floormod(blockIdx.x, 7)) + floormod((threadIdx.x_1 + 2), 3)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            if @tir.likely((threadIdx.x_1 < 24), dtype=bool) {
              pad_temp.shared_1[(threadIdx.x_1 + 192)] = @tir.if_then_else((((floormod((threadIdx.x_1 + 3), 27) < 24) && (1 <= (floormod(blockIdx.x, 7) + floormod(threadIdx.x_1, 3)))) && ((floormod(blockIdx.x, 7) + floormod(threadIdx.x_1, 3)) < 8)), data[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 192), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 1), 9)*7)) + floormod(blockIdx.x, 7)) + floormod(threadIdx.x_1, 3)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1: Buffer(kernel.shared, float32, [9216], [], scope="shared")[threadIdx.x_2] = kernel[(((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 64)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 8), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 128)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 16), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 192)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 24), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 256)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 32), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 320)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 40), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 384)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 48), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 448)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 56), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 512)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 64), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 576)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2) + 36864)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 640)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 80), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 704)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 88), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 768)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 96), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 832)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 104), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 896)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 112), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 960)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 120), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1024)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 128), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1088)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 136), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1152)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2) + 73728)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1216)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 152), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1280)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 160), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1344)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 168), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1408)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 176), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1472)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 184), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1536)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 192), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1600)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 200), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1664)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 208), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1728)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2) + 110592)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1792)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 224), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1856)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 232), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1920)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 240), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1984)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 248), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2048)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 256), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2112)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 264), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2176)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 272), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2240)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 280), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2304)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2) + 147456)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2368)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 296), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2432)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 304), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2496)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 312), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2560)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 320), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2624)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 328), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2688)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 336), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2752)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 344), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2816)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 352), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2880)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2) + 184320)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2944)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 368), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3008)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 376), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3072)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 384), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3136)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 392), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3200)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 400), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3264)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 408), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3328)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 416), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3392)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 424), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3456)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2) + 221184)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3520)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 440), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3584)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 448), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3648)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 456), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3712)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 464), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3776)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 472), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3840)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 480), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3904)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 488), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 3968)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 496), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4032)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2) + 258048)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4096)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 512), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4160)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 520), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4224)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 528), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4288)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 536), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4352)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 544), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4416)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 552), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4480)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 560), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4544)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 568), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4608)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2) + 294912)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4672)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 584), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4736)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 592), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4800)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 600), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4864)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 608), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4928)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 616), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 4992)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 624), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 5056)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 632), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 5120)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 640), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 5184)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2) + 331776)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 5248)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 656), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 5312)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 664), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 5376)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 672), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 5440)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 680), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 5504)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 688), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 5568)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 696), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 5632)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 704), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 5696)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 712), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 5760)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2) + 368640)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 5824)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 728), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 5888)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 736), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 5952)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 744), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6016)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 752), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6080)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 760), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6144)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 768), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6208)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 776), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6272)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 784), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6336)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2) + 405504)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6400)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 800), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6464)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 808), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6528)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 816), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6592)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 824), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6656)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 832), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6720)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 840), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6784)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 848), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6848)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 856), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6912)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2) + 442368)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 6976)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 872), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 7040)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 880), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 7104)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 888), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 7168)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 896), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 7232)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 904), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 7296)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 912), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 7360)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 920), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 7424)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 928), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 7488)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2) + 479232)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 7552)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 944), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 7616)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 952), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 7680)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 960), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 7744)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 968), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 7808)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 976), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 7872)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 984), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 7936)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 992), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8000)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1000), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8064)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2) + 516096)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8128)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1016), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8192)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1024), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8256)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1032), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8320)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1040), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8384)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1048), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8448)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1056), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8512)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1064), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8576)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1072), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8640)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + cse_var_1) + threadIdx.x_2) + 552960)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8704)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1088), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8768)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1096), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 56), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8832)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1104), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 48), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8896)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1112), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 40), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 8960)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1120), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 9024)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1128), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 9088)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1136), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 9152)] = kernel[((((floordiv(blockIdx.x, 7)*589824) + (floordiv((floordiv(threadIdx.x_2, 8) + 1144), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 72))]
            for (rc.outer.inner: int32, 0, 8) {
              let cse_var_29: int32 = (rc.outer.inner*27)
              let cse_var_28: int32 = (cse_var_29 + 1)
              let cse_var_27: int32 = (cse_var_29 + 10)
              let cse_var_26: int32 = (cse_var_29 + 11)
              let cse_var_25: int32 = (cse_var_29 + 12)
              let cse_var_24: int32 = (cse_var_29 + 13)
              let cse_var_23: int32 = (cse_var_29 + 15)
              let cse_var_22: int32 = (cse_var_29 + 16)
              let cse_var_21: int32 = (cse_var_29 + 17)
              let cse_var_20: int32 = (cse_var_29 + 18)
              let cse_var_19: int32 = (cse_var_29 + 19)
              let cse_var_18: int32 = (cse_var_29 + 2)
              let cse_var_17: int32 = (cse_var_29 + 20)
              let cse_var_16: int32 = (cse_var_29 + 21)
              let cse_var_15: int32 = (cse_var_29 + 9)
              let cse_var_14: int32 = (cse_var_29 + 8)
              let cse_var_13: int32 = (cse_var_29 + 7)
              let cse_var_12: int32 = (cse_var_29 + 6)
              let cse_var_11: int32 = (cse_var_29 + 14)
              let cse_var_10: int32 = (cse_var_29 + 5)
              let cse_var_9: int32 = (cse_var_29 + 4)
              let cse_var_8: int32 = (cse_var_29 + 3)
              let cse_var_7: int32 = (cse_var_29 + 26)
              let cse_var_6: int32 = (cse_var_29 + 25)
              let cse_var_5: int32 = (cse_var_29 + 24)
              let cse_var_4: int32 = (cse_var_29 + 23)
              let cse_var_3: int32 = (cse_var_29 + 22)
               {
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_29]*kernel.shared_1[((threadIdx.x*144) + (rc.outer.inner*9))]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_28]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 1)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_18]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 2)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_8]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 3)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_9]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 4)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_10]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 5)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_12]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 6)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_13]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 7)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_14]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 8)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[cse_var_8]*kernel.shared_1[((threadIdx.x*144) + (rc.outer.inner*9))]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[cse_var_9]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 1)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[cse_var_10]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 2)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[cse_var_12]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 3)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[cse_var_13]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 4)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[cse_var_14]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 5)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[cse_var_15]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 6)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[cse_var_27]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 7)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[cse_var_26]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 8)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[cse_var_12]*kernel.shared_1[((threadIdx.x*144) + (rc.outer.inner*9))]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[cse_var_13]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 1)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[cse_var_14]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 2)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[cse_var_15]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 3)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[cse_var_27]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 4)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[cse_var_26]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 5)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[cse_var_25]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 6)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[cse_var_24]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 7)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[cse_var_11]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 8)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[cse_var_15]*kernel.shared_1[((threadIdx.x*144) + (rc.outer.inner*9))]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[cse_var_27]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 1)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[cse_var_26]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 2)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[cse_var_25]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 3)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[cse_var_24]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 4)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[cse_var_11]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 5)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[cse_var_23]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 6)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[cse_var_22]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 7)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[cse_var_21]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 8)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[cse_var_25]*kernel.shared_1[((threadIdx.x*144) + (rc.outer.inner*9))]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[cse_var_24]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 1)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[cse_var_11]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 2)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[cse_var_23]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 3)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[cse_var_22]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 4)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[cse_var_21]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 5)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[cse_var_20]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 6)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[cse_var_19]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 7)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[cse_var_17]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 8)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[cse_var_23]*kernel.shared_1[((threadIdx.x*144) + (rc.outer.inner*9))]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[cse_var_22]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 1)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[cse_var_21]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 2)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[cse_var_20]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 3)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[cse_var_19]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 4)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[cse_var_17]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 5)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[cse_var_16]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 6)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[cse_var_3]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 7)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[cse_var_4]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 8)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[cse_var_20]*kernel.shared_1[((threadIdx.x*144) + (rc.outer.inner*9))]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[cse_var_19]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 1)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[cse_var_17]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 2)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[cse_var_16]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 3)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[cse_var_3]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 4)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[cse_var_4]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 5)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[cse_var_5]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 6)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[cse_var_6]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 7)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[cse_var_7]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 8)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[cse_var_29]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 72)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[cse_var_28]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 73)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[cse_var_18]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 74)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[cse_var_8]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 75)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[cse_var_9]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 76)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[cse_var_10]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 77)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[cse_var_12]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 78)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[cse_var_13]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 79)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[cse_var_14]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 80)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[cse_var_8]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 72)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[cse_var_9]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 73)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[cse_var_10]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 74)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[cse_var_12]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 75)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[cse_var_13]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 76)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[cse_var_14]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 77)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[cse_var_15]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 78)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[cse_var_27]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 79)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[cse_var_26]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 80)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[cse_var_12]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 72)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[cse_var_13]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 73)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[cse_var_14]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 74)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[cse_var_15]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 75)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[cse_var_27]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 76)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[cse_var_26]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 77)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[cse_var_25]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 78)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[cse_var_24]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 79)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[cse_var_11]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 80)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[cse_var_15]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 72)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[cse_var_27]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 73)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[cse_var_26]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 74)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[cse_var_25]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 75)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[cse_var_24]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 76)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[cse_var_11]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 77)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[cse_var_23]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 78)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[cse_var_22]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 79)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[cse_var_21]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 80)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[cse_var_25]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 72)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[cse_var_24]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 73)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[cse_var_11]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 74)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[cse_var_23]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 75)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[cse_var_22]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 76)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[cse_var_21]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 77)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[cse_var_20]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 78)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[cse_var_19]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 79)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[cse_var_17]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 80)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[cse_var_23]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 72)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[cse_var_22]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 73)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[cse_var_21]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 74)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[cse_var_20]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 75)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[cse_var_19]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 76)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[cse_var_17]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 77)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[cse_var_16]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 78)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[cse_var_3]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 79)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[cse_var_4]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 80)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[cse_var_20]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 72)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[cse_var_19]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 73)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[cse_var_17]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 74)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[cse_var_16]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 75)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[cse_var_3]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 76)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[cse_var_4]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 77)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[cse_var_5]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 78)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[cse_var_6]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 79)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[cse_var_7]*kernel.shared_1[(((threadIdx.x*144) + (rc.outer.inner*9)) + 80)]))
              }
            }
          }
        }
        for (i1.inner: int32, 0, 2) {
          for (i2.inner: int32, 0, 7) {
            compute[(((((floordiv(blockIdx.x, 7)*6272) + (threadIdx.x*98)) + (i1.inner*49)) + (i2.inner*7)) + floormod(blockIdx.x, 7))] = max((conv2d_nchw_1[((i1.inner*7) + i2.inner)] + bias[(((floordiv(blockIdx.x, 7)*128) + (threadIdx.x*2)) + i1.inner)]), 0f32)
          }
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.277 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.


.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=2)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=64)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=1)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=8)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=3)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=3)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=2)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=64)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=7)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=64)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=64)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(64) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[14];
      __shared__ float pad_temp_shared[216];
      __shared__ float kernel_shared[9216];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      conv2d_nchw[7] = 0.000000e+00f;
      conv2d_nchw[8] = 0.000000e+00f;
      conv2d_nchw[9] = 0.000000e+00f;
      conv2d_nchw[10] = 0.000000e+00f;
      conv2d_nchw[11] = 0.000000e+00f;
      conv2d_nchw[12] = 0.000000e+00f;
      conv2d_nchw[13] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 64; ++rc_outer_outer) {
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = (((((3 <= (((int)threadIdx.x) % 27)) && ((((int)threadIdx.x) % 27) < 24)) && (1 <= ((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)))) && (((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)) < 8)) ? data[((((((rc_outer_outer * 392) + ((((int)threadIdx.x) / 27) * 49)) + (((((int)threadIdx.x) % 27) / 3) * 7)) + (((int)blockIdx.x) % 7)) + (((int)threadIdx.x) % 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 64)] = (((((3 <= ((((int)threadIdx.x) + 10) % 27)) && (((((int)threadIdx.x) + 10) % 27) < 24)) && (1 <= ((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 1) % 3)))) && (((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 1) % 3)) < 8)) ? data[((((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 64) / 27) * 49)) + ((((((int)threadIdx.x) + 10) % 27) / 3) * 7)) + (((int)blockIdx.x) % 7)) + ((((int)threadIdx.x) + 1) % 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 128)] = (((((3 <= ((((int)threadIdx.x) + 20) % 27)) && (((((int)threadIdx.x) + 20) % 27) < 24)) && (1 <= ((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 2) % 3)))) && (((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 2) % 3)) < 8)) ? data[((((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 128) / 27) * 49)) + ((((((int)threadIdx.x) + 20) % 27) / 3) * 7)) + (((int)blockIdx.x) % 7)) + ((((int)threadIdx.x) + 2) % 3)) - 8)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 24) {
          pad_temp_shared[(((int)threadIdx.x) + 192)] = ((((((int)threadIdx.x) < 21) && (1 <= ((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)))) && (((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)) < 8)) ? data[((((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 192) / 27) * 49)) + (((((int)threadIdx.x) / 3) + 1) * 7)) + (((int)blockIdx.x) % 7)) + (((int)threadIdx.x) % 3)) - 8)] : 0.000000e+00f);
        }
        kernel_shared[((int)threadIdx.x)] = kernel[((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x))];
        kernel_shared[(((int)threadIdx.x) + 64)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 64) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 128)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 128) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 192)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 192) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 256)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 256) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 320)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 320) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 384)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 384) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 448)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 448) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 512)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 512) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        kernel_shared[(((int)threadIdx.x) + 576)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x)) + 36864)];
        kernel_shared[(((int)threadIdx.x) + 640)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 640) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 704)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 704) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 768)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 768) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 832)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 832) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 896)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 896) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 960)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 960) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 1024)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 1024) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 1088)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 1088) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        kernel_shared[(((int)threadIdx.x) + 1152)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x)) + 73728)];
        kernel_shared[(((int)threadIdx.x) + 1216)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 1216) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 1280)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 1280) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 1344)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 1344) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 1408)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 1408) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 1472)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 1472) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 1536)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 1536) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 1600)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 1600) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 1664)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 1664) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        kernel_shared[(((int)threadIdx.x) + 1728)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x)) + 110592)];
        kernel_shared[(((int)threadIdx.x) + 1792)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 1792) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 1856)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 1856) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 1920)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 1920) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 1984)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 1984) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 2048)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 2048) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 2112)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 2112) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 2176)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 2176) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 2240)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 2240) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        kernel_shared[(((int)threadIdx.x) + 2304)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x)) + 147456)];
        kernel_shared[(((int)threadIdx.x) + 2368)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 2368) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 2432)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 2432) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 2496)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 2496) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 2560)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 2560) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 2624)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 2624) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 2688)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 2688) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 2752)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 2752) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 2816)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 2816) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        kernel_shared[(((int)threadIdx.x) + 2880)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x)) + 184320)];
        kernel_shared[(((int)threadIdx.x) + 2944)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 2944) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 3008)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 3008) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 3072)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 3072) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 3136)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 3136) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 3200)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 3200) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 3264)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 3264) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 3328)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 3328) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 3392)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 3392) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        kernel_shared[(((int)threadIdx.x) + 3456)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x)) + 221184)];
        kernel_shared[(((int)threadIdx.x) + 3520)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 3520) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 3584)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 3584) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 3648)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 3648) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 3712)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 3712) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 3776)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 3776) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 3840)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 3840) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 3904)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 3904) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 3968)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 3968) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        kernel_shared[(((int)threadIdx.x) + 4032)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x)) + 258048)];
        kernel_shared[(((int)threadIdx.x) + 4096)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 4096) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 4160)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 4160) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 4224)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 4224) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 4288)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 4288) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 4352)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 4352) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 4416)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 4416) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 4480)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 4480) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 4544)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 4544) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        kernel_shared[(((int)threadIdx.x) + 4608)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x)) + 294912)];
        kernel_shared[(((int)threadIdx.x) + 4672)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 4672) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 4736)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 4736) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 4800)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 4800) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 4864)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 4864) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 4928)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 4928) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 4992)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 4992) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 5056)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 5056) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 5120)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 5120) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        kernel_shared[(((int)threadIdx.x) + 5184)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x)) + 331776)];
        kernel_shared[(((int)threadIdx.x) + 5248)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 5248) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 5312)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 5312) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 5376)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 5376) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 5440)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 5440) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 5504)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 5504) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 5568)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 5568) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 5632)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 5632) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 5696)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 5696) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        kernel_shared[(((int)threadIdx.x) + 5760)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x)) + 368640)];
        kernel_shared[(((int)threadIdx.x) + 5824)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 5824) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 5888)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 5888) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 5952)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 5952) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 6016)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 6016) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 6080)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 6080) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 6144)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 6144) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 6208)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 6208) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 6272)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 6272) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        kernel_shared[(((int)threadIdx.x) + 6336)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x)) + 405504)];
        kernel_shared[(((int)threadIdx.x) + 6400)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 6400) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 6464)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 6464) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 6528)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 6528) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 6592)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 6592) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 6656)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 6656) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 6720)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 6720) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 6784)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 6784) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 6848)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 6848) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        kernel_shared[(((int)threadIdx.x) + 6912)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x)) + 442368)];
        kernel_shared[(((int)threadIdx.x) + 6976)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 6976) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 7040)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 7040) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 7104)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 7104) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 7168)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 7168) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 7232)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 7232) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 7296)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 7296) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 7360)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 7360) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 7424)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 7424) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        kernel_shared[(((int)threadIdx.x) + 7488)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x)) + 479232)];
        kernel_shared[(((int)threadIdx.x) + 7552)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 7552) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 7616)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 7616) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 7680)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 7680) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 7744)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 7744) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 7808)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 7808) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 7872)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 7872) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 7936)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 7936) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 8000)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 8000) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        kernel_shared[(((int)threadIdx.x) + 8064)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x)) + 516096)];
        kernel_shared[(((int)threadIdx.x) + 8128)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 8128) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 8192)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 8192) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 8256)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 8256) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 8320)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 8320) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 8384)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 8384) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 8448)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 8448) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 8512)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 8512) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 8576)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 8576) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        kernel_shared[(((int)threadIdx.x) + 8640)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (rc_outer_outer * 72)) + ((int)threadIdx.x)) + 552960)];
        kernel_shared[(((int)threadIdx.x) + 8704)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 8704) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 64) % 72))];
        kernel_shared[(((int)threadIdx.x) + 8768)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 8768) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 56) % 72))];
        kernel_shared[(((int)threadIdx.x) + 8832)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 8832) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 48) % 72))];
        kernel_shared[(((int)threadIdx.x) + 8896)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 8896) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 40) % 72))];
        kernel_shared[(((int)threadIdx.x) + 8960)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 8960) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 32) % 72))];
        kernel_shared[(((int)threadIdx.x) + 9024)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 9024) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 24) % 72))];
        kernel_shared[(((int)threadIdx.x) + 9088)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 9088) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) + 16) % 72))];
        kernel_shared[(((int)threadIdx.x) + 9152)] = kernel[(((((((int)blockIdx.x) / 7) * 589824) + (((((int)threadIdx.x) + 9152) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) + 8))];
        __syncthreads();
        for (int rc_outer_inner = 0; rc_outer_inner < 8; ++rc_outer_inner) {
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(rc_outer_inner * 27)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 9))]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_outer_inner * 27) + 1)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 1)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_outer_inner * 27) + 2)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 2)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_outer_inner * 27) + 3)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 3)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_outer_inner * 27) + 4)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 4)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_outer_inner * 27) + 5)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 5)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_outer_inner * 27) + 6)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 6)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_outer_inner * 27) + 7)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 7)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_outer_inner * 27) + 8)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 8)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 27) + 3)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 9))]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 27) + 4)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 1)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 27) + 5)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 2)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 27) + 6)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 3)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 27) + 7)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 4)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 27) + 8)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 5)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 27) + 9)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 6)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 27) + 10)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 7)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 27) + 11)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 8)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_outer_inner * 27) + 6)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 9))]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_outer_inner * 27) + 7)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 1)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_outer_inner * 27) + 8)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 2)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_outer_inner * 27) + 9)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 3)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_outer_inner * 27) + 10)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 4)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_outer_inner * 27) + 11)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 5)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_outer_inner * 27) + 12)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 6)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_outer_inner * 27) + 13)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 7)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_outer_inner * 27) + 14)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 8)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_outer_inner * 27) + 9)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 9))]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_outer_inner * 27) + 10)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 1)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_outer_inner * 27) + 11)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 2)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_outer_inner * 27) + 12)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 3)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_outer_inner * 27) + 13)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 4)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_outer_inner * 27) + 14)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 5)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_outer_inner * 27) + 15)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 6)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_outer_inner * 27) + 16)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 7)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_outer_inner * 27) + 17)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 8)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_outer_inner * 27) + 12)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 9))]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_outer_inner * 27) + 13)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 1)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_outer_inner * 27) + 14)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 2)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_outer_inner * 27) + 15)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 3)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_outer_inner * 27) + 16)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 4)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_outer_inner * 27) + 17)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 5)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_outer_inner * 27) + 18)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 6)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_outer_inner * 27) + 19)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 7)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_outer_inner * 27) + 20)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 8)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_outer_inner * 27) + 15)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 9))]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_outer_inner * 27) + 16)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 1)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_outer_inner * 27) + 17)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 2)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_outer_inner * 27) + 18)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 3)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_outer_inner * 27) + 19)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 4)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_outer_inner * 27) + 20)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 5)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_outer_inner * 27) + 21)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 6)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_outer_inner * 27) + 22)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 7)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_outer_inner * 27) + 23)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 8)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_outer_inner * 27) + 18)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 9))]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_outer_inner * 27) + 19)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 1)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_outer_inner * 27) + 20)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 2)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_outer_inner * 27) + 21)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 3)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_outer_inner * 27) + 22)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 4)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_outer_inner * 27) + 23)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 5)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_outer_inner * 27) + 24)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 6)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_outer_inner * 27) + 25)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 7)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_outer_inner * 27) + 26)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 8)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(rc_outer_inner * 27)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 72)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((rc_outer_inner * 27) + 1)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 73)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((rc_outer_inner * 27) + 2)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 74)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((rc_outer_inner * 27) + 3)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 75)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((rc_outer_inner * 27) + 4)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 76)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((rc_outer_inner * 27) + 5)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 77)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((rc_outer_inner * 27) + 6)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 78)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((rc_outer_inner * 27) + 7)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 79)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((rc_outer_inner * 27) + 8)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 80)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((rc_outer_inner * 27) + 3)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 72)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((rc_outer_inner * 27) + 4)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 73)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((rc_outer_inner * 27) + 5)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 74)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((rc_outer_inner * 27) + 6)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 75)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((rc_outer_inner * 27) + 7)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 76)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((rc_outer_inner * 27) + 8)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 77)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((rc_outer_inner * 27) + 9)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 78)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((rc_outer_inner * 27) + 10)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 79)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((rc_outer_inner * 27) + 11)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 80)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((rc_outer_inner * 27) + 6)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 72)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((rc_outer_inner * 27) + 7)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 73)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((rc_outer_inner * 27) + 8)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 74)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((rc_outer_inner * 27) + 9)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 75)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((rc_outer_inner * 27) + 10)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 76)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((rc_outer_inner * 27) + 11)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 77)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((rc_outer_inner * 27) + 12)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 78)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((rc_outer_inner * 27) + 13)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 79)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((rc_outer_inner * 27) + 14)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 80)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((rc_outer_inner * 27) + 9)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 72)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((rc_outer_inner * 27) + 10)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 73)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((rc_outer_inner * 27) + 11)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 74)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((rc_outer_inner * 27) + 12)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 75)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((rc_outer_inner * 27) + 13)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 76)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((rc_outer_inner * 27) + 14)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 77)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((rc_outer_inner * 27) + 15)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 78)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((rc_outer_inner * 27) + 16)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 79)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((rc_outer_inner * 27) + 17)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 80)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((rc_outer_inner * 27) + 12)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 72)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((rc_outer_inner * 27) + 13)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 73)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((rc_outer_inner * 27) + 14)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 74)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((rc_outer_inner * 27) + 15)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 75)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((rc_outer_inner * 27) + 16)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 76)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((rc_outer_inner * 27) + 17)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 77)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((rc_outer_inner * 27) + 18)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 78)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((rc_outer_inner * 27) + 19)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 79)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((rc_outer_inner * 27) + 20)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 80)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((rc_outer_inner * 27) + 15)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 72)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((rc_outer_inner * 27) + 16)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 73)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((rc_outer_inner * 27) + 17)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 74)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((rc_outer_inner * 27) + 18)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 75)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((rc_outer_inner * 27) + 19)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 76)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((rc_outer_inner * 27) + 20)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 77)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((rc_outer_inner * 27) + 21)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 78)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((rc_outer_inner * 27) + 22)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 79)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((rc_outer_inner * 27) + 23)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 80)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((rc_outer_inner * 27) + 18)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 72)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((rc_outer_inner * 27) + 19)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 73)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((rc_outer_inner * 27) + 20)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 74)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((rc_outer_inner * 27) + 21)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 75)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((rc_outer_inner * 27) + 22)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 76)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((rc_outer_inner * 27) + 23)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 77)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((rc_outer_inner * 27) + 24)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 78)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((rc_outer_inner * 27) + 25)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 79)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((rc_outer_inner * 27) + 26)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 9)) + 80)]));
        }
      }
      for (int i1_inner = 0; i1_inner < 2; ++i1_inner) {
        for (int i2_inner = 0; i2_inner < 7; ++i2_inner) {
          compute[((((((((int)blockIdx.x) / 7) * 6272) + (((int)threadIdx.x) * 98)) + (i1_inner * 49)) + (i2_inner * 7)) + (((int)blockIdx.x) % 7))] = max((conv2d_nchw[((i1_inner * 7) + i2_inner)] + bias[((((((int)blockIdx.x) / 7) * 128) + (((int)threadIdx.x) * 2)) + i1_inner)]), 0.000000e+00f);
        }
      }
    }





A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.7/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  22.653 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
