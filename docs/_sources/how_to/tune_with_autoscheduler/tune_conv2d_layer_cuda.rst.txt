
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: default



    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 54-59

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 59-71

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 72-75

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 75-88

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 89-106

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 106-116

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 117-123

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 123-132

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 133-136

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 136-140

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute}
      preflattened_buffer_map = {data_1: data_3: Buffer(data_2, float32, [1, 512, 7, 7], []), kernel_1: kernel_3: Buffer(kernel_2, float32, [512, 512, 3, 3], []), bias_1: bias_3: Buffer(bias_2, float32, [1, 512, 1, 1], []), compute_1: compute_3: Buffer(compute_2, float32, [1, 512, 7, 7], [])} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 64;
      allocate(conv2d_nchw: Pointer(local float32), float32, [7]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [8064]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [3072]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [1], [], scope="local", align=4)[0] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[6] = 0f32
        for (rc.outer.outer: int32, 0, 4) {
          for (ry.outer.outer: int32, 0, 3) {
            let cse_var_4: int32 = (rc.outer.outer*6272)
            let cse_var_3: int32 = (rc.outer.outer*1152)
            let cse_var_2: int32 = (ry.outer.outer*7)
            let cse_var_1: int32 = (ry.outer.outer*3)
             {
              attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1: Buffer(pad_temp.shared, float32, [8064], [], scope="shared")[(threadIdx.x_1*6)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 336)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 112), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 337)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 112), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 338)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 112), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 339)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 113), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 340)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 113), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 341)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 113), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 672)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 224), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 673)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 224), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 674)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 224), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 675)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) + 517)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 676)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) + 517)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 677)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) + 517)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 1008)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) + 776)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1009)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) + 776)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1010)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) + 776)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1011)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 337), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1012)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 337), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1013)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 337), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 1344)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 448), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1345)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 448), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1346)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 448), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1347)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 449), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1348)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 449), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1349)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 449), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 1680)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 560), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1681)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 560), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1682)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 560), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1683)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) + 1301)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1684)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) + 1301)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 1685)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) + 1301)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 2016)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) + 1560)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2017)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) + 1560)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2018)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) + 1560)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2019)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 673), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2020)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 673), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2021)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 673), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 2352)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 784), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2353)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 784), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2354)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 784), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2355)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 785), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2356)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 785), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2357)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 785), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 2688)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 896), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2689)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 896), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2690)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 896), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2691)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) + 2085)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2692)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) + 2085)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 2693)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) + 2085)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 3024)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) + 2344)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3025)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) + 2344)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3026)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) + 2344)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3027)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1009), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3028)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1009), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3029)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1009), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 3360)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1120), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3361)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1120), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3362)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1120), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3363)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1121), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3364)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1121), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3365)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1121), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 3696)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1232), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3697)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1232), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3698)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1232), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3699)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) + 2869)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3700)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) + 2869)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 3701)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) + 2869)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 4032)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) + 3128)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4033)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) + 3128)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4034)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) + 3128)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4035)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1345), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4036)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1345), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4037)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1345), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 4368)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1456), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4369)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1456), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4370)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1456), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4371)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1457), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4372)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1457), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4373)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1457), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 4704)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1568), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4705)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1568), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4706)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1568), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4707)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) + 3653)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4708)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) + 3653)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 4709)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) + 3653)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 5040)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) + 3912)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5041)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) + 3912)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5042)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) + 3912)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5043)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1681), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5044)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1681), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5045)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1681), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 5376)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1792), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5377)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1792), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5378)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1792), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5379)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1793), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5380)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1793), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5381)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1793), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 5712)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1904), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5713)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1904), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5714)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 1904), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5715)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) + 4437)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5716)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) + 4437)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 5717)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) + 4437)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 6048)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) + 4696)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 6049)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) + 4696)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 6050)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) + 4696)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 6051)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2017), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 6052)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2017), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 6053)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2017), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 6384)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2128), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 6385)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2128), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 6386)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2128), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 6387)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2129), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 6388)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2129), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 6389)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2129), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 6720)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2240), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 6721)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2240), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 6722)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2240), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 6723)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) + 5221)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 6724)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) + 5221)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 6725)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) + 5221)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 7056)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) + 5480)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 7057)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) + 5480)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 7058)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) + 5480)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 7059)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2353), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 7060)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2353), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 7061)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2353), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 7392)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 3), 9))) && (floormod(((threadIdx.x_1*6) + 3), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2464), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 3), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 7393)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 4), 9))) && (floormod(((threadIdx.x_1*6) + 4), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2464), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 4), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 7394)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 5), 9))) && (floormod(((threadIdx.x_1*6) + 5), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2464), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 5), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 7395)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2465), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 7396)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2465), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 7397)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2465), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
                pad_temp.shared_1[((threadIdx.x_1*6) + 7728)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 6), 9))) && (floormod(((threadIdx.x_1*6) + 6), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2576), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 6), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 7729)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 7), 9))) && (floormod(((threadIdx.x_1*6) + 7), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2576), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 7), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 7730)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 21), 3) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 8), 9))) && (floormod(((threadIdx.x_1*6) + 8), 9) < 8)), data[((((cse_var_4 + (floordiv(((threadIdx.x_1*2) + 2576), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 8), 9)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 7731)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod((threadIdx.x_1*6), 9))) && (floormod((threadIdx.x_1*6), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod((threadIdx.x_1*6), 9)) + 6005)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 7732)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 1), 9))) && (floormod(((threadIdx.x_1*6) + 1), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 1), 9)) + 6005)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*6) + 7733)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7))) && ((ry.outer.outer + floormod((floordiv((threadIdx.x_1*2), 3) + 5), 7)) < 8)) && (1 <= floormod(((threadIdx.x_1*6) + 2), 9))) && (floormod(((threadIdx.x_1*6) + 2), 9) < 8)), data[((((cse_var_4 + (floordiv((threadIdx.x_1*2), 3)*7)) + cse_var_2) + floormod(((threadIdx.x_1*6) + 2), 9)) + 6005)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1: Buffer(kernel.shared, float32, [3072], [], scope="shared")[threadIdx.x_2] = kernel[(((((blockIdx.x*36864) + cse_var_3) + (floordiv(threadIdx.x_2, 3)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 56)] = kernel[(((((blockIdx.x*36864) + cse_var_3) + (floordiv((threadIdx.x_2 + 56), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 112)] = kernel[(((((blockIdx.x*36864) + cse_var_3) + (floordiv((threadIdx.x_2 + 112), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 168)] = kernel[((((((blockIdx.x*36864) + cse_var_3) + (floordiv(threadIdx.x_2, 3)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3)) + 504)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 224)] = kernel[(((((blockIdx.x*36864) + cse_var_3) + (floordiv((threadIdx.x_2 + 224), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 280)] = kernel[(((((blockIdx.x*36864) + cse_var_3) + (floordiv((threadIdx.x_2 + 280), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 336)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 336), 384)*4608)) + cse_var_3) + (floormod((floordiv(threadIdx.x_2, 3) + 112), 128)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 392)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 392), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 8), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 448)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 448), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 64), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 504)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 504), 384)*4608)) + cse_var_3) + ((floordiv(threadIdx.x_2, 3) + 40)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 560)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 560), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 176), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 616)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 616), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 232), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 672)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 672), 384)*4608)) + cse_var_3) + ((floordiv(threadIdx.x_2, 3) + 96)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 728)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 728), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 344), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 784)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 784), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 16), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 840)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 840), 384)*4608)) + cse_var_3) + ((floordiv(threadIdx.x_2, 3) + 24)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 896)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 896), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 128), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 952)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 952), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 184), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1008)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1008), 384)*4608)) + cse_var_3) + ((floordiv(threadIdx.x_2, 3) + 80)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1064)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1064), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 296), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1120)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1120), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 352), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1176)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1176), 384)*4608)) + cse_var_3) + ((floordiv(threadIdx.x_2, 3) + 8)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1232)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1232), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 80), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1288)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1288), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 136), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1344)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1344), 384)*4608)) + cse_var_3) + ((floordiv(threadIdx.x_2, 3) + 64)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1400)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1400), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 248), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1456)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1456), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 304), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1512)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1512), 384)*4608)) + cse_var_3) + (floormod((floordiv(threadIdx.x_2, 3) + 120), 128)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1568)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1568), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 32), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1624)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1624), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 88), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1680)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1680), 384)*4608)) + cse_var_3) + ((floordiv(threadIdx.x_2, 3) + 48)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1736)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1736), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 200), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1792)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1792), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 256), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1848)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1848), 384)*4608)) + cse_var_3) + ((floordiv(threadIdx.x_2, 3) + 104)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1904)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1904), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 368), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 1960)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1960), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 40), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2016)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2016), 384)*4608)) + cse_var_3) + ((floordiv(threadIdx.x_2, 3) + 32)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2072)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2072), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 152), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2128)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2128), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 208), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2184)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2184), 384)*4608)) + cse_var_3) + ((floordiv(threadIdx.x_2, 3) + 88)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2240)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2240), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 320), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2296)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2296), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 376), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2352)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2352), 384)*4608)) + cse_var_3) + ((floordiv(threadIdx.x_2, 3) + 16)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2408)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2408), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 104), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2464)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2464), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 160), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2520)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2520), 384)*4608)) + cse_var_3) + ((floordiv(threadIdx.x_2, 3) + 72)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2576)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2576), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 272), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2632)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2632), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 328), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2688)] = kernel[((((((blockIdx.x*36864) + cse_var_3) + (floordiv(threadIdx.x_2, 3)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3)) + 32256)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2744)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2744), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 56), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2800)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2800), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 112), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2856)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2856), 384)*4608)) + cse_var_3) + ((floordiv(threadIdx.x_2, 3) + 56)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2912)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2912), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 224), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 2), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              kernel.shared_1[(threadIdx.x_2 + 2968)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 2968), 384)*4608)) + cse_var_3) + (floordiv(floormod((threadIdx.x_2 + 280), 384), 3)*9)) + cse_var_1) + floormod((threadIdx.x_2 + 1), 3))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
              if @tir.likely((threadIdx.x_2 < 48), dtype=bool) {
                kernel.shared_1[(threadIdx.x_2 + 3024)] = kernel[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 3024), 384)*4608)) + cse_var_3) + ((floordiv(threadIdx.x_2, 3) + 112)*9)) + cse_var_1) + floormod(threadIdx.x_2, 3))]
              }
              for (rc.outer.inner: int32, 0, 128) {
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((rc.outer.inner*63) + floormod(threadIdx.x, 7))]*kernel.shared_1[((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3))]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3))]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3))]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 27)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3))]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 36)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3))]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 45)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3))]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 54)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3))]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3)) + 1)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3)) + 1)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3)) + 1)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 28)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3)) + 1)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 37)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3)) + 1)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 46)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3)) + 1)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 55)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3)) + 1)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3)) + 2)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3)) + 2)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3)) + 2)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 29)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3)) + 2)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 38)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3)) + 2)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 47)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3)) + 2)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((rc.outer.inner*63) + floormod(threadIdx.x, 7)) + 56)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*384) + (rc.outer.inner*3)) + 2)]))
              }
            }
          }
        }
        compute[(((blockIdx.x*392) + (floordiv(threadIdx.x, 7)*49)) + floormod(threadIdx.x, 7))] = max((conv2d_nchw_1[0] + bias[((blockIdx.x*8) + floordiv(threadIdx.x, 7))]), 0f32)
        compute[((((blockIdx.x*392) + (floordiv(threadIdx.x, 7)*49)) + floormod(threadIdx.x, 7)) + 7)] = max((conv2d_nchw_1[1] + bias[((blockIdx.x*8) + floordiv(threadIdx.x, 7))]), 0f32)
        compute[((((blockIdx.x*392) + (floordiv(threadIdx.x, 7)*49)) + floormod(threadIdx.x, 7)) + 14)] = max((conv2d_nchw_1[2] + bias[((blockIdx.x*8) + floordiv(threadIdx.x, 7))]), 0f32)
        compute[((((blockIdx.x*392) + (floordiv(threadIdx.x, 7)*49)) + floormod(threadIdx.x, 7)) + 21)] = max((conv2d_nchw_1[3] + bias[((blockIdx.x*8) + floordiv(threadIdx.x, 7))]), 0f32)
        compute[((((blockIdx.x*392) + (floordiv(threadIdx.x, 7)*49)) + floormod(threadIdx.x, 7)) + 28)] = max((conv2d_nchw_1[4] + bias[((blockIdx.x*8) + floordiv(threadIdx.x, 7))]), 0f32)
        compute[((((blockIdx.x*392) + (floordiv(threadIdx.x, 7)*49)) + floormod(threadIdx.x, 7)) + 35)] = max((conv2d_nchw_1[5] + bias[((blockIdx.x*8) + floordiv(threadIdx.x, 7))]), 0f32)
        compute[((((blockIdx.x*392) + (floordiv(threadIdx.x, 7)*49)) + floormod(threadIdx.x, 7)) + 42)] = max((conv2d_nchw_1[6] + bias[((blockIdx.x*8) + floordiv(threadIdx.x, 7))]), 0f32)
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 141-144

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 144-171

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.321 ms




.. GENERATED FROM PYTHON SOURCE LINES 172-177

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 179-182

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=8)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=7)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=1)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=128)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=3)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=8)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=7)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=56)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=6)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=56)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(56) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[7];
      __shared__ float pad_temp_shared[8064];
      __shared__ float kernel_shared[3072];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 4; ++rc_outer_outer) {
        for (int ry_outer_outer = 0; ry_outer_outer < 3; ++ry_outer_outer) {
          __syncthreads();
          pad_temp_shared[(((int)threadIdx.x) * 6)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 336)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 112) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 337)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 112) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 338)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 112) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 339)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 113) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 340)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 113) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 341)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 113) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 672)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 224) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 673)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 224) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 674)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 224) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 675)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 517)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 676)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 517)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 677)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 517)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1008)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 776)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1009)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 776)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1010)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 776)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1011)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 337) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1012)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 337) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1013)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 337) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1344)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 448) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1345)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 448) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1346)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 448) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1347)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 449) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1348)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 449) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1349)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 449) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1680)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 560) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1681)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 560) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1682)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 560) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1683)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 1301)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1684)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 1301)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1685)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 1301)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2016)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 1560)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2017)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 1560)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2018)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 1560)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2019)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 673) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2020)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 673) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2021)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 673) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2352)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 784) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2353)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 784) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2354)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 784) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2355)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 785) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2356)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 785) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2357)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 785) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2688)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 896) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2689)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 896) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2690)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 896) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2691)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 2085)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2692)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 2085)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2693)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 2085)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3024)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 2344)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3025)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 2344)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3026)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 2344)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3027)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1009) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3028)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1009) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3029)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1009) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3360)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1120) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3361)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1120) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3362)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1120) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3363)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1121) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3364)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1121) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3365)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1121) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3696)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1232) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3697)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1232) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3698)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1232) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3699)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 2869)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3700)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 2869)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3701)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 2869)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4032)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 3128)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4033)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 3128)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4034)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 3128)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4035)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1345) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4036)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1345) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4037)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1345) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4368)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1456) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4369)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1456) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4370)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1456) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4371)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1457) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4372)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1457) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4373)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1457) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4704)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1568) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4705)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1568) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4706)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1568) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4707)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 3653)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4708)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 3653)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4709)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 3653)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5040)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 3912)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5041)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 3912)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5042)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 3912)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5043)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1681) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5044)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1681) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5045)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1681) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5376)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1792) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5377)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1792) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5378)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1792) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5379)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1793) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5380)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1793) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5381)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1793) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5712)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1904) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5713)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1904) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5714)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 1904) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5715)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 4437)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5716)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 4437)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5717)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 4437)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6048)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 4696)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6049)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 4696)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6050)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 4696)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6051)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2017) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6052)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2017) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6053)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2017) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6384)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2128) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6385)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2128) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6386)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2128) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6387)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2129) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6388)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2129) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6389)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2129) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6720)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2240) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6721)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2240) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6722)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2240) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6723)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 5221)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6724)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 5221)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 6725)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 5221)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7056)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 5480)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7057)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 5480)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7058)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 5480)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7059)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2353) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7060)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2353) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7061)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2353) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7392)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2464) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7393)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2464) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7394)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2464) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7395)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2465) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7396)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2465) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7397)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2465) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7728)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2576) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7729)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2576) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7730)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + ((((((int)threadIdx.x) * 2) + 2576) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7731)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 6005)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7732)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 6005)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 7733)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 6272) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 6005)] : 0.000000e+00f);
          kernel_shared[((int)threadIdx.x)] = kernel[(((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 56)] = kernel[(((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 56) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 112)] = kernel[(((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 112) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 168)] = kernel[((((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 504)];
          kernel_shared[(((int)threadIdx.x) + 224)] = kernel[(((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 224) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 280)] = kernel[(((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 280) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 336)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 336) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((((int)threadIdx.x) / 3) + 112) & 127) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 392)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 392) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 8) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 448)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 448) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 64) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 504)] = kernel[(((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 504) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 360)];
          kernel_shared[(((int)threadIdx.x) + 560)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 560) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 176) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 616)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 616) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 232) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 672)] = kernel[(((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 672) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 864)];
          kernel_shared[(((int)threadIdx.x) + 728)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 728) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((((int)threadIdx.x) + 344) % 384) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 784)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 784) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 16) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 840)] = kernel[(((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 840) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 216)];
          kernel_shared[(((int)threadIdx.x) + 896)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 896) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 128) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 952)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 952) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 184) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1008)] = kernel[(((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1008) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 720)];
          kernel_shared[(((int)threadIdx.x) + 1064)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1064) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 296) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1120)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1120) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((((int)threadIdx.x) + 352) % 384) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1176)] = kernel[(((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1176) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 72)];
          kernel_shared[(((int)threadIdx.x) + 1232)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1232) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 80) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1288)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1288) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 136) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1344)] = kernel[(((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1344) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 576)];
          kernel_shared[(((int)threadIdx.x) + 1400)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1400) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 248) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1456)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1456) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 304) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1512)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1512) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((((int)threadIdx.x) / 3) + 120) & 127) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1568)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1568) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 32) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1624)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1624) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 88) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1680)] = kernel[(((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1680) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 432)];
          kernel_shared[(((int)threadIdx.x) + 1736)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1736) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 200) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1792)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1792) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 256) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1848)] = kernel[(((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1848) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 936)];
          kernel_shared[(((int)threadIdx.x) + 1904)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1904) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((((int)threadIdx.x) + 368) % 384) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1960)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1960) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 40) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2016)] = kernel[(((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2016) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 288)];
          kernel_shared[(((int)threadIdx.x) + 2072)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2072) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 152) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2128)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2128) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 208) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2184)] = kernel[(((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2184) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 792)];
          kernel_shared[(((int)threadIdx.x) + 2240)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2240) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 320) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2296)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2296) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((((int)threadIdx.x) + 376) % 384) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2352)] = kernel[(((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2352) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 144)];
          kernel_shared[(((int)threadIdx.x) + 2408)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2408) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 104) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2464)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2464) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 160) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2520)] = kernel[(((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2520) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 648)];
          kernel_shared[(((int)threadIdx.x) + 2576)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2576) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 272) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2632)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2632) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 328) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2688)] = kernel[((((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 32256)];
          kernel_shared[(((int)threadIdx.x) + 2744)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2744) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 56) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2800)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2800) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 112) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2856)] = kernel[(((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2856) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 504)];
          kernel_shared[(((int)threadIdx.x) + 2912)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2912) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 224) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2968)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 2968) / 384) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 280) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          if (((int)threadIdx.x) < 48) {
            kernel_shared[(((int)threadIdx.x) + 3024)] = kernel[(((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 3024) / 384) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 1008)];
          }
          __syncthreads();
          for (int rc_outer_inner = 0; rc_outer_inner < 128; ++rc_outer_inner) {
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_outer_inner * 63) + (((int)threadIdx.x) % 7))] * kernel_shared[(((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3))]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[(((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3))]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[(((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3))]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 27)] * kernel_shared[(((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3))]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 36)] * kernel_shared[(((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3))]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 45)] * kernel_shared[(((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3))]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 54)] * kernel_shared[(((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3))]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3)) + 1)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3)) + 1)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3)) + 1)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 28)] * kernel_shared[((((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3)) + 1)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 37)] * kernel_shared[((((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3)) + 1)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 46)] * kernel_shared[((((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3)) + 1)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 55)] * kernel_shared[((((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3)) + 1)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3)) + 2)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3)) + 2)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3)) + 2)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 29)] * kernel_shared[((((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3)) + 2)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 38)] * kernel_shared[((((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3)) + 2)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 47)] * kernel_shared[((((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3)) + 2)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((rc_outer_inner * 63) + (((int)threadIdx.x) % 7)) + 56)] * kernel_shared[((((((int)threadIdx.x) / 7) * 384) + (rc_outer_inner * 3)) + 2)]));
          }
        }
      }
      compute[(((((int)blockIdx.x) * 392) + ((((int)threadIdx.x) / 7) * 49)) + (((int)threadIdx.x) % 7))] = max((conv2d_nchw[0] + bias[((((int)blockIdx.x) * 8) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
      compute[((((((int)blockIdx.x) * 392) + ((((int)threadIdx.x) / 7) * 49)) + (((int)threadIdx.x) % 7)) + 7)] = max((conv2d_nchw[1] + bias[((((int)blockIdx.x) * 8) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
      compute[((((((int)blockIdx.x) * 392) + ((((int)threadIdx.x) / 7) * 49)) + (((int)threadIdx.x) % 7)) + 14)] = max((conv2d_nchw[2] + bias[((((int)blockIdx.x) * 8) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
      compute[((((((int)blockIdx.x) * 392) + ((((int)threadIdx.x) / 7) * 49)) + (((int)threadIdx.x) % 7)) + 21)] = max((conv2d_nchw[3] + bias[((((int)blockIdx.x) * 8) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
      compute[((((((int)blockIdx.x) * 392) + ((((int)threadIdx.x) / 7) * 49)) + (((int)threadIdx.x) % 7)) + 28)] = max((conv2d_nchw[4] + bias[((((int)blockIdx.x) * 8) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
      compute[((((((int)blockIdx.x) * 392) + ((((int)threadIdx.x) / 7) * 49)) + (((int)threadIdx.x) % 7)) + 35)] = max((conv2d_nchw[5] + bias[((((int)blockIdx.x) * 8) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
      compute[((((((int)blockIdx.x) * 392) + ((((int)threadIdx.x) / 7) * 49)) + (((int)threadIdx.x) % 7)) + 42)] = max((conv2d_nchw[6] + bias[((((int)blockIdx.x) * 8) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
    }






.. GENERATED FROM PYTHON SOURCE LINES 190-194

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 194-216

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.7/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  19.320 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
