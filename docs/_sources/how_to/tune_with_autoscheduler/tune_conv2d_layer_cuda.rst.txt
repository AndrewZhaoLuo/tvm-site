.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the master process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.


.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none






We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 16;
      allocate(conv2d_nchw: Pointer(local float32), float32, [4]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [6272]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [4096]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [4], [], scope="local", align=16)[0] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[3] = 0f32
        for (rc.outer.outer: int32, 0, 4) {
          for (ry.outer.outer: int32, 0, 3) {
            for (rx.outer.outer: int32, 0, 3) {
              let cse_var_2: int32 = (rc.outer.outer*1152)
              let cse_var_1: int32 = (ry.outer.outer*3)
               {
                attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392 {
                  pad_temp.shared_1: Buffer(pad_temp.shared, float32, [6272], [], scope="shared")[(threadIdx.x_1*2)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*2), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*2), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) - 8)], 0f32, dtype=float32)
                  pad_temp.shared_1[((threadIdx.x_1*2) + 1)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) - 7)], 0f32, dtype=float32)
                }
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392 {
                  pad_temp.shared_1[((threadIdx.x_1*2) + 784)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*2), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*2), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) + 776)], 0f32, dtype=float32)
                  pad_temp.shared_1[((threadIdx.x_1*2) + 785)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) + 777)], 0f32, dtype=float32)
                }
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392 {
                  pad_temp.shared_1[((threadIdx.x_1*2) + 1568)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*2), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*2), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) + 1560)], 0f32, dtype=float32)
                  pad_temp.shared_1[((threadIdx.x_1*2) + 1569)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) + 1561)], 0f32, dtype=float32)
                }
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392 {
                  pad_temp.shared_1[((threadIdx.x_1*2) + 2352)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*2), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*2), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) + 2344)], 0f32, dtype=float32)
                  pad_temp.shared_1[((threadIdx.x_1*2) + 2353)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) + 2345)], 0f32, dtype=float32)
                }
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392 {
                  pad_temp.shared_1[((threadIdx.x_1*2) + 3136)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*2), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*2), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) + 3128)], 0f32, dtype=float32)
                  pad_temp.shared_1[((threadIdx.x_1*2) + 3137)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) + 3129)], 0f32, dtype=float32)
                }
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392 {
                  pad_temp.shared_1[((threadIdx.x_1*2) + 3920)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*2), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*2), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) + 3912)], 0f32, dtype=float32)
                  pad_temp.shared_1[((threadIdx.x_1*2) + 3921)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) + 3913)], 0f32, dtype=float32)
                }
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392 {
                  pad_temp.shared_1[((threadIdx.x_1*2) + 4704)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*2), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*2), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) + 4696)], 0f32, dtype=float32)
                  pad_temp.shared_1[((threadIdx.x_1*2) + 4705)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) + 4697)], 0f32, dtype=float32)
                }
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392 {
                  pad_temp.shared_1[((threadIdx.x_1*2) + 5488)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*2), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*2), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) + 5480)], 0f32, dtype=float32)
                  pad_temp.shared_1[((threadIdx.x_1*2) + 5489)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*2) + 1), 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + (threadIdx.x_1*2)) + rx.outer.outer) + 5481)], 0f32, dtype=float32)
                }
                attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                kernel.shared_1: Buffer(kernel.shared, float32, [4096], [], scope="shared")[threadIdx.x_2] = kernel[((((((blockIdx.x*147456) + (floordiv(threadIdx.x_2, 128)*4608)) + cse_var_2) + (floormod(threadIdx.x_2, 128)*9)) + cse_var_1) + rx.outer.outer)]
                attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                kernel.shared_1[(threadIdx.x_2 + 392)] = kernel[((((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 8) + 49), 16)*4608)) + cse_var_2) + (floormod((threadIdx.x_2 + 8), 128)*9)) + cse_var_1) + rx.outer.outer)]
                attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                kernel.shared_1[(threadIdx.x_2 + 784)] = kernel[((((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 8) + 98), 16)*4608)) + cse_var_2) + (floormod((threadIdx.x_2 + 16), 128)*9)) + cse_var_1) + rx.outer.outer)]
                attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                kernel.shared_1[(threadIdx.x_2 + 1176)] = kernel[((((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 8) + 147), 16)*4608)) + cse_var_2) + (floormod((threadIdx.x_2 + 24), 128)*9)) + cse_var_1) + rx.outer.outer)]
                attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                kernel.shared_1[(threadIdx.x_2 + 1568)] = kernel[((((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 8) + 196), 16)*4608)) + cse_var_2) + (floormod((threadIdx.x_2 + 32), 128)*9)) + cse_var_1) + rx.outer.outer)]
                attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                kernel.shared_1[(threadIdx.x_2 + 1960)] = kernel[((((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 8) + 245), 16)*4608)) + cse_var_2) + (floormod((threadIdx.x_2 + 40), 128)*9)) + cse_var_1) + rx.outer.outer)]
                attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                kernel.shared_1[(threadIdx.x_2 + 2352)] = kernel[((((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 8) + 294), 16)*4608)) + cse_var_2) + (floormod((threadIdx.x_2 + 48), 128)*9)) + cse_var_1) + rx.outer.outer)]
                attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                kernel.shared_1[(threadIdx.x_2 + 2744)] = kernel[((((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 8) + 343), 16)*4608)) + cse_var_2) + (floormod((threadIdx.x_2 + 56), 128)*9)) + cse_var_1) + rx.outer.outer)]
                attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                kernel.shared_1[(threadIdx.x_2 + 3136)] = kernel[((((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 8) + 392), 16)*4608)) + cse_var_2) + (floormod((threadIdx.x_2 + 64), 128)*9)) + cse_var_1) + rx.outer.outer)]
                attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                kernel.shared_1[(threadIdx.x_2 + 3528)] = kernel[((((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 8) + 441), 16)*4608)) + cse_var_2) + (floormod((threadIdx.x_2 + 72), 128)*9)) + cse_var_1) + rx.outer.outer)]
                attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                if @tir.likely((threadIdx.x_2 < 176), dtype=bool) {
                  kernel.shared_1[(threadIdx.x_2 + 3920)] = kernel[((((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 8) + 490), 16)*4608)) + cse_var_2) + (floormod((threadIdx.x_2 + 80), 128)*9)) + cse_var_1) + rx.outer.outer)]
                }
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[floormod(threadIdx.x, 49)]*kernel.shared_1[(floordiv(threadIdx.x, 49)*512)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[floormod(threadIdx.x, 49)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 128)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[floormod(threadIdx.x, 49)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 256)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[floormod(threadIdx.x, 49)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 384)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 1)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 129)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 257)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 385)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 2)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 130)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 258)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 386)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 3)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 131)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 259)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 387)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 196)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 4)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 196)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 132)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 196)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 260)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 196)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 388)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 5)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 133)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 261)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 389)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 294)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 6)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 294)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 134)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 294)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 262)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 294)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 390)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 343)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 7)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 343)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 135)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 343)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 263)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 343)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 391)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 392)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 8)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 392)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 136)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 392)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 264)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 392)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 392)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 441)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 9)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 441)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 137)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 441)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 265)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 441)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 393)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 490)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 10)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 490)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 138)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 490)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 266)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 490)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 394)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 539)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 11)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 539)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 139)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 539)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 267)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 539)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 395)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 588)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 12)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 588)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 140)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 588)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 268)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 588)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 396)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 637)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 13)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 637)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 141)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 637)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 269)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 637)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 397)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 686)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 14)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 686)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 142)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 686)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 270)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 686)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 398)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 735)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 15)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 735)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 143)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 735)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 271)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 735)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 399)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 784)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 16)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 784)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 144)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 784)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 272)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 784)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 400)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 833)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 17)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 833)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 145)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 833)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 273)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 833)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 401)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 882)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 18)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 882)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 146)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 882)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 274)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 882)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 402)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 931)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 19)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 931)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 147)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 931)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 275)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 931)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 403)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 980)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 20)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 980)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 148)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 980)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 276)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 980)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 404)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1029)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 21)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1029)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 149)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1029)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 277)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1029)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 405)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1078)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 22)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1078)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 150)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1078)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 278)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1078)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 406)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1127)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 23)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1127)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 151)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1127)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 279)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1127)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 407)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1176)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 24)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1176)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 152)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1176)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 280)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1176)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 408)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1225)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 25)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1225)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 153)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1225)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 281)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1225)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 409)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1274)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 26)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1274)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 154)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1274)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 282)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1274)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 410)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1323)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 27)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1323)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 155)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1323)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 283)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1323)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 411)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1372)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 28)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1372)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 156)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1372)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 284)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1372)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 412)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1421)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 29)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1421)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 157)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1421)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 285)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1421)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 413)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1470)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 30)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1470)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 158)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1470)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 286)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1470)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 414)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1519)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 31)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1519)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 159)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1519)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 287)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1519)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 415)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1568)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 32)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1568)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 160)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1568)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 288)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1568)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 416)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1617)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 33)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1617)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 161)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1617)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 289)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1617)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 417)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1666)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 34)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1666)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 162)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1666)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 290)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1666)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 418)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1715)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 35)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1715)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 163)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1715)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 291)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1715)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 419)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1764)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 36)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1764)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 164)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1764)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 292)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1764)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 420)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1813)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 37)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1813)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 165)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1813)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 293)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1813)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 421)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1862)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 38)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1862)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 166)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1862)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 294)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1862)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 422)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1911)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 39)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1911)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 167)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1911)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 295)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1911)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 423)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1960)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 40)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1960)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 168)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1960)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 296)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1960)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 424)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2009)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 41)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2009)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 169)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2009)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 297)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2009)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 425)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2058)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 42)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2058)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 170)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2058)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 298)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2058)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 426)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2107)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 43)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2107)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 171)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2107)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 299)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2107)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 427)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2156)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 44)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2156)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 172)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2156)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 300)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2156)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 428)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2205)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 45)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2205)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 173)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2205)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 301)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2205)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 429)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2254)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 46)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2254)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 174)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2254)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 302)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2254)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 430)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2303)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 47)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2303)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 175)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2303)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 303)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2303)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 431)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2352)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 48)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2352)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 176)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2352)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 304)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2352)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 432)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2401)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 49)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2401)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 177)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2401)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 305)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2401)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 433)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2450)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 50)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2450)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 178)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2450)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 306)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2450)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 434)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2499)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 51)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2499)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 179)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2499)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 307)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2499)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 435)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2548)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 52)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2548)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 180)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2548)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 308)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2548)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 436)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2597)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 53)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2597)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 181)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2597)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 309)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2597)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 437)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2646)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 54)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2646)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 182)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2646)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 310)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2646)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 438)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2695)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 55)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2695)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 183)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2695)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 311)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2695)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 439)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2744)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 56)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2744)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 184)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2744)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 312)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2744)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 440)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2793)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 57)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2793)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 185)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2793)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 313)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2793)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 441)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2842)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 58)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2842)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 186)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2842)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 314)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2842)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 442)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2891)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 59)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2891)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 187)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2891)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 315)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2891)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 443)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2940)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 60)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2940)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 188)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2940)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 316)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2940)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 444)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2989)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 61)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2989)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 189)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2989)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 317)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2989)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 445)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3038)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 62)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3038)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 190)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3038)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 318)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3038)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 446)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3087)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 63)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3087)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 191)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3087)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 319)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3087)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 447)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3136)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 64)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3136)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 192)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3136)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 320)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3136)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 448)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3185)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 65)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3185)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 193)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3185)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 321)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3185)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 449)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3234)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 66)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3234)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 194)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3234)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 322)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3234)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 450)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3283)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 67)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3283)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 195)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3283)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 323)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3283)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 451)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3332)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 68)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3332)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 196)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3332)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 324)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3332)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 452)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3381)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 69)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3381)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 197)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3381)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 325)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3381)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 453)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3430)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 70)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3430)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 198)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3430)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 326)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3430)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 454)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3479)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 71)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3479)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 199)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3479)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 327)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3479)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 455)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3528)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 72)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3528)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 200)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3528)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 328)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3528)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 456)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3577)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 73)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3577)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 201)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3577)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 329)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3577)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 457)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3626)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 74)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3626)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 202)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3626)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 330)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3626)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 458)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3675)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 75)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3675)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 203)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3675)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 331)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3675)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 459)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3724)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 76)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3724)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 204)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3724)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 332)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3724)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 460)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3773)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 77)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3773)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 205)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3773)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 333)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3773)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 461)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3822)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 78)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3822)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 206)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3822)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 334)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3822)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 462)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3871)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 79)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3871)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 207)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3871)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 335)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3871)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 463)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3920)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 80)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3920)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 208)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3920)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 336)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3920)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 464)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3969)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 81)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3969)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 209)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3969)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 337)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3969)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 465)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4018)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 82)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4018)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 210)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4018)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 338)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4018)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 466)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4067)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 83)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4067)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 211)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4067)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 339)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4067)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 467)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4116)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 84)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4116)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 212)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4116)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 340)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4116)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 468)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4165)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 85)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4165)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 213)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4165)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 341)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4165)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 469)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4214)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 86)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4214)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 214)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4214)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 342)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4214)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 470)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4263)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 87)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4263)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 215)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4263)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 343)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4263)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 471)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4312)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 88)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4312)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 216)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4312)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 344)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4312)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 472)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4361)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 89)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4361)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 217)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4361)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 345)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4361)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 473)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4410)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 90)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4410)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 218)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4410)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 346)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4410)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 474)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4459)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 91)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4459)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 219)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4459)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 347)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4459)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 475)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4508)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 92)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4508)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 220)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4508)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 348)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4508)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 476)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4557)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 93)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4557)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 221)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4557)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 349)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4557)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 477)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4606)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 94)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4606)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 222)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4606)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 350)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4606)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 478)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4655)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 95)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4655)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 223)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4655)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 351)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4655)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 479)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4704)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 96)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4704)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 224)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4704)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 352)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4704)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 480)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4753)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 97)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4753)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 225)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4753)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 353)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4753)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 481)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4802)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 98)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4802)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 226)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4802)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 354)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4802)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 482)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4851)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 99)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4851)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 227)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4851)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 355)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4851)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 483)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4900)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 100)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4900)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 228)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4900)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 356)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4900)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 484)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4949)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 101)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4949)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 229)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4949)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 357)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4949)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 485)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4998)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 102)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4998)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 230)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4998)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 358)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4998)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 486)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5047)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 103)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5047)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 231)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5047)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 359)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5047)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 487)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5096)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 104)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5096)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 232)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5096)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 360)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5096)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 488)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5145)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 105)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5145)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 233)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5145)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 361)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5145)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 489)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5194)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 106)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5194)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 234)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5194)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 362)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5194)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 490)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5243)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 107)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5243)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 235)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5243)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 363)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5243)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 491)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5292)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 108)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5292)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 236)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5292)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 364)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5292)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 492)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5341)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 109)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5341)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 237)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5341)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 365)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5341)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 493)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5390)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 110)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5390)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 238)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5390)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 366)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5390)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 494)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5439)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 111)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5439)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 239)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5439)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 367)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5439)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 495)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5488)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 112)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5488)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 240)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5488)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 368)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5488)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 496)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5537)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 113)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5537)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 241)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5537)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 369)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5537)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 497)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5586)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 114)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5586)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 242)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5586)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 370)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5586)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 498)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5635)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 115)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5635)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 243)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5635)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 371)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5635)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 499)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5684)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 116)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5684)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 244)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5684)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 372)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5684)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 500)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5733)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 117)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5733)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 245)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5733)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 373)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5733)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 501)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5782)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 118)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5782)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 246)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5782)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 374)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5782)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 502)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5831)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 119)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5831)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 247)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5831)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 375)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5831)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 503)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5880)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 120)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5880)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 248)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5880)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 376)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5880)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 504)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5929)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 121)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5929)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 249)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5929)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 377)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5929)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 505)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5978)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 122)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5978)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 250)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5978)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 378)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5978)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 506)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6027)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 123)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6027)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 251)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6027)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 379)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6027)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 507)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6076)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 124)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6076)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 252)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6076)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 380)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6076)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 508)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6125)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 125)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6125)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 253)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6125)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 381)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6125)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 509)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6174)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 126)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6174)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 254)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6174)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 382)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6174)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 510)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6223)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 127)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6223)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 255)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6223)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 383)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6223)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*512) + 511)]))
              }
            }
          }
        }
        for (i1.inner: int32, 0, 4) {
          compute[((((blockIdx.x*1568) + (floordiv(threadIdx.x, 49)*196)) + (i1.inner*49)) + floormod(threadIdx.x, 49))] = max((conv2d_nchw_1[i1.inner] + bias[(((blockIdx.x*32) + (floordiv(threadIdx.x, 49)*4)) + i1.inner)]), 0f32)
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.409 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.


.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=4)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=8)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=32)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=4)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=4)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=8)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=392)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=2)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=392)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 1024)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(392) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[4];
      __shared__ float pad_temp_shared[6272];
      __shared__ float kernel_shared[4096];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 4; ++rc_outer_outer) {
        for (int ry_outer_outer = 0; ry_outer_outer < 3; ++ry_outer_outer) {
          for (int rx_outer_outer = 0; rx_outer_outer < 3; ++rx_outer_outer) {
            __syncthreads();
            pad_temp_shared[(((int)threadIdx.x) * 2)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) - 8)] : 0.000000e+00f);
            pad_temp_shared[((((int)threadIdx.x) * 2) + 1)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) - 7)] : 0.000000e+00f);
            pad_temp_shared[((((int)threadIdx.x) * 2) + 784)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) + 776)] : 0.000000e+00f);
            pad_temp_shared[((((int)threadIdx.x) * 2) + 785)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) + 777)] : 0.000000e+00f);
            pad_temp_shared[((((int)threadIdx.x) * 2) + 1568)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) + 1560)] : 0.000000e+00f);
            pad_temp_shared[((((int)threadIdx.x) * 2) + 1569)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) + 1561)] : 0.000000e+00f);
            pad_temp_shared[((((int)threadIdx.x) * 2) + 2352)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) + 2344)] : 0.000000e+00f);
            pad_temp_shared[((((int)threadIdx.x) * 2) + 2353)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) + 2345)] : 0.000000e+00f);
            pad_temp_shared[((((int)threadIdx.x) * 2) + 3136)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) + 3128)] : 0.000000e+00f);
            pad_temp_shared[((((int)threadIdx.x) * 2) + 3137)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) + 3129)] : 0.000000e+00f);
            pad_temp_shared[((((int)threadIdx.x) * 2) + 3920)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) + 3912)] : 0.000000e+00f);
            pad_temp_shared[((((int)threadIdx.x) * 2) + 3921)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) + 3913)] : 0.000000e+00f);
            pad_temp_shared[((((int)threadIdx.x) * 2) + 4704)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) + 4696)] : 0.000000e+00f);
            pad_temp_shared[((((int)threadIdx.x) * 2) + 4705)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) + 4697)] : 0.000000e+00f);
            pad_temp_shared[((((int)threadIdx.x) * 2) + 5488)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) + 5480)] : 0.000000e+00f);
            pad_temp_shared[((((int)threadIdx.x) * 2) + 5489)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 2) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + (((int)threadIdx.x) * 2)) + rx_outer_outer) + 5481)] : 0.000000e+00f);
            kernel_shared[((int)threadIdx.x)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((int)threadIdx.x) >> 7) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            kernel_shared[(((int)threadIdx.x) + 392)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 392) >> 7) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 8) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            kernel_shared[(((int)threadIdx.x) + 784)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 784) >> 7) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 16) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            kernel_shared[(((int)threadIdx.x) + 1176)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1176) >> 7) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 24) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            kernel_shared[(((int)threadIdx.x) + 1568)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1568) >> 7) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 32) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            kernel_shared[(((int)threadIdx.x) + 1960)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1960) >> 7) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 40) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            kernel_shared[(((int)threadIdx.x) + 2352)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2352) >> 7) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 48) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            kernel_shared[(((int)threadIdx.x) + 2744)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2744) >> 7) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 56) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            kernel_shared[(((int)threadIdx.x) + 3136)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3136) >> 7) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 64) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            kernel_shared[(((int)threadIdx.x) + 3528)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3528) >> 7) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 72) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            if (((int)threadIdx.x) < 176) {
              kernel_shared[(((int)threadIdx.x) + 3920)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3920) >> 7) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 80) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            }
            __syncthreads();
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[((((int)threadIdx.x) / 49) * 512)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 128)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 256)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 384)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 1)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 129)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 257)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 385)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 98)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 2)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 98)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 130)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 98)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 258)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 98)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 386)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 147)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 3)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 147)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 131)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 147)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 259)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 147)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 387)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 4)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 132)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 260)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 388)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 5)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 133)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 261)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 389)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 294)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 6)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 294)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 134)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 294)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 262)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 294)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 390)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 343)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 7)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 343)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 135)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 343)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 263)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 343)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 391)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 8)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 136)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 264)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 392)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 9)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 137)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 265)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 393)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 490)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 10)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 490)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 138)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 490)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 266)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 490)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 394)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 539)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 11)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 539)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 139)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 539)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 267)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 539)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 395)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 588)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 12)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 588)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 140)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 588)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 268)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 588)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 396)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 13)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 141)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 269)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 397)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 686)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 14)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 686)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 142)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 686)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 270)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 686)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 398)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 735)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 15)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 735)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 143)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 735)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 271)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 735)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 399)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 784)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 16)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 784)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 144)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 784)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 272)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 784)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 400)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 17)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 145)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 273)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 401)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 18)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 146)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 274)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 402)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 931)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 19)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 931)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 147)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 931)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 275)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 931)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 403)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 980)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 20)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 980)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 148)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 980)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 276)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 980)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 404)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1029)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 21)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1029)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 149)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1029)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 277)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1029)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 405)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 22)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 150)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 278)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 406)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1127)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 23)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1127)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 151)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1127)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 279)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1127)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 407)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1176)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 24)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1176)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 152)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1176)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 280)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1176)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 408)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1225)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 25)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1225)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 153)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1225)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 281)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1225)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 409)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 26)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 154)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 282)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 410)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 27)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 155)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 283)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 411)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1372)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 28)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1372)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 156)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1372)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 284)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1372)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 412)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1421)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 29)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1421)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 157)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1421)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 285)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1421)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 413)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1470)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 30)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1470)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 158)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1470)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 286)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1470)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 414)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 31)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 159)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 287)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 415)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1568)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 32)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1568)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 160)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1568)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 288)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1568)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 416)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1617)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 33)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1617)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 161)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1617)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 289)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1617)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 417)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1666)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 34)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1666)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 162)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1666)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 290)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1666)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 418)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1715)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 35)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1715)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 163)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1715)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 291)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1715)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 419)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1764)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 36)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1764)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 164)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1764)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 292)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1764)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 420)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1813)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 37)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1813)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 165)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1813)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 293)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1813)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 421)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1862)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 38)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1862)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 166)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1862)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 294)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1862)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 422)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1911)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 39)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1911)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 167)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1911)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 295)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1911)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 423)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1960)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 40)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1960)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 168)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1960)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 296)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1960)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 424)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2009)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 41)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2009)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 169)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2009)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 297)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2009)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 425)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2058)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 42)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2058)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 170)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2058)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 298)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2058)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 426)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2107)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 43)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2107)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 171)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2107)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 299)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2107)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 427)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2156)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 44)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2156)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 172)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2156)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 300)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2156)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 428)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2205)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 45)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2205)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 173)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2205)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 301)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2205)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 429)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2254)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 46)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2254)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 174)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2254)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 302)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2254)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 430)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2303)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 47)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2303)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 175)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2303)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 303)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2303)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 431)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2352)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 48)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2352)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 176)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2352)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 304)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2352)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 432)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2401)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 49)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2401)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 177)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2401)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 305)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2401)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 433)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2450)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 50)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2450)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 178)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2450)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 306)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2450)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 434)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2499)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 51)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2499)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 179)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2499)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 307)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2499)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 435)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2548)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 52)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2548)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 180)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2548)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 308)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2548)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 436)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2597)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 53)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2597)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 181)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2597)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 309)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2597)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 437)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2646)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 54)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2646)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 182)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2646)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 310)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2646)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 438)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2695)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 55)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2695)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 183)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2695)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 311)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2695)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 439)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2744)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 56)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2744)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 184)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2744)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 312)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2744)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 440)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2793)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 57)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2793)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 185)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2793)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 313)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2793)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 441)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2842)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 58)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2842)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 186)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2842)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 314)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2842)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 442)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2891)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 59)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2891)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 187)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2891)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 315)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2891)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 443)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2940)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 60)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2940)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 188)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2940)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 316)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2940)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 444)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2989)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 61)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2989)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 189)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2989)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 317)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2989)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 445)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3038)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 62)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3038)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 190)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3038)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 318)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3038)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 446)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3087)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 63)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3087)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 191)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3087)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 319)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3087)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 447)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3136)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 64)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3136)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 192)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3136)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 320)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3136)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 448)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3185)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 65)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3185)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 193)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3185)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 321)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3185)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 449)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3234)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 66)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3234)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 194)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3234)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 322)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3234)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 450)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3283)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 67)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3283)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 195)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3283)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 323)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3283)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 451)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3332)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 68)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3332)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 196)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3332)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 324)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3332)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 452)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3381)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 69)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3381)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 197)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3381)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 325)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3381)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 453)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3430)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 70)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3430)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 198)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3430)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 326)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3430)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 454)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3479)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 71)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3479)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 199)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3479)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 327)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3479)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 455)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3528)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 72)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3528)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 200)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3528)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 328)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3528)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 456)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3577)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 73)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3577)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 201)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3577)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 329)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3577)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 457)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3626)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 74)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3626)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 202)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3626)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 330)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3626)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 458)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3675)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 75)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3675)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 203)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3675)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 331)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3675)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 459)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3724)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 76)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3724)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 204)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3724)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 332)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3724)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 460)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3773)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 77)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3773)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 205)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3773)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 333)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3773)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 461)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3822)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 78)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3822)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 206)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3822)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 334)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3822)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 462)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3871)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 79)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3871)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 207)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3871)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 335)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3871)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 463)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3920)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 80)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3920)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 208)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3920)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 336)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3920)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 464)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3969)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 81)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3969)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 209)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3969)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 337)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3969)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 465)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4018)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 82)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4018)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 210)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4018)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 338)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4018)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 466)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4067)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 83)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4067)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 211)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4067)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 339)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4067)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 467)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4116)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 84)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4116)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 212)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4116)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 340)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4116)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 468)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4165)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 85)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4165)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 213)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4165)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 341)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4165)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 469)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4214)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 86)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4214)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 214)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4214)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 342)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4214)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 470)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4263)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 87)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4263)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 215)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4263)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 343)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4263)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 471)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4312)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 88)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4312)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 216)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4312)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 344)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4312)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 472)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4361)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 89)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4361)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 217)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4361)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 345)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4361)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 473)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4410)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 90)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4410)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 218)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4410)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 346)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4410)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 474)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4459)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 91)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4459)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 219)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4459)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 347)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4459)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 475)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4508)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 92)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4508)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 220)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4508)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 348)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4508)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 476)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4557)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 93)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4557)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 221)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4557)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 349)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4557)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 477)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4606)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 94)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4606)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 222)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4606)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 350)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4606)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 478)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4655)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 95)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4655)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 223)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4655)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 351)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4655)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 479)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4704)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 96)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4704)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 224)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4704)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 352)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4704)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 480)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4753)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 97)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4753)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 225)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4753)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 353)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4753)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 481)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4802)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 98)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4802)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 226)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4802)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 354)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4802)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 482)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4851)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 99)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4851)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 227)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4851)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 355)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4851)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 483)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4900)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 100)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4900)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 228)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4900)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 356)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4900)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 484)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4949)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 101)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4949)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 229)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4949)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 357)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4949)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 485)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4998)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 102)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4998)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 230)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4998)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 358)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4998)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 486)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5047)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 103)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5047)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 231)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5047)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 359)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5047)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 487)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5096)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 104)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5096)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 232)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5096)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 360)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5096)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 488)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5145)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 105)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5145)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 233)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5145)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 361)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5145)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 489)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5194)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 106)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5194)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 234)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5194)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 362)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5194)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 490)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5243)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 107)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5243)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 235)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5243)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 363)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5243)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 491)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5292)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 108)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5292)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 236)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5292)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 364)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5292)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 492)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5341)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 109)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5341)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 237)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5341)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 365)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5341)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 493)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5390)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 110)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5390)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 238)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5390)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 366)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5390)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 494)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5439)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 111)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5439)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 239)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5439)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 367)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5439)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 495)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5488)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 112)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5488)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 240)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5488)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 368)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5488)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 496)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5537)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 113)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5537)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 241)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5537)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 369)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5537)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 497)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5586)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 114)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5586)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 242)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5586)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 370)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5586)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 498)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5635)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 115)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5635)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 243)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5635)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 371)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5635)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 499)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5684)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 116)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5684)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 244)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5684)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 372)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5684)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 500)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5733)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 117)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5733)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 245)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5733)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 373)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5733)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 501)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5782)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 118)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5782)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 246)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5782)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 374)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5782)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 502)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5831)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 119)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5831)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 247)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5831)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 375)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5831)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 503)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5880)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 120)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5880)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 248)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5880)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 376)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5880)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 504)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5929)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 121)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5929)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 249)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5929)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 377)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5929)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 505)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5978)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 122)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5978)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 250)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5978)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 378)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5978)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 506)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6027)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 123)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6027)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 251)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6027)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 379)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6027)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 507)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6076)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 124)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6076)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 252)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6076)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 380)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6076)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 508)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6125)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 125)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6125)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 253)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6125)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 381)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6125)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 509)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6174)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 126)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6174)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 254)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6174)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 382)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6174)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 510)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6223)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 127)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6223)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 255)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6223)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 383)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6223)] * kernel_shared[(((((int)threadIdx.x) / 49) * 512) + 511)]));
          }
        }
      }
      for (int i1_inner = 0; i1_inner < 4; ++i1_inner) {
        compute[((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 49) * 196)) + (i1_inner * 49)) + (((int)threadIdx.x) % 49))] = max((conv2d_nchw[i1_inner] + bias[(((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 49) * 4)) + i1_inner)]), 0.000000e+00f);
      }
    }





A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.7/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  20.963 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
