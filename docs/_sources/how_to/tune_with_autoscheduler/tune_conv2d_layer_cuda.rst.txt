.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.


.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none






We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute}
      preflattened_buffer_map = {data_1: data_3: Buffer(data_2, float32, [1, 512, 7, 7], []), kernel_1: kernel_3: Buffer(kernel_2, float32, [512, 512, 3, 3], []), bias_1: bias_3: Buffer(bias_2, float32, [1, 512, 1, 1], []), compute_1: compute_3: Buffer(compute_2, float32, [1, 512, 7, 7], [])} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 8;
      allocate(conv2d_nchw: Pointer(local float32), float32, [49]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [324]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [2304]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [49], [], scope="local")[0] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[6] = 0f32
        conv2d_nchw_1[7] = 0f32
        conv2d_nchw_1[8] = 0f32
        conv2d_nchw_1[9] = 0f32
        conv2d_nchw_1[10] = 0f32
        conv2d_nchw_1[11] = 0f32
        conv2d_nchw_1[12] = 0f32
        conv2d_nchw_1[13] = 0f32
        conv2d_nchw_1[14] = 0f32
        conv2d_nchw_1[15] = 0f32
        conv2d_nchw_1[16] = 0f32
        conv2d_nchw_1[17] = 0f32
        conv2d_nchw_1[18] = 0f32
        conv2d_nchw_1[19] = 0f32
        conv2d_nchw_1[20] = 0f32
        conv2d_nchw_1[21] = 0f32
        conv2d_nchw_1[22] = 0f32
        conv2d_nchw_1[23] = 0f32
        conv2d_nchw_1[24] = 0f32
        conv2d_nchw_1[25] = 0f32
        conv2d_nchw_1[26] = 0f32
        conv2d_nchw_1[27] = 0f32
        conv2d_nchw_1[28] = 0f32
        conv2d_nchw_1[29] = 0f32
        conv2d_nchw_1[30] = 0f32
        conv2d_nchw_1[31] = 0f32
        conv2d_nchw_1[32] = 0f32
        conv2d_nchw_1[33] = 0f32
        conv2d_nchw_1[34] = 0f32
        conv2d_nchw_1[35] = 0f32
        conv2d_nchw_1[36] = 0f32
        conv2d_nchw_1[37] = 0f32
        conv2d_nchw_1[38] = 0f32
        conv2d_nchw_1[39] = 0f32
        conv2d_nchw_1[40] = 0f32
        conv2d_nchw_1[41] = 0f32
        conv2d_nchw_1[42] = 0f32
        conv2d_nchw_1[43] = 0f32
        conv2d_nchw_1[44] = 0f32
        conv2d_nchw_1[45] = 0f32
        conv2d_nchw_1[46] = 0f32
        conv2d_nchw_1[47] = 0f32
        conv2d_nchw_1[48] = 0f32
        for (rc.outer.outer: int32, 0, 128) {
          let cse_var_1: int32 = (rc.outer.outer*36)
           {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            if @tir.likely((threadIdx.x_1 < 36), dtype=bool) {
              pad_temp.shared_1: Buffer(pad_temp.shared, float32, [324], [], scope="shared")[(threadIdx.x_1*9)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*9) + 1)] = @tir.if_then_else(((1 <= floormod(threadIdx.x_1, 9)) && (floormod(threadIdx.x_1, 9) < 8)), data[((((rc.outer.outer*196) + (floordiv(threadIdx.x_1, 9)*49)) + (floormod(threadIdx.x_1, 9)*7)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 2)] = @tir.if_then_else(((1 <= floormod(threadIdx.x_1, 9)) && (floormod(threadIdx.x_1, 9) < 8)), data[((((rc.outer.outer*196) + (floordiv(threadIdx.x_1, 9)*49)) + (floormod(threadIdx.x_1, 9)*7)) - 6)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 3)] = @tir.if_then_else(((1 <= floormod(threadIdx.x_1, 9)) && (floormod(threadIdx.x_1, 9) < 8)), data[((((rc.outer.outer*196) + (floordiv(threadIdx.x_1, 9)*49)) + (floormod(threadIdx.x_1, 9)*7)) - 5)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 4)] = @tir.if_then_else(((1 <= floormod(threadIdx.x_1, 9)) && (floormod(threadIdx.x_1, 9) < 8)), data[((((rc.outer.outer*196) + (floordiv(threadIdx.x_1, 9)*49)) + (floormod(threadIdx.x_1, 9)*7)) - 4)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 5)] = @tir.if_then_else(((1 <= floormod(threadIdx.x_1, 9)) && (floormod(threadIdx.x_1, 9) < 8)), data[((((rc.outer.outer*196) + (floordiv(threadIdx.x_1, 9)*49)) + (floormod(threadIdx.x_1, 9)*7)) - 3)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 6)] = @tir.if_then_else(((1 <= floormod(threadIdx.x_1, 9)) && (floormod(threadIdx.x_1, 9) < 8)), data[((((rc.outer.outer*196) + (floordiv(threadIdx.x_1, 9)*49)) + (floormod(threadIdx.x_1, 9)*7)) - 2)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 7)] = @tir.if_then_else(((1 <= floormod(threadIdx.x_1, 9)) && (floormod(threadIdx.x_1, 9) < 8)), data[((((rc.outer.outer*196) + (floordiv(threadIdx.x_1, 9)*49)) + (floormod(threadIdx.x_1, 9)*7)) - 1)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 8)] = 0f32
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1: Buffer(kernel.shared, float32, [2304], [], scope="shared")[threadIdx.x_2] = kernel[((((blockIdx.x*294912) + (floordiv(threadIdx.x_2, 36)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 64)] = kernel[(((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 16), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 28), 36), 9)*9)) + floormod((threadIdx.x_2 + 1), 9))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 128)] = kernel[(((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 32), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 56), 36), 9)*9)) + floormod((threadIdx.x_2 + 2), 9))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 192)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 48), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 84), 36), 9)*9)) + (floormod((floordiv(threadIdx.x_2, 3) + 1), 3)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 256)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 64), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 112), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 4), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 320)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 80), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 140), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 5), 9), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 384)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 96), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 168), 36), 9)*9)) + (floormod((floordiv(threadIdx.x_2, 3) + 2), 3)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 448)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 112), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 196), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 7), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 512)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 128), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 224), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 8), 9), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 576)] = kernel[(((((blockIdx.x*294912) + (floordiv(floordiv(threadIdx.x_2, 4), 9)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 36)) + 73728)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 640)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 160), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 280), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 10), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 704)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 176), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 308), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 11), 9), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 768)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 192), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 336), 36), 9)*9)) + (floormod((floordiv(threadIdx.x_2, 3) + 1), 3)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 832)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 208), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 364), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 13), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 896)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 224), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 392), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 14), 9), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 960)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 240), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 420), 36), 9)*9)) + (floormod((floordiv(threadIdx.x_2, 3) + 2), 3)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1024)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 256), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 448), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 16), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1088)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 272), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 476), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 17), 9), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1152)] = kernel[(((((blockIdx.x*294912) + (floordiv(floordiv(threadIdx.x_2, 4), 9)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 36)) + 147456)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1216)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 304), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 532), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 19), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1280)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 320), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 560), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 20), 9), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1344)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 336), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 588), 36), 9)*9)) + (floormod((floordiv(threadIdx.x_2, 3) + 1), 3)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1408)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 352), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 616), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 22), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1472)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 368), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 644), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 23), 9), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1536)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 384), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 672), 36), 9)*9)) + (floormod((floordiv(threadIdx.x_2, 3) + 2), 3)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1600)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 400), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 700), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 25), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1664)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 416), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 728), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 26), 9), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1728)] = kernel[(((((blockIdx.x*294912) + (floordiv(floordiv(threadIdx.x_2, 4), 9)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 36)) + 221184)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1792)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 448), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 784), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 28), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1856)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 464), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 812), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 29), 9), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1920)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 480), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 840), 36), 9)*9)) + (floormod((floordiv(threadIdx.x_2, 3) + 1), 3)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 1984)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 496), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 868), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 31), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2048)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 512), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 896), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 32), 9), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2112)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 528), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 924), 36), 9)*9)) + (floormod((floordiv(threadIdx.x_2, 3) + 2), 3)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2176)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 544), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 952), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 34), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared_1[(threadIdx.x_2 + 2240)] = kernel[((((((blockIdx.x*294912) + (floordiv((floordiv(threadIdx.x_2, 4) + 560), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 980), 36), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 35), 9), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            for (rc.outer.inner: int32, 0, 2) {
              for (rc.inner: int32, 0, 2) {
                for (ry.inner: int32, 0, 3) {
                  for (rx.inner: int32, 0, 3) {
                    let cse_var_2: int32 = ((((rc.outer.inner*162) + (rc.inner*81)) + (ry.inner*9)) + rx.inner)
                     {
                      conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_2]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_2 + 1)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_2 + 2)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_2 + 3)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_2 + 4)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_2 + 5)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_2 + 6)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(cse_var_2 + 9)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(cse_var_2 + 10)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(cse_var_2 + 11)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(cse_var_2 + 12)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(cse_var_2 + 13)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(cse_var_2 + 14)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(cse_var_2 + 15)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(cse_var_2 + 18)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(cse_var_2 + 19)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[16] = (conv2d_nchw_1[16] + (pad_temp.shared_1[(cse_var_2 + 20)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[17] = (conv2d_nchw_1[17] + (pad_temp.shared_1[(cse_var_2 + 21)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[18] = (conv2d_nchw_1[18] + (pad_temp.shared_1[(cse_var_2 + 22)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[19] = (conv2d_nchw_1[19] + (pad_temp.shared_1[(cse_var_2 + 23)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[20] = (conv2d_nchw_1[20] + (pad_temp.shared_1[(cse_var_2 + 24)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[21] = (conv2d_nchw_1[21] + (pad_temp.shared_1[(cse_var_2 + 27)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[22] = (conv2d_nchw_1[22] + (pad_temp.shared_1[(cse_var_2 + 28)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[23] = (conv2d_nchw_1[23] + (pad_temp.shared_1[(cse_var_2 + 29)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[24] = (conv2d_nchw_1[24] + (pad_temp.shared_1[(cse_var_2 + 30)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[25] = (conv2d_nchw_1[25] + (pad_temp.shared_1[(cse_var_2 + 31)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[26] = (conv2d_nchw_1[26] + (pad_temp.shared_1[(cse_var_2 + 32)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[27] = (conv2d_nchw_1[27] + (pad_temp.shared_1[(cse_var_2 + 33)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[28] = (conv2d_nchw_1[28] + (pad_temp.shared_1[(cse_var_2 + 36)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[29] = (conv2d_nchw_1[29] + (pad_temp.shared_1[(cse_var_2 + 37)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[30] = (conv2d_nchw_1[30] + (pad_temp.shared_1[(cse_var_2 + 38)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[31] = (conv2d_nchw_1[31] + (pad_temp.shared_1[(cse_var_2 + 39)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[32] = (conv2d_nchw_1[32] + (pad_temp.shared_1[(cse_var_2 + 40)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[33] = (conv2d_nchw_1[33] + (pad_temp.shared_1[(cse_var_2 + 41)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[34] = (conv2d_nchw_1[34] + (pad_temp.shared_1[(cse_var_2 + 42)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[35] = (conv2d_nchw_1[35] + (pad_temp.shared_1[(cse_var_2 + 45)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[36] = (conv2d_nchw_1[36] + (pad_temp.shared_1[(cse_var_2 + 46)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[37] = (conv2d_nchw_1[37] + (pad_temp.shared_1[(cse_var_2 + 47)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[38] = (conv2d_nchw_1[38] + (pad_temp.shared_1[(cse_var_2 + 48)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[39] = (conv2d_nchw_1[39] + (pad_temp.shared_1[(cse_var_2 + 49)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[40] = (conv2d_nchw_1[40] + (pad_temp.shared_1[(cse_var_2 + 50)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[41] = (conv2d_nchw_1[41] + (pad_temp.shared_1[(cse_var_2 + 51)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[42] = (conv2d_nchw_1[42] + (pad_temp.shared_1[(cse_var_2 + 54)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[43] = (conv2d_nchw_1[43] + (pad_temp.shared_1[(cse_var_2 + 55)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[44] = (conv2d_nchw_1[44] + (pad_temp.shared_1[(cse_var_2 + 56)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[45] = (conv2d_nchw_1[45] + (pad_temp.shared_1[(cse_var_2 + 57)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[46] = (conv2d_nchw_1[46] + (pad_temp.shared_1[(cse_var_2 + 58)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[47] = (conv2d_nchw_1[47] + (pad_temp.shared_1[(cse_var_2 + 59)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                      conv2d_nchw_1[48] = (conv2d_nchw_1[48] + (pad_temp.shared_1[(cse_var_2 + 60)]*kernel.shared_1[(((((threadIdx.x*36) + (rc.outer.inner*18)) + (rc.inner*9)) + (ry.inner*3)) + rx.inner)]))
                    }
                  }
                }
              }
            }
          }
        }
        for (i2.inner: int32, 0, 7) {
          for (i3.inner: int32, 0, 7) {
            let cse_var_3: int32 = (i2.inner*7)
            compute[((((blockIdx.x*3136) + (threadIdx.x*49)) + cse_var_3) + i3.inner)] = max((conv2d_nchw_1[(cse_var_3 + i3.inner)] + bias[((blockIdx.x*64) + threadIdx.x)]), 0f32)
          }
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.407 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.


.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=64)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=7)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=7)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=2)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=2)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=3)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=3)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=64)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=7)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=7)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=64)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=9)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=64)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 64)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(64) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[49];
      __shared__ float pad_temp_shared[324];
      __shared__ float kernel_shared[2304];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      conv2d_nchw[7] = 0.000000e+00f;
      conv2d_nchw[8] = 0.000000e+00f;
      conv2d_nchw[9] = 0.000000e+00f;
      conv2d_nchw[10] = 0.000000e+00f;
      conv2d_nchw[11] = 0.000000e+00f;
      conv2d_nchw[12] = 0.000000e+00f;
      conv2d_nchw[13] = 0.000000e+00f;
      conv2d_nchw[14] = 0.000000e+00f;
      conv2d_nchw[15] = 0.000000e+00f;
      conv2d_nchw[16] = 0.000000e+00f;
      conv2d_nchw[17] = 0.000000e+00f;
      conv2d_nchw[18] = 0.000000e+00f;
      conv2d_nchw[19] = 0.000000e+00f;
      conv2d_nchw[20] = 0.000000e+00f;
      conv2d_nchw[21] = 0.000000e+00f;
      conv2d_nchw[22] = 0.000000e+00f;
      conv2d_nchw[23] = 0.000000e+00f;
      conv2d_nchw[24] = 0.000000e+00f;
      conv2d_nchw[25] = 0.000000e+00f;
      conv2d_nchw[26] = 0.000000e+00f;
      conv2d_nchw[27] = 0.000000e+00f;
      conv2d_nchw[28] = 0.000000e+00f;
      conv2d_nchw[29] = 0.000000e+00f;
      conv2d_nchw[30] = 0.000000e+00f;
      conv2d_nchw[31] = 0.000000e+00f;
      conv2d_nchw[32] = 0.000000e+00f;
      conv2d_nchw[33] = 0.000000e+00f;
      conv2d_nchw[34] = 0.000000e+00f;
      conv2d_nchw[35] = 0.000000e+00f;
      conv2d_nchw[36] = 0.000000e+00f;
      conv2d_nchw[37] = 0.000000e+00f;
      conv2d_nchw[38] = 0.000000e+00f;
      conv2d_nchw[39] = 0.000000e+00f;
      conv2d_nchw[40] = 0.000000e+00f;
      conv2d_nchw[41] = 0.000000e+00f;
      conv2d_nchw[42] = 0.000000e+00f;
      conv2d_nchw[43] = 0.000000e+00f;
      conv2d_nchw[44] = 0.000000e+00f;
      conv2d_nchw[45] = 0.000000e+00f;
      conv2d_nchw[46] = 0.000000e+00f;
      conv2d_nchw[47] = 0.000000e+00f;
      conv2d_nchw[48] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 128; ++rc_outer_outer) {
        __syncthreads();
        if (((int)threadIdx.x) < 36) {
          pad_temp_shared[(((int)threadIdx.x) * 9)] = 0.000000e+00f;
          pad_temp_shared[((((int)threadIdx.x) * 9) + 1)] = (((1 <= (((int)threadIdx.x) % 9)) && ((((int)threadIdx.x) % 9) < 8)) ? data[((((rc_outer_outer * 196) + ((((int)threadIdx.x) / 9) * 49)) + ((((int)threadIdx.x) % 9) * 7)) - 7)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 9) + 2)] = (((1 <= (((int)threadIdx.x) % 9)) && ((((int)threadIdx.x) % 9) < 8)) ? data[((((rc_outer_outer * 196) + ((((int)threadIdx.x) / 9) * 49)) + ((((int)threadIdx.x) % 9) * 7)) - 6)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 9) + 3)] = (((1 <= (((int)threadIdx.x) % 9)) && ((((int)threadIdx.x) % 9) < 8)) ? data[((((rc_outer_outer * 196) + ((((int)threadIdx.x) / 9) * 49)) + ((((int)threadIdx.x) % 9) * 7)) - 5)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 9) + 4)] = (((1 <= (((int)threadIdx.x) % 9)) && ((((int)threadIdx.x) % 9) < 8)) ? data[((((rc_outer_outer * 196) + ((((int)threadIdx.x) / 9) * 49)) + ((((int)threadIdx.x) % 9) * 7)) - 4)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 9) + 5)] = (((1 <= (((int)threadIdx.x) % 9)) && ((((int)threadIdx.x) % 9) < 8)) ? data[((((rc_outer_outer * 196) + ((((int)threadIdx.x) / 9) * 49)) + ((((int)threadIdx.x) % 9) * 7)) - 3)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 9) + 6)] = (((1 <= (((int)threadIdx.x) % 9)) && ((((int)threadIdx.x) % 9) < 8)) ? data[((((rc_outer_outer * 196) + ((((int)threadIdx.x) / 9) * 49)) + ((((int)threadIdx.x) % 9) * 7)) - 2)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 9) + 7)] = (((1 <= (((int)threadIdx.x) % 9)) && ((((int)threadIdx.x) % 9) < 8)) ? data[((((rc_outer_outer * 196) + ((((int)threadIdx.x) / 9) * 49)) + ((((int)threadIdx.x) % 9) * 7)) - 1)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 9) + 8)] = 0.000000e+00f;
        }
        kernel_shared[((int)threadIdx.x)] = kernel[((((((int)blockIdx.x) * 294912) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36))];
        kernel_shared[(((int)threadIdx.x) + 64)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 64) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 28) % 36) / 9) * 9)) + ((((int)threadIdx.x) + 1) % 9))];
        kernel_shared[(((int)threadIdx.x) + 128)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 128) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 20) % 36) / 9) * 9)) + ((((int)threadIdx.x) + 2) % 9))];
        kernel_shared[(((int)threadIdx.x) + 192)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 192) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 12) % 36) / 9) * 9)) + ((((((int)threadIdx.x) / 3) + 1) % 3) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 256)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 256) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 4) % 36) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 320)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 320) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 32) % 36) / 9) * 9)) + ((((((int)threadIdx.x) + 5) % 9) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 384)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 384) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 24) % 36) / 9) * 9)) + ((((((int)threadIdx.x) / 3) + 2) % 3) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 448)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 448) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 16) % 36) / 9) * 9)) + ((((((int)threadIdx.x) + 7) % 9) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 512)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 512) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 8) % 36) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 576)] = kernel[(((((((int)blockIdx.x) * 294912) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36)) + 73728)];
        kernel_shared[(((int)threadIdx.x) + 640)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 640) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 28) % 36) / 9) * 9)) + ((((int)threadIdx.x) + 1) % 9))];
        kernel_shared[(((int)threadIdx.x) + 704)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 704) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 20) % 36) / 9) * 9)) + ((((int)threadIdx.x) + 2) % 9))];
        kernel_shared[(((int)threadIdx.x) + 768)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 768) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 12) % 36) / 9) * 9)) + ((((((int)threadIdx.x) / 3) + 1) % 3) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 832)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 832) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 4) % 36) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 896)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 896) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 32) % 36) / 9) * 9)) + ((((((int)threadIdx.x) + 5) % 9) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 960)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 960) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 24) % 36) / 9) * 9)) + ((((((int)threadIdx.x) / 3) + 2) % 3) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1024)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1024) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 16) % 36) / 9) * 9)) + ((((((int)threadIdx.x) + 7) % 9) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1088)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1088) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 8) % 36) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1152)] = kernel[(((((((int)blockIdx.x) * 294912) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36)) + 147456)];
        kernel_shared[(((int)threadIdx.x) + 1216)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1216) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 28) % 36) / 9) * 9)) + ((((int)threadIdx.x) + 1) % 9))];
        kernel_shared[(((int)threadIdx.x) + 1280)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1280) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 20) % 36) / 9) * 9)) + ((((int)threadIdx.x) + 2) % 9))];
        kernel_shared[(((int)threadIdx.x) + 1344)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1344) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 12) % 36) / 9) * 9)) + ((((((int)threadIdx.x) / 3) + 1) % 3) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1408)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1408) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 4) % 36) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1472)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1472) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 32) % 36) / 9) * 9)) + ((((((int)threadIdx.x) + 5) % 9) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1536)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1536) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 24) % 36) / 9) * 9)) + ((((((int)threadIdx.x) / 3) + 2) % 3) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1600)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1600) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 16) % 36) / 9) * 9)) + ((((((int)threadIdx.x) + 7) % 9) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1664)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1664) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 8) % 36) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1728)] = kernel[(((((((int)blockIdx.x) * 294912) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36)) + 221184)];
        kernel_shared[(((int)threadIdx.x) + 1792)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1792) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 28) % 36) / 9) * 9)) + ((((int)threadIdx.x) + 1) % 9))];
        kernel_shared[(((int)threadIdx.x) + 1856)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1856) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 20) % 36) / 9) * 9)) + ((((int)threadIdx.x) + 2) % 9))];
        kernel_shared[(((int)threadIdx.x) + 1920)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1920) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 12) % 36) / 9) * 9)) + ((((((int)threadIdx.x) / 3) + 1) % 3) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1984)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1984) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 4) % 36) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2048)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 2048) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 32) % 36) / 9) * 9)) + ((((((int)threadIdx.x) + 5) % 9) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2112)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 2112) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 24) % 36) / 9) * 9)) + ((((((int)threadIdx.x) / 3) + 2) % 3) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2176)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 2176) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 16) % 36) / 9) * 9)) + ((((((int)threadIdx.x) + 7) % 9) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2240)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 2240) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) + 8) % 36) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        __syncthreads();
        for (int rc_outer_inner = 0; rc_outer_inner < 2; ++rc_outer_inner) {
          for (int rc_inner = 0; rc_inner < 2; ++rc_inner) {
            for (int ry_inner = 0; ry_inner < 3; ++ry_inner) {
              for (int rx_inner = 0; rx_inner < 3; ++rx_inner) {
                conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 1)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 2)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 3)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 4)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 5)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 6)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 9)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 10)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 11)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 12)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 13)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 14)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 15)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 18)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 19)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 20)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 21)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 22)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 23)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 24)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 27)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 28)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 29)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 30)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 31)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 32)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 33)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[28] = (conv2d_nchw[28] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 36)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[29] = (conv2d_nchw[29] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 37)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[30] = (conv2d_nchw[30] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 38)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[31] = (conv2d_nchw[31] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 39)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[32] = (conv2d_nchw[32] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 40)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[33] = (conv2d_nchw[33] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 41)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[34] = (conv2d_nchw[34] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 42)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[35] = (conv2d_nchw[35] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 45)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[36] = (conv2d_nchw[36] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 46)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[37] = (conv2d_nchw[37] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 47)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[38] = (conv2d_nchw[38] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 48)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[39] = (conv2d_nchw[39] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 49)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[40] = (conv2d_nchw[40] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 50)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[41] = (conv2d_nchw[41] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 51)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[42] = (conv2d_nchw[42] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 54)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[43] = (conv2d_nchw[43] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 55)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[44] = (conv2d_nchw[44] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 56)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[45] = (conv2d_nchw[45] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 57)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[46] = (conv2d_nchw[46] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 58)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[47] = (conv2d_nchw[47] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 59)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
                conv2d_nchw[48] = (conv2d_nchw[48] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + (ry_inner * 9)) + rx_inner) + 60)] * kernel_shared[(((((((int)threadIdx.x) * 36) + (rc_outer_inner * 18)) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner)]));
              }
            }
          }
        }
      }
      for (int i2_inner = 0; i2_inner < 7; ++i2_inner) {
        for (int i3_inner = 0; i3_inner < 7; ++i3_inner) {
          compute[((((((int)blockIdx.x) * 3136) + (((int)threadIdx.x) * 49)) + (i2_inner * 7)) + i3_inner)] = max((conv2d_nchw[((i2_inner * 7) + i3_inner)] + bias[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]), 0.000000e+00f);
        }
      }
    }





A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.7/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  44.290 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
