.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the master process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.


.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none






We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 128;
      allocate(conv2d_nchw: Pointer(local float32), float32, [4]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [2592]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [1152]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [4], [], scope="local", align=16)[0] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[3] = 0f32
        for (rc.outer.outer: int32, 0, 16) {
          let cse_var_2: int32 = (rc.outer.outer*1568)
          let cse_var_1: int32 = (rc.outer.outer*288)
           {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1: Buffer(pad_temp.shared, float32, [2592], [], scope="shared")[(threadIdx.x_1*3)] = @tir.if_then_else((((3 <= floormod(threadIdx.x_1, 27)) && (floormod(threadIdx.x_1, 27) < 24)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv(threadIdx.x_1, 27)*49)) + (floordiv(floormod(threadIdx.x_1, 27), 3)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1)] = @tir.if_then_else(((3 <= floormod(threadIdx.x_1, 27)) && (floormod(threadIdx.x_1, 27) < 24)), data[((((cse_var_2 + (floordiv(threadIdx.x_1, 27)*49)) + (floordiv(floormod(threadIdx.x_1, 27), 3)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 2)] = @tir.if_then_else((((3 <= floormod(threadIdx.x_1, 27)) && (floormod(threadIdx.x_1, 27) < 24)) && (floormod(threadIdx.x_1, 3) < 2)), data[((((cse_var_2 + (floordiv(threadIdx.x_1, 27)*49)) + (floordiv(floormod(threadIdx.x_1, 27), 3)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 6)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 147)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 49), 27)) && (floormod((threadIdx.x_1 + 22), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 49), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 49), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 148)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 49), 27)) && (floormod((threadIdx.x_1 + 22), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 49), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 49), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 149)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 49), 27)) && (floormod((threadIdx.x_1 + 22), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 49), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 49), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 294)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 98), 27)) && (floormod((threadIdx.x_1 + 17), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 98), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 98), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 295)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 98), 27)) && (floormod((threadIdx.x_1 + 17), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 98), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 98), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 296)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 98), 27)) && (floormod((threadIdx.x_1 + 17), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 98), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 98), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 441)] = @tir.if_then_else((((1 <= floormod((floordiv(threadIdx.x_1, 3) + 4), 9)) && (floormod((threadIdx.x_1 + 12), 27) < 24)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 147), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 4), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 442)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 3) + 4), 9)) && (floormod((threadIdx.x_1 + 12), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 1), 9))) && (floormod(((threadIdx.x_1*3) + 1), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 147), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 4), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 443)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 3) + 4), 9)) && (floormod((threadIdx.x_1 + 12), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 2), 9))) && (floormod(((threadIdx.x_1*3) + 2), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 147), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 4), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 588)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 196), 27)) && (floormod((threadIdx.x_1 + 7), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 196), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 196), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 589)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 196), 27)) && (floormod((threadIdx.x_1 + 7), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 196), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 196), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 590)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 196), 27)) && (floormod((threadIdx.x_1 + 7), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 196), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 196), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 735)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 245), 27)) && (floormod((threadIdx.x_1 + 2), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 245), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 245), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 736)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 245), 27)) && (floormod((threadIdx.x_1 + 2), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 245), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 245), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 737)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 245), 27)) && (floormod((threadIdx.x_1 + 2), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 245), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 245), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 882)] = @tir.if_then_else((((1 <= floormod((floordiv(threadIdx.x_1, 3) + 8), 9)) && (floormod((threadIdx.x_1 + 24), 27) < 24)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 294), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 8), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 883)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 3) + 8), 9)) && (floormod((threadIdx.x_1 + 24), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 1), 9))) && (floormod(((threadIdx.x_1*3) + 1), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 294), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 8), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 884)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 3) + 8), 9)) && (floormod((threadIdx.x_1 + 24), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 2), 9))) && (floormod(((threadIdx.x_1*3) + 2), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 294), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 8), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 1029)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 343), 27)) && (floormod((threadIdx.x_1 + 19), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 343), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 343), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1030)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 343), 27)) && (floormod((threadIdx.x_1 + 19), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 343), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 343), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1031)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 343), 27)) && (floormod((threadIdx.x_1 + 19), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 343), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 343), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 1176)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 392), 27)) && (floormod((threadIdx.x_1 + 14), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 392), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 392), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1177)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 392), 27)) && (floormod((threadIdx.x_1 + 14), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 392), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 392), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1178)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 392), 27)) && (floormod((threadIdx.x_1 + 14), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 392), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 392), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 1323)] = @tir.if_then_else((((1 <= floormod((floordiv(threadIdx.x_1, 3) + 3), 9)) && (floormod((threadIdx.x_1 + 9), 27) < 24)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 441), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 3), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1324)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 3) + 3), 9)) && (floormod((threadIdx.x_1 + 9), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 1), 9))) && (floormod(((threadIdx.x_1*3) + 1), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 441), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1325)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 3) + 3), 9)) && (floormod((threadIdx.x_1 + 9), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 2), 9))) && (floormod(((threadIdx.x_1*3) + 2), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 441), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 1470)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 490), 27)) && (floormod((threadIdx.x_1 + 4), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 490), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 490), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1471)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 490), 27)) && (floormod((threadIdx.x_1 + 4), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 490), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 490), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1472)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 490), 27)) && (floormod((threadIdx.x_1 + 4), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 490), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 490), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 1617)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 539), 27)) && (floormod((threadIdx.x_1 + 26), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 539), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 539), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1618)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 539), 27)) && (floormod((threadIdx.x_1 + 26), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 539), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 539), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1619)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 539), 27)) && (floormod((threadIdx.x_1 + 26), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 539), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 539), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 1764)] = @tir.if_then_else((((1 <= floormod((floordiv(threadIdx.x_1, 3) + 7), 9)) && (floormod((threadIdx.x_1 + 21), 27) < 24)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 588), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 7), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1765)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 3) + 7), 9)) && (floormod((threadIdx.x_1 + 21), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 1), 9))) && (floormod(((threadIdx.x_1*3) + 1), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 588), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 7), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1766)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 3) + 7), 9)) && (floormod((threadIdx.x_1 + 21), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 2), 9))) && (floormod(((threadIdx.x_1*3) + 2), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 588), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 7), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 1911)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 637), 27)) && (floormod((threadIdx.x_1 + 16), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 637), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 637), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1912)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 637), 27)) && (floormod((threadIdx.x_1 + 16), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 637), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 637), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1913)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 637), 27)) && (floormod((threadIdx.x_1 + 16), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 637), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 637), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 2058)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 686), 27)) && (floormod((threadIdx.x_1 + 11), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 686), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 686), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 2059)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 686), 27)) && (floormod((threadIdx.x_1 + 11), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 686), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 686), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 2060)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 686), 27)) && (floormod((threadIdx.x_1 + 11), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 686), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 686), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 2205)] = @tir.if_then_else((((1 <= floormod((floordiv(threadIdx.x_1, 3) + 2), 9)) && (floormod((threadIdx.x_1 + 6), 27) < 24)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 735), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 2), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 2206)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 3) + 2), 9)) && (floormod((threadIdx.x_1 + 6), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 1), 9))) && (floormod(((threadIdx.x_1*3) + 1), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 735), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 2), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 2207)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 3) + 2), 9)) && (floormod((threadIdx.x_1 + 6), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 2), 9))) && (floormod(((threadIdx.x_1*3) + 2), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 735), 27)*49)) + (floormod((floordiv(threadIdx.x_1, 3) + 2), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 2352)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 784), 27)) && (floormod((threadIdx.x_1 + 1), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 784), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 784), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 2353)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 784), 27)) && (floormod((threadIdx.x_1 + 1), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 784), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 784), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 2354)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 784), 27)) && (floormod((threadIdx.x_1 + 1), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 784), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 784), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            if @tir.likely((threadIdx.x_1 < 31), dtype=bool) {
              pad_temp.shared_1[((threadIdx.x_1*3) + 2499)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 833), 27)) && (floormod((threadIdx.x_1 + 23), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 833), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 833), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 2500)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 833), 27)) && (floormod((threadIdx.x_1 + 23), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 833), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 833), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 2501)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 833), 27)) && (floormod((threadIdx.x_1 + 23), 27) < 24)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 833), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 833), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1: Buffer(kernel.shared, float32, [1152], [], scope="shared")[threadIdx.x_2] = kernel[(((blockIdx.x*18432) + cse_var_1) + threadIdx.x_2)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 49)] = kernel[(((blockIdx.x*18432) + cse_var_1) + (threadIdx.x_2 + 49))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 98)] = kernel[(((blockIdx.x*18432) + cse_var_1) + (threadIdx.x_2 + 98))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 147)] = kernel[(((blockIdx.x*18432) + cse_var_1) + (threadIdx.x_2 + 147))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 196)] = kernel[(((blockIdx.x*18432) + cse_var_1) + (threadIdx.x_2 + 196))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 245)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 245), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 245), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 294)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 294), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 6), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 343)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 343), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 55), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 392)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 392), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 104), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 441)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 441), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 153), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 490)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 490), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 202), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 539)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 539), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 251), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 588)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 588), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 12), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 637)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 637), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 61), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 686)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 686), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 110), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 735)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 735), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 159), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 784)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 784), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 208), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 833)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 833), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 257), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 882)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 882), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 18), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 931)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 931), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 67), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 980)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 980), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 116), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 1029)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 1029), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 165), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 1078)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 1078), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 214), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            if @tir.likely((threadIdx.x_2 < 25), dtype=bool) {
              kernel.shared_1[(threadIdx.x_2 + 1127)] = kernel[((((blockIdx.x*18432) + (floordiv((threadIdx.x_2 + 1127), 288)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 263), 288))]
            }
            for (rc.outer.inner: int32, 0, 16) {
              for (rc.inner: int32, 0, 2) {
                let cse_var_3: int32 = ((rc.outer.inner*18) + (rc.inner*9))
                 {
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[cse_var_3]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 288)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 576)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 864)]))
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 1)]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 289)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 577)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 865)]))
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 2)]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 290)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 578)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 866)]))
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 3)]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 291)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 579)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 867)]))
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 4)]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 292)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 580)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 868)]))
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 5)]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 293)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 581)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 869)]))
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 6)]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 294)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 582)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 870)]))
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 7)]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 295)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 583)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 871)]))
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 8)]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 296)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 584)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((((rc.outer.inner*162) + (rc.inner*81)) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 872)]))
                }
              }
            }
          }
        }
        for (i1.inner: int32, 0, 4) {
          compute[(((blockIdx.x*196) + (i1.inner*49)) + threadIdx.x)] = max((conv2d_nchw_1[i1.inner] + bias[((blockIdx.x*4) + i1.inner)]), 0f32)
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.218 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.


.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=4)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=2)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=16)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=3)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=3)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=4)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=1)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=49)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=3)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=49)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 64)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(49) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[4];
      __shared__ float pad_temp_shared[2592];
      __shared__ float kernel_shared[1152];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 16; ++rc_outer_outer) {
        __syncthreads();
        pad_temp_shared[(((int)threadIdx.x) * 3)] = ((((3 <= (((int)threadIdx.x) % 27)) && ((((int)threadIdx.x) % 27) < 24)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 27) * 49)) + (((((int)threadIdx.x) % 27) / 3) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1)] = (((3 <= (((int)threadIdx.x) % 27)) && ((((int)threadIdx.x) % 27) < 24)) ? data[(((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 27) * 49)) + (((((int)threadIdx.x) % 27) / 3) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 2)] = ((((3 <= (((int)threadIdx.x) % 27)) && ((((int)threadIdx.x) % 27) < 24)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 27) * 49)) + (((((int)threadIdx.x) % 27) / 3) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 147)] = (((((3 <= ((((int)threadIdx.x) + 22) % 27)) && (((((int)threadIdx.x) + 22) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 49) / 27) * 49)) + ((((((int)threadIdx.x) + 22) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 148)] = (((((3 <= ((((int)threadIdx.x) + 22) % 27)) && (((((int)threadIdx.x) + 22) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 49) / 27) * 49)) + ((((((int)threadIdx.x) + 22) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 149)] = (((((3 <= ((((int)threadIdx.x) + 22) % 27)) && (((((int)threadIdx.x) + 22) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 49) / 27) * 49)) + ((((((int)threadIdx.x) + 22) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 294)] = (((((3 <= ((((int)threadIdx.x) + 17) % 27)) && (((((int)threadIdx.x) + 17) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 98) / 27) * 49)) + ((((((int)threadIdx.x) + 17) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 295)] = (((((3 <= ((((int)threadIdx.x) + 17) % 27)) && (((((int)threadIdx.x) + 17) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 98) / 27) * 49)) + ((((((int)threadIdx.x) + 17) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 296)] = (((((3 <= ((((int)threadIdx.x) + 17) % 27)) && (((((int)threadIdx.x) + 17) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 98) / 27) * 49)) + ((((((int)threadIdx.x) + 17) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 441)] = ((((1 <= (((((int)threadIdx.x) / 3) + 4) % 9)) && (((((int)threadIdx.x) + 12) % 27) < 24)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 147) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 4) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 442)] = (((1 <= (((((int)threadIdx.x) / 3) + 4) % 9)) && (((((int)threadIdx.x) + 12) % 27) < 24)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 147) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 4) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 443)] = ((((1 <= (((((int)threadIdx.x) / 3) + 4) % 9)) && (((((int)threadIdx.x) + 12) % 27) < 24)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 147) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 4) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 588)] = (((((3 <= ((((int)threadIdx.x) + 7) % 27)) && (((((int)threadIdx.x) + 7) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 196) / 27) * 49)) + ((((((int)threadIdx.x) + 7) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 589)] = (((((3 <= ((((int)threadIdx.x) + 7) % 27)) && (((((int)threadIdx.x) + 7) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 196) / 27) * 49)) + ((((((int)threadIdx.x) + 7) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 590)] = (((((3 <= ((((int)threadIdx.x) + 7) % 27)) && (((((int)threadIdx.x) + 7) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 196) / 27) * 49)) + ((((((int)threadIdx.x) + 7) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 735)] = (((((3 <= ((((int)threadIdx.x) + 2) % 27)) && (((((int)threadIdx.x) + 2) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 245) / 27) * 49)) + ((((((int)threadIdx.x) + 2) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 736)] = (((((3 <= ((((int)threadIdx.x) + 2) % 27)) && (((((int)threadIdx.x) + 2) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 245) / 27) * 49)) + ((((((int)threadIdx.x) + 2) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 737)] = (((((3 <= ((((int)threadIdx.x) + 2) % 27)) && (((((int)threadIdx.x) + 2) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 245) / 27) * 49)) + ((((((int)threadIdx.x) + 2) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 882)] = ((((1 <= (((((int)threadIdx.x) / 3) + 8) % 9)) && (((((int)threadIdx.x) + 24) % 27) < 24)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 294) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 8) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 883)] = (((1 <= (((((int)threadIdx.x) / 3) + 8) % 9)) && (((((int)threadIdx.x) + 24) % 27) < 24)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 294) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 8) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 884)] = ((((1 <= (((((int)threadIdx.x) / 3) + 8) % 9)) && (((((int)threadIdx.x) + 24) % 27) < 24)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 294) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 8) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1029)] = (((((3 <= ((((int)threadIdx.x) + 19) % 27)) && (((((int)threadIdx.x) + 19) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 343) / 27) * 49)) + ((((((int)threadIdx.x) + 19) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1030)] = (((((3 <= ((((int)threadIdx.x) + 19) % 27)) && (((((int)threadIdx.x) + 19) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 343) / 27) * 49)) + ((((((int)threadIdx.x) + 19) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1031)] = (((((3 <= ((((int)threadIdx.x) + 19) % 27)) && (((((int)threadIdx.x) + 19) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 343) / 27) * 49)) + ((((((int)threadIdx.x) + 19) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1176)] = (((((3 <= ((((int)threadIdx.x) + 14) % 27)) && (((((int)threadIdx.x) + 14) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 392) / 27) * 49)) + ((((((int)threadIdx.x) + 14) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1177)] = (((((3 <= ((((int)threadIdx.x) + 14) % 27)) && (((((int)threadIdx.x) + 14) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 392) / 27) * 49)) + ((((((int)threadIdx.x) + 14) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1178)] = (((((3 <= ((((int)threadIdx.x) + 14) % 27)) && (((((int)threadIdx.x) + 14) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 392) / 27) * 49)) + ((((((int)threadIdx.x) + 14) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1323)] = ((((1 <= (((((int)threadIdx.x) / 3) + 3) % 9)) && (((((int)threadIdx.x) + 9) % 27) < 24)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 441) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 3) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1324)] = (((1 <= (((((int)threadIdx.x) / 3) + 3) % 9)) && (((((int)threadIdx.x) + 9) % 27) < 24)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 441) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 3) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1325)] = ((((1 <= (((((int)threadIdx.x) / 3) + 3) % 9)) && (((((int)threadIdx.x) + 9) % 27) < 24)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 441) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 3) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1470)] = (((((3 <= ((((int)threadIdx.x) + 4) % 27)) && (((((int)threadIdx.x) + 4) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 490) / 27) * 49)) + ((((((int)threadIdx.x) + 4) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1471)] = (((((3 <= ((((int)threadIdx.x) + 4) % 27)) && (((((int)threadIdx.x) + 4) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 490) / 27) * 49)) + ((((((int)threadIdx.x) + 4) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1472)] = (((((3 <= ((((int)threadIdx.x) + 4) % 27)) && (((((int)threadIdx.x) + 4) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 490) / 27) * 49)) + ((((((int)threadIdx.x) + 4) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1617)] = (((((3 <= ((((int)threadIdx.x) + 26) % 27)) && (((((int)threadIdx.x) + 26) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 539) / 27) * 49)) + ((((((int)threadIdx.x) + 26) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1618)] = (((((3 <= ((((int)threadIdx.x) + 26) % 27)) && (((((int)threadIdx.x) + 26) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 539) / 27) * 49)) + ((((((int)threadIdx.x) + 26) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1619)] = (((((3 <= ((((int)threadIdx.x) + 26) % 27)) && (((((int)threadIdx.x) + 26) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 539) / 27) * 49)) + ((((((int)threadIdx.x) + 26) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1764)] = ((((1 <= (((((int)threadIdx.x) / 3) + 7) % 9)) && (((((int)threadIdx.x) + 21) % 27) < 24)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 588) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 7) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1765)] = (((1 <= (((((int)threadIdx.x) / 3) + 7) % 9)) && (((((int)threadIdx.x) + 21) % 27) < 24)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 588) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 7) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1766)] = ((((1 <= (((((int)threadIdx.x) / 3) + 7) % 9)) && (((((int)threadIdx.x) + 21) % 27) < 24)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 588) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 7) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1911)] = (((((3 <= ((((int)threadIdx.x) + 16) % 27)) && (((((int)threadIdx.x) + 16) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 637) / 27) * 49)) + ((((((int)threadIdx.x) + 16) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1912)] = (((((3 <= ((((int)threadIdx.x) + 16) % 27)) && (((((int)threadIdx.x) + 16) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 637) / 27) * 49)) + ((((((int)threadIdx.x) + 16) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1913)] = (((((3 <= ((((int)threadIdx.x) + 16) % 27)) && (((((int)threadIdx.x) + 16) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 637) / 27) * 49)) + ((((((int)threadIdx.x) + 16) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 2058)] = (((((3 <= ((((int)threadIdx.x) + 11) % 27)) && (((((int)threadIdx.x) + 11) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 686) / 27) * 49)) + ((((((int)threadIdx.x) + 11) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 2059)] = (((((3 <= ((((int)threadIdx.x) + 11) % 27)) && (((((int)threadIdx.x) + 11) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 686) / 27) * 49)) + ((((((int)threadIdx.x) + 11) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 2060)] = (((((3 <= ((((int)threadIdx.x) + 11) % 27)) && (((((int)threadIdx.x) + 11) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 686) / 27) * 49)) + ((((((int)threadIdx.x) + 11) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 2205)] = ((((1 <= (((((int)threadIdx.x) / 3) + 2) % 9)) && (((((int)threadIdx.x) + 6) % 27) < 24)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 735) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 2) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 2206)] = (((1 <= (((((int)threadIdx.x) / 3) + 2) % 9)) && (((((int)threadIdx.x) + 6) % 27) < 24)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 735) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 2) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 2207)] = ((((1 <= (((((int)threadIdx.x) / 3) + 2) % 9)) && (((((int)threadIdx.x) + 6) % 27) < 24)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 735) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 2) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 2352)] = (((((3 <= ((((int)threadIdx.x) + 1) % 27)) && (((((int)threadIdx.x) + 1) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 784) / 27) * 49)) + ((((((int)threadIdx.x) + 1) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 2353)] = (((((3 <= ((((int)threadIdx.x) + 1) % 27)) && (((((int)threadIdx.x) + 1) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 784) / 27) * 49)) + ((((((int)threadIdx.x) + 1) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 2354)] = (((((3 <= ((((int)threadIdx.x) + 1) % 27)) && (((((int)threadIdx.x) + 1) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 784) / 27) * 49)) + ((((((int)threadIdx.x) + 1) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 31) {
          pad_temp_shared[((((int)threadIdx.x) * 3) + 2499)] = (((((3 <= ((((int)threadIdx.x) + 23) % 27)) && (((((int)threadIdx.x) + 23) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 833) / 27) * 49)) + ((((((int)threadIdx.x) + 23) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 2500)] = (((((3 <= ((((int)threadIdx.x) + 23) % 27)) && (((((int)threadIdx.x) + 23) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 833) / 27) * 49)) + ((((((int)threadIdx.x) + 23) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 2501)] = (((((3 <= ((((int)threadIdx.x) + 23) % 27)) && (((((int)threadIdx.x) + 23) % 27) < 24)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 833) / 27) * 49)) + ((((((int)threadIdx.x) + 23) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        }
        kernel_shared[((int)threadIdx.x)] = kernel[(((((int)blockIdx.x) * 18432) + (rc_outer_outer * 288)) + ((int)threadIdx.x))];
        kernel_shared[(((int)threadIdx.x) + 49)] = kernel[((((((int)blockIdx.x) * 18432) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 49)];
        kernel_shared[(((int)threadIdx.x) + 98)] = kernel[((((((int)blockIdx.x) * 18432) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 98)];
        kernel_shared[(((int)threadIdx.x) + 147)] = kernel[((((((int)blockIdx.x) * 18432) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 147)];
        kernel_shared[(((int)threadIdx.x) + 196)] = kernel[((((((int)blockIdx.x) * 18432) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 196)];
        kernel_shared[(((int)threadIdx.x) + 245)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 245) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 245) % 288))];
        kernel_shared[(((int)threadIdx.x) + 294)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 294) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 6))];
        kernel_shared[(((int)threadIdx.x) + 343)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 343) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 55))];
        kernel_shared[(((int)threadIdx.x) + 392)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 392) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 104))];
        kernel_shared[(((int)threadIdx.x) + 441)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 441) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 153))];
        kernel_shared[(((int)threadIdx.x) + 490)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 490) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 202))];
        kernel_shared[(((int)threadIdx.x) + 539)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 539) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 251) % 288))];
        kernel_shared[(((int)threadIdx.x) + 588)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 588) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 12))];
        kernel_shared[(((int)threadIdx.x) + 637)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 637) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 61))];
        kernel_shared[(((int)threadIdx.x) + 686)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 686) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 110))];
        kernel_shared[(((int)threadIdx.x) + 735)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 735) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 159))];
        kernel_shared[(((int)threadIdx.x) + 784)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 784) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 208))];
        kernel_shared[(((int)threadIdx.x) + 833)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 833) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 257) % 288))];
        kernel_shared[(((int)threadIdx.x) + 882)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 882) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 18))];
        kernel_shared[(((int)threadIdx.x) + 931)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 931) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 67))];
        kernel_shared[(((int)threadIdx.x) + 980)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 980) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 116))];
        kernel_shared[(((int)threadIdx.x) + 1029)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 1029) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 165))];
        kernel_shared[(((int)threadIdx.x) + 1078)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 1078) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 214))];
        if (((int)threadIdx.x) < 25) {
          kernel_shared[(((int)threadIdx.x) + 1127)] = kernel[((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) + 1127) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 263))];
        }
        __syncthreads();
        for (int rc_outer_inner = 0; rc_outer_inner < 16; ++rc_outer_inner) {
          for (int rc_inner = 0; rc_inner < 2; ++rc_inner) {
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + (rc_inner * 9))]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 288)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 576)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 864)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 1)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 289)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 577)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 865)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 2)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 290)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 578)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 866)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 3)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 291)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 579)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 867)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 4)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 292)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 580)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 868)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 5)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 293)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 581)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 869)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 6)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 294)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 582)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 870)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 7)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 295)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 583)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 871)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 8)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 296)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 584)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((rc_outer_inner * 162) + (rc_inner * 81)) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[(((rc_outer_inner * 18) + (rc_inner * 9)) + 872)]));
          }
        }
      }
      for (int i1_inner = 0; i1_inner < 4; ++i1_inner) {
        compute[(((((int)blockIdx.x) * 196) + (i1_inner * 49)) + ((int)threadIdx.x))] = max((conv2d_nchw[i1_inner] + bias[((((int)blockIdx.x) * 4) + i1_inner)]), 0.000000e+00f);
      }
    }





A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.7/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  18.499 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
