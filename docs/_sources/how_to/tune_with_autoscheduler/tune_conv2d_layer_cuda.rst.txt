.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    compute(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (compute[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the master process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.


.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none





We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [1, 512, 7, 7], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [1, 512, 1, 1], []),
                 data: Buffer(data_2: Pointer(float32), float32, [1, 512, 7, 7], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [512, 512, 3, 3], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 64;
      allocate(compute_3: Pointer(local float32), float32, [7]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [2016]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [768]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
        compute_3[0] = 0f32
        compute_3[1] = 0f32
        compute_3[2] = 0f32
        compute_3[3] = 0f32
        compute_3[4] = 0f32
        compute_3[5] = 0f32
        compute_3[6] = 0f32
        for (rc.outer.outer: int32, 0, 16) {
          for (ry.outer.outer: int32, 0, 3) {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[(threadIdx.x_1*2)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1*2), 9))) && (floormod((threadIdx.x_1*2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1*2), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1*2), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 1)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 1), 9))) && (floormod(((threadIdx.x_1*2) + 1), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 1), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 112)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 49), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 49), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 4), 9))) && (floormod(((threadIdx.x_1*2) + 4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 112), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 113)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 50), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 50), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 5), 9))) && (floormod(((threadIdx.x_1*2) + 5), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 113), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 5), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 224)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 35), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 35), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 8), 9))) && (floormod(((threadIdx.x_1*2) + 8), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 224), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 8), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 225)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 36), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 36), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1*2), 9))) && (floormod((threadIdx.x_1*2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1*2), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1*2), 9)) + 167)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 336)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 21), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 21), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 3), 9))) && (floormod(((threadIdx.x_1*2) + 3), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 336), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 337)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 22), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 22), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 4), 9))) && (floormod(((threadIdx.x_1*2) + 4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 337), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 4), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 448)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 7), 9))) && (floormod(((threadIdx.x_1*2) + 7), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 448), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 449)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 8), 9))) && (floormod(((threadIdx.x_1*2) + 8), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 449), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 8), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 560)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 56), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 56), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 2), 9))) && (floormod(((threadIdx.x_1*2) + 2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 560), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 2), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 561)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 57), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 57), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 3), 9))) && (floormod(((threadIdx.x_1*2) + 3), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 561), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 3), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 672)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 42), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 42), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 6), 9))) && (floormod(((threadIdx.x_1*2) + 6), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 672), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 673)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 43), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 43), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 7), 9))) && (floormod(((threadIdx.x_1*2) + 7), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 673), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 7), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 784)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 28), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 28), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 1), 9))) && (floormod(((threadIdx.x_1*2) + 1), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 784), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 1), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 785)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 29), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 29), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 2), 9))) && (floormod(((threadIdx.x_1*2) + 2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 785), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 2), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 896)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 5), 9))) && (floormod(((threadIdx.x_1*2) + 5), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 896), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 5), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 897)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 15), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 15), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 6), 9))) && (floormod(((threadIdx.x_1*2) + 6), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 897), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 6), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 1008)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1*2), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1*2), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1*2), 9))) && (floormod((threadIdx.x_1*2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1*2), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1*2), 9)) + 776)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 1009)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 1), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 1), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 1), 9))) && (floormod(((threadIdx.x_1*2) + 1), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1009), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 1), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 1120)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 49), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 49), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 4), 9))) && (floormod(((threadIdx.x_1*2) + 4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1120), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 1121)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 50), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 50), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 5), 9))) && (floormod(((threadIdx.x_1*2) + 5), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1121), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 5), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 1232)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 35), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 35), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 8), 9))) && (floormod(((threadIdx.x_1*2) + 8), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1232), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 8), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 1233)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 36), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 36), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1*2), 9))) && (floormod((threadIdx.x_1*2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1*2), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1*2), 9)) + 951)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 1344)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 21), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 21), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 3), 9))) && (floormod(((threadIdx.x_1*2) + 3), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1344), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 1345)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 22), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 22), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 4), 9))) && (floormod(((threadIdx.x_1*2) + 4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1345), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 4), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 1456)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 7), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 7), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 7), 9))) && (floormod(((threadIdx.x_1*2) + 7), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1456), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 1457)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 8), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 8), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 8), 9))) && (floormod(((threadIdx.x_1*2) + 8), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1457), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 8), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 1568)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 56), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 56), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 2), 9))) && (floormod(((threadIdx.x_1*2) + 2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1568), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 2), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 1569)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 57), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 57), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 3), 9))) && (floormod(((threadIdx.x_1*2) + 3), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1569), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 3), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 1680)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 42), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 42), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 6), 9))) && (floormod(((threadIdx.x_1*2) + 6), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1680), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 1681)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 43), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 43), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 7), 9))) && (floormod(((threadIdx.x_1*2) + 7), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1681), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 7), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 1792)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 28), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 28), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 1), 9))) && (floormod(((threadIdx.x_1*2) + 1), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1792), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 1), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 1793)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 29), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 29), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 2), 9))) && (floormod(((threadIdx.x_1*2) + 2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1793), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 2), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              pad_temp.shared[((threadIdx.x_1*2) + 1904)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 14), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 14), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 5), 9))) && (floormod(((threadIdx.x_1*2) + 5), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1904), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 5), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared[((threadIdx.x_1*2) + 1905)] = @tir.if_then_else(((((1 <= (floordiv(floormod(((threadIdx.x_1*2) + 15), 63), 9) + ry.outer.outer)) && ((floordiv(floormod(((threadIdx.x_1*2) + 15), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod(((threadIdx.x_1*2) + 6), 9))) && (floormod(((threadIdx.x_1*2) + 6), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(((threadIdx.x_1*2) + 1905), 9)*7)) + (ry.outer.outer*7)) + floormod(((threadIdx.x_1*2) + 6), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[(threadIdx.x_2*32)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(threadIdx.x_2, 3)*4608)) + (rc.outer.outer*288)) + (floordiv((floormod(threadIdx.x_2, 3)*32), 3)*9)) + (ry.outer.outer*3)) + floormod((threadIdx.x_2*32), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 1)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 1), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 1), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 1), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 2)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 2), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 2), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 2), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 3)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 3), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 3), 96), 3)*9)) + (ry.outer.outer*3)) + floormod((threadIdx.x_2*32), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 4)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 4), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 4), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 1), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 5)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 5), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 5), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 2), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 6)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 6), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 6), 96), 3)*9)) + (ry.outer.outer*3)) + floormod((threadIdx.x_2*32), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 7)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 7), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 7), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 1), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 8)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 8), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 8), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 2), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 9)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 9), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 9), 96), 3)*9)) + (ry.outer.outer*3)) + floormod((threadIdx.x_2*32), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 10)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 10), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 10), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 1), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 11)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 11), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 11), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 2), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 12)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 12), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 12), 96), 3)*9)) + (ry.outer.outer*3)) + floormod((threadIdx.x_2*32), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 13)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 13), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 13), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 1), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 14)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 14), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 14), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 2), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 15)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 15), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 15), 96), 3)*9)) + (ry.outer.outer*3)) + floormod((threadIdx.x_2*32), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 16)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 16), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 16), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 1), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 17)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 17), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 17), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 2), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 18)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 18), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 18), 96), 3)*9)) + (ry.outer.outer*3)) + floormod((threadIdx.x_2*32), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 19)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 19), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 19), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 1), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 20)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 20), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 20), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 2), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 21)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 21), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 21), 96), 3)*9)) + (ry.outer.outer*3)) + floormod((threadIdx.x_2*32), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 22)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 22), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 22), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 1), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 23)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 23), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 23), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 2), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 24)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 24), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 24), 96), 3)*9)) + (ry.outer.outer*3)) + floormod((threadIdx.x_2*32), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 25)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 25), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 25), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 1), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 26)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 26), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 26), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 2), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 27)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 27), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 27), 96), 3)*9)) + (ry.outer.outer*3)) + floormod((threadIdx.x_2*32), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 28)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 28), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 28), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 1), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 29)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 29), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 29), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 2), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 30)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 30), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 30), 96), 3)*9)) + (ry.outer.outer*3)) + floormod((threadIdx.x_2*32), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 24), dtype=bool) {
                kernel.shared[((threadIdx.x_2*32) + 31)] = (float32*)kernel_2[((((((blockIdx.x*36864) + (floordiv(((threadIdx.x_2*32) + 31), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*32) + 31), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*32) + 1), 3))]
              }
            }
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7)*9)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*96)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*96)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 2)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*96)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 3)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*96)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 4)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*96)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 5)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*96)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 6)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*96)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 1)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 2)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 1)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 3)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 1)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 4)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 1)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 5)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 1)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 6)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 1)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 7)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 1)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 2)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 2)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 3)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 2)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 4)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 2)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 5)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 2)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 6)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 2)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 7)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 2)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 8)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 2)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 63)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 3)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 64)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 3)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 65)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 3)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 66)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 3)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 67)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 3)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 68)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 3)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 69)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 3)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 64)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 4)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 65)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 4)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 66)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 4)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 67)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 4)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 68)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 4)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 69)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 4)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 70)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 4)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 65)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 5)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 66)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 5)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 67)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 5)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 68)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 5)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 69)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 5)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 70)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 5)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 71)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 5)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 126)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 6)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 127)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 6)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 128)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 6)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 129)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 6)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 130)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 6)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 131)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 6)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 132)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 6)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 127)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 7)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 128)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 7)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 129)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 7)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 130)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 7)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 131)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 7)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 132)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 7)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 133)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 7)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 128)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 8)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 129)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 8)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 130)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 8)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 131)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 8)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 132)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 8)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 133)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 8)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 134)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 8)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 189)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 9)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 190)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 9)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 191)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 9)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 192)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 9)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 193)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 9)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 194)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 9)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 195)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 9)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 190)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 10)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 191)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 10)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 192)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 10)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 193)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 10)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 194)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 10)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 195)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 10)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 196)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 10)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 191)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 11)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 192)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 11)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 193)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 11)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 194)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 11)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 195)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 11)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 196)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 11)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 197)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 11)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 252)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 12)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 253)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 12)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 254)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 12)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 255)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 12)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 256)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 12)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 257)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 12)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 258)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 12)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 253)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 13)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 254)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 13)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 255)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 13)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 256)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 13)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 257)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 13)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 258)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 13)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 259)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 13)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 254)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 14)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 255)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 14)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 256)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 14)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 257)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 14)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 258)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 14)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 259)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 14)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 260)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 14)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 315)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 15)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 316)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 15)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 317)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 15)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 318)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 15)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 319)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 15)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 320)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 15)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 321)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 15)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 316)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 16)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 317)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 16)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 318)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 16)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 319)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 16)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 320)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 16)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 321)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 16)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 322)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 16)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 317)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 17)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 318)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 17)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 319)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 17)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 320)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 17)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 321)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 17)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 322)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 17)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 323)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 17)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 378)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 18)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 379)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 18)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 380)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 18)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 381)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 18)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 382)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 18)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 383)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 18)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 384)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 18)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 379)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 19)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 380)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 19)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 381)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 19)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 382)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 19)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 383)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 19)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 384)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 19)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 385)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 19)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 380)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 20)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 381)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 20)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 382)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 20)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 383)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 20)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 384)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 20)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 385)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 20)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 386)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 20)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 441)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 21)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 442)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 21)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 443)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 21)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 444)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 21)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 445)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 21)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 446)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 21)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 447)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 21)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 442)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 22)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 443)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 22)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 444)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 22)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 445)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 22)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 446)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 22)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 447)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 22)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 448)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 22)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 443)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 23)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 444)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 23)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 445)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 23)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 446)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 23)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 447)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 23)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 448)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 23)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 449)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 23)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 504)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 24)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 505)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 24)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 506)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 24)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 507)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 24)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 508)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 24)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 509)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 24)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 510)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 24)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 505)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 25)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 506)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 25)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 507)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 25)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 508)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 25)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 509)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 25)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 510)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 25)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 511)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 25)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 506)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 26)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 507)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 26)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 508)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 26)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 509)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 26)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 510)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 26)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 511)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 26)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 512)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 26)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 567)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 27)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 568)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 27)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 569)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 27)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 570)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 27)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 571)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 27)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 572)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 27)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 573)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 27)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 568)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 28)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 569)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 28)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 570)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 28)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 571)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 28)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 572)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 28)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 573)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 28)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 574)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 28)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 569)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 29)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 570)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 29)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 571)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 29)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 572)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 29)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 573)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 29)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 574)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 29)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 575)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 29)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 630)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 30)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 631)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 30)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 632)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 30)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 633)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 30)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 634)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 30)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 635)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 30)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 636)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 30)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 631)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 31)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 632)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 31)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 633)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 31)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 634)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 31)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 635)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 31)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 636)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 31)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 637)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 31)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 632)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 32)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 633)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 32)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 634)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 32)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 635)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 32)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 636)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 32)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 637)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 32)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 638)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 32)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 693)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 33)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 694)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 33)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 695)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 33)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 696)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 33)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 697)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 33)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 698)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 33)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 699)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 33)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 694)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 34)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 695)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 34)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 696)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 34)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 697)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 34)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 698)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 34)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 699)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 34)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 700)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 34)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 695)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 35)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 696)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 35)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 697)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 35)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 698)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 35)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 699)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 35)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 700)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 35)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 701)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 35)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 756)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 36)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 757)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 36)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 758)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 36)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 759)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 36)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 760)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 36)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 761)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 36)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 762)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 36)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 757)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 37)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 758)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 37)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 759)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 37)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 760)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 37)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 761)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 37)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 762)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 37)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 763)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 37)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 758)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 38)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 759)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 38)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 760)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 38)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 761)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 38)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 762)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 38)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 763)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 38)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 764)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 38)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 819)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 39)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 820)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 39)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 821)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 39)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 822)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 39)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 823)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 39)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 824)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 39)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 825)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 39)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 820)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 40)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 821)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 40)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 822)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 40)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 823)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 40)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 824)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 40)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 825)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 40)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 826)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 40)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 821)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 41)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 822)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 41)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 823)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 41)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 824)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 41)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 825)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 41)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 826)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 41)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 827)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 41)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 882)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 42)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 883)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 42)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 884)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 42)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 885)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 42)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 886)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 42)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 887)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 42)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 888)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 42)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 883)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 43)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 884)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 43)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 885)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 43)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 886)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 43)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 887)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 43)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 888)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 43)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 889)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 43)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 884)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 44)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 885)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 44)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 886)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 44)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 887)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 44)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 888)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 44)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 889)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 44)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 890)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 44)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 945)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 45)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 946)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 45)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 947)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 45)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 948)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 45)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 949)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 45)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 950)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 45)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 951)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 45)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 946)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 46)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 947)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 46)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 948)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 46)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 949)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 46)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 950)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 46)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 951)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 46)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 952)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 46)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 947)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 47)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 948)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 47)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 949)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 47)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 950)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 47)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 951)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 47)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 952)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 47)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 953)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 47)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1008)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 48)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1009)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 48)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1010)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 48)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1011)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 48)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1012)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 48)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1013)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 48)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1014)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 48)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1009)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 49)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1010)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 49)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1011)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 49)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1012)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 49)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1013)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 49)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1014)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 49)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1015)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 49)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1010)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 50)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1011)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 50)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1012)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 50)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1013)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 50)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1014)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 50)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1015)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 50)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1016)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 50)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1071)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 51)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1072)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 51)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1073)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 51)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1074)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 51)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1075)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 51)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1076)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 51)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1077)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 51)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1072)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 52)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1073)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 52)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1074)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 52)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1075)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 52)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1076)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 52)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1077)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 52)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1078)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 52)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1073)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 53)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1074)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 53)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1075)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 53)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1076)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 53)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1077)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 53)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1078)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 53)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1079)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 53)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1134)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 54)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1135)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 54)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1136)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 54)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1137)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 54)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1138)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 54)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1139)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 54)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1140)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 54)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1135)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 55)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1136)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 55)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1137)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 55)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1138)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 55)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1139)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 55)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1140)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 55)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1141)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 55)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1136)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 56)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1137)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 56)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1138)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 56)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1139)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 56)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1140)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 56)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1141)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 56)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1142)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 56)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1197)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 57)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1198)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 57)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1199)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 57)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1200)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 57)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1201)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 57)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1202)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 57)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1203)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 57)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1198)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 58)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1199)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 58)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1200)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 58)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1201)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 58)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1202)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 58)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1203)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 58)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1204)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 58)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1199)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 59)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1200)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 59)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1201)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 59)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1202)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 59)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1203)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 59)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1204)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 59)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1205)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 59)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1260)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 60)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1261)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 60)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1262)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 60)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1263)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 60)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1264)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 60)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1265)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 60)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1266)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 60)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1261)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 61)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1262)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 61)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1263)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 61)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1264)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 61)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1265)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 61)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1266)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 61)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1267)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 61)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1262)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 62)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1263)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 62)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1264)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 62)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1265)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 62)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1266)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 62)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1267)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 62)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1268)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 62)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1323)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 63)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1324)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 63)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1325)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 63)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1326)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 63)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1327)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 63)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1328)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 63)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1329)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 63)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1324)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 64)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1325)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 64)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1326)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 64)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1327)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 64)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1328)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 64)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1329)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 64)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1330)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 64)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1325)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 65)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1326)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 65)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1327)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 65)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1328)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 65)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1329)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 65)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1330)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 65)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1331)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 65)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1386)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 66)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1387)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 66)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1388)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 66)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1389)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 66)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1390)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 66)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1391)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 66)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1392)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 66)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1387)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 67)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1388)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 67)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1389)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 67)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1390)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 67)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1391)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 67)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1392)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 67)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1393)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 67)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1388)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 68)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1389)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 68)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1390)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 68)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1391)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 68)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1392)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 68)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1393)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 68)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1394)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 68)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1449)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 69)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1450)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 69)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1451)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 69)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1452)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 69)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1453)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 69)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1454)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 69)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1455)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 69)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1450)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 70)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1451)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 70)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1452)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 70)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1453)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 70)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1454)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 70)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1455)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 70)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1456)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 70)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1451)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 71)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1452)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 71)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1453)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 71)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1454)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 71)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1455)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 71)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1456)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 71)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1457)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 71)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1512)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 72)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1513)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 72)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1514)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 72)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1515)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 72)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1516)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 72)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1517)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 72)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1518)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 72)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1513)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 73)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1514)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 73)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1515)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 73)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1516)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 73)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1517)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 73)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1518)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 73)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1519)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 73)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1514)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 74)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1515)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 74)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1516)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 74)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1517)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 74)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1518)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 74)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1519)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 74)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1520)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 74)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1575)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 75)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1576)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 75)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1577)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 75)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1578)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 75)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1579)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 75)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1580)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 75)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1581)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 75)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1576)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 76)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1577)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 76)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1578)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 76)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1579)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 76)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1580)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 76)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1581)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 76)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1582)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 76)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1577)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 77)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1578)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 77)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1579)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 77)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1580)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 77)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1581)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 77)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1582)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 77)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1583)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 77)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1638)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 78)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1639)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 78)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1640)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 78)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1641)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 78)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1642)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 78)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1643)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 78)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1644)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 78)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1639)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 79)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1640)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 79)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1641)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 79)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1642)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 79)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1643)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 79)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1644)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 79)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1645)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 79)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1640)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 80)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1641)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 80)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1642)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 80)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1643)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 80)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1644)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 80)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1645)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 80)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1646)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 80)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1701)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 81)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1702)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 81)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1703)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 81)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1704)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 81)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1705)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 81)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1706)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 81)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1707)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 81)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1702)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 82)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1703)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 82)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1704)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 82)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1705)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 82)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1706)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 82)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1707)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 82)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1708)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 82)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1703)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 83)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1704)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 83)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1705)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 83)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1706)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 83)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1707)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 83)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1708)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 83)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1709)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 83)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1764)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 84)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1765)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 84)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1766)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 84)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1767)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 84)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1768)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 84)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1769)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 84)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1770)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 84)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1765)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 85)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1766)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 85)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1767)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 85)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1768)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 85)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1769)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 85)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1770)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 85)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1771)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 85)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1766)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 86)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1767)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 86)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1768)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 86)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1769)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 86)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1770)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 86)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1771)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 86)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1772)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 86)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1827)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 87)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1828)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 87)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1829)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 87)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1830)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 87)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1831)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 87)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1832)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 87)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1833)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 87)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1828)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 88)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1829)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 88)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1830)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 88)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1831)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 88)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1832)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 88)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1833)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 88)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1834)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 88)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1829)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 89)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1830)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 89)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1831)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 89)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1832)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 89)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1833)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 89)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1834)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 89)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1835)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 89)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1890)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 90)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1891)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 90)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1892)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 90)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1893)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 90)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1894)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 90)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1895)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 90)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1896)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 90)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1891)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 91)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1892)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 91)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1893)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 91)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1894)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 91)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1895)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 91)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1896)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 91)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1897)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 91)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1892)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 92)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1893)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 92)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1894)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 92)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1895)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 92)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1896)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 92)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1897)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 92)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1898)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 92)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1953)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 93)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1954)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 93)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1955)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 93)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1956)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 93)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1957)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 93)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1958)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 93)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1959)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 93)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1954)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 94)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1955)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 94)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1956)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 94)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1957)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 94)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1958)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 94)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1959)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 94)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1960)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 94)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1955)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 95)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1956)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 95)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1957)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 95)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1958)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 95)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1959)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 95)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1960)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 95)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*9) + 1961)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*96) + 95)]))
          }
        }
        for (i3.inner: int32, 0, 7) {
          compute_2[(((blockIdx.x*392) + (threadIdx.x*7)) + i3.inner)] = max(((float32*)compute_3[i3.inner] + (float32*)bias_2[((blockIdx.x*8) + floordiv(threadIdx.x, 7))]), 0f32)
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.214 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.


.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    compute_nn, compute_ff, compute_yy, compute_xx, compute_rc, compute_ry, compute_rx = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    compute_nn_o_i, compute_nn_i = s[compute].split(compute_nn, factor=1)
    compute_nn_o_o_i, compute_nn_o_i = s[compute].split(compute_nn_o_i, factor=1)
    compute_nn_o_o_o_i, compute_nn_o_o_i = s[compute].split(compute_nn_o_o_i, factor=1)
    compute_nn_o_o_o_o, compute_nn_o_o_o_i = s[compute].split(compute_nn_o_o_o_i, factor=1)
    compute_ff_o_i, compute_ff_i = s[compute].split(compute_ff, factor=1)
    compute_ff_o_o_i, compute_ff_o_i = s[compute].split(compute_ff_o_i, factor=1)
    compute_ff_o_o_o_i, compute_ff_o_o_i = s[compute].split(compute_ff_o_o_i, factor=8)
    compute_ff_o_o_o_o, compute_ff_o_o_o_i = s[compute].split(compute_ff_o_o_o_i, factor=1)
    compute_yy_o_i, compute_yy_i = s[compute].split(compute_yy, factor=1)
    compute_yy_o_o_i, compute_yy_o_i = s[compute].split(compute_yy_o_i, factor=1)
    compute_yy_o_o_o_i, compute_yy_o_o_i = s[compute].split(compute_yy_o_o_i, factor=7)
    compute_yy_o_o_o_o, compute_yy_o_o_o_i = s[compute].split(compute_yy_o_o_o_i, factor=1)
    compute_xx_o_i, compute_xx_i = s[compute].split(compute_xx, factor=7)
    compute_xx_o_o_i, compute_xx_o_i = s[compute].split(compute_xx_o_i, factor=1)
    compute_xx_o_o_o_i, compute_xx_o_o_i = s[compute].split(compute_xx_o_o_i, factor=1)
    compute_xx_o_o_o_o, compute_xx_o_o_o_i = s[compute].split(compute_xx_o_o_o_i, factor=1)
    compute_rc_o_i, compute_rc_i = s[compute].split(compute_rc, factor=2)
    compute_rc_o_o, compute_rc_o_i = s[compute].split(compute_rc_o_i, factor=16)
    compute_ry_o_i, compute_ry_i = s[compute].split(compute_ry, factor=1)
    compute_ry_o_o, compute_ry_o_i = s[compute].split(compute_ry_o_i, factor=1)
    compute_rx_o_i, compute_rx_i = s[compute].split(compute_rx, factor=3)
    compute_rx_o_o, compute_rx_o_i = s[compute].split(compute_rx_o_i, factor=1)
    s[compute].reorder(compute_nn_o_o_o_o, compute_ff_o_o_o_o, compute_yy_o_o_o_o, compute_xx_o_o_o_o, compute_nn_o_o_o_i, compute_ff_o_o_o_i, compute_yy_o_o_o_i, compute_xx_o_o_o_i, compute_nn_o_o_i, compute_ff_o_o_i, compute_yy_o_o_i, compute_xx_o_o_i, compute_rc_o_o, compute_ry_o_o, compute_rx_o_o, compute_rc_o_i, compute_ry_o_i, compute_rx_o_i, compute_nn_o_i, compute_ff_o_i, compute_yy_o_i, compute_xx_o_i, compute_rc_i, compute_ry_i, compute_rx_i, compute_nn_i, compute_ff_i, compute_yy_i, compute_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=8)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=7)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[compute].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [compute])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[compute], compute_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [compute])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[compute], compute_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=32)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=56)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=2)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=56)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[compute].pragma(compute_nn_o_o_o_o, "auto_unroll_max_step", 1024)
    s[compute].pragma(compute_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(56) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float compute1[7];
      __shared__ float pad_temp_shared[2016];
      __shared__ float kernel_shared[768];
      compute1[(0)] = 0.000000e+00f;
      compute1[(1)] = 0.000000e+00f;
      compute1[(2)] = 0.000000e+00f;
      compute1[(3)] = 0.000000e+00f;
      compute1[(4)] = 0.000000e+00f;
      compute1[(5)] = 0.000000e+00f;
      compute1[(6)] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 16; ++rc_outer_outer) {
        for (int ry_outer_outer = 0; ry_outer_outer < 3; ++ry_outer_outer) {
          __syncthreads();
          pad_temp_shared[((((int)threadIdx.x) * 2))] = (((((1 <= ((((((int)threadIdx.x) * 2) % 63) / 9) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= ((((int)threadIdx.x) * 2) % 9))) && (((((int)threadIdx.x) * 2) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 9) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 2) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 1) % 9))) && ((((((int)threadIdx.x) * 2) + 1) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 1) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 112))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 49) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 49) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 4) % 9))) && ((((((int)threadIdx.x) * 2) + 4) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 112) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 4) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 113))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 50) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 50) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 5) % 9))) && ((((((int)threadIdx.x) * 2) + 5) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 113) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 5) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 224))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 35) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 35) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 8) % 9))) && ((((((int)threadIdx.x) * 2) + 8) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 224) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 8) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 225))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 36) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 36) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= ((((int)threadIdx.x) * 2) % 9))) && (((((int)threadIdx.x) * 2) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 9) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 2) % 9)) + 167))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 336))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 21) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 21) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 3) % 9))) && ((((((int)threadIdx.x) * 2) + 3) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 336) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 3) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 337))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 22) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 22) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 4) % 9))) && ((((((int)threadIdx.x) * 2) + 4) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 337) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 4) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 448))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 7) % 9))) && ((((((int)threadIdx.x) * 2) + 7) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 448) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 7) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 449))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 8) % 9))) && ((((((int)threadIdx.x) * 2) + 8) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 449) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 8) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 560))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 56) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 56) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 2) % 9))) && ((((((int)threadIdx.x) * 2) + 2) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 560) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 2) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 561))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 57) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 57) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 3) % 9))) && ((((((int)threadIdx.x) * 2) + 3) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 561) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 3) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 672))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 42) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 42) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 6) % 9))) && ((((((int)threadIdx.x) * 2) + 6) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 672) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 6) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 673))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 43) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 43) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 7) % 9))) && ((((((int)threadIdx.x) * 2) + 7) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 673) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 7) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 784))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 28) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 28) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 1) % 9))) && ((((((int)threadIdx.x) * 2) + 1) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 784) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 1) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 785))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 29) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 29) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 2) % 9))) && ((((((int)threadIdx.x) * 2) + 2) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 785) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 2) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 896))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 5) % 9))) && ((((((int)threadIdx.x) * 2) + 5) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 896) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 5) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 897))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 15) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 15) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 6) % 9))) && ((((((int)threadIdx.x) * 2) + 6) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 897) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 6) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1008))] = (((((1 <= ((((((int)threadIdx.x) * 2) % 63) / 9) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= ((((int)threadIdx.x) * 2) % 9))) && (((((int)threadIdx.x) * 2) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 9) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 2) % 9)) + 776))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1009))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 1) % 9))) && ((((((int)threadIdx.x) * 2) + 1) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1009) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 1) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1120))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 49) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 49) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 4) % 9))) && ((((((int)threadIdx.x) * 2) + 4) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1120) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 4) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1121))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 50) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 50) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 5) % 9))) && ((((((int)threadIdx.x) * 2) + 5) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1121) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 5) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1232))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 35) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 35) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 8) % 9))) && ((((((int)threadIdx.x) * 2) + 8) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1232) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 8) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1233))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 36) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 36) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= ((((int)threadIdx.x) * 2) % 9))) && (((((int)threadIdx.x) * 2) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 9) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 2) % 9)) + 951))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1344))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 21) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 21) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 3) % 9))) && ((((((int)threadIdx.x) * 2) + 3) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1344) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 3) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1345))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 22) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 22) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 4) % 9))) && ((((((int)threadIdx.x) * 2) + 4) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1345) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 4) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1456))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 7) % 9))) && ((((((int)threadIdx.x) * 2) + 7) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1456) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 7) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1457))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 8) % 9))) && ((((((int)threadIdx.x) * 2) + 8) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1457) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 8) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1568))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 56) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 56) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 2) % 9))) && ((((((int)threadIdx.x) * 2) + 2) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1568) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 2) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1569))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 57) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 57) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 3) % 9))) && ((((((int)threadIdx.x) * 2) + 3) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1569) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 3) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1680))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 42) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 42) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 6) % 9))) && ((((((int)threadIdx.x) * 2) + 6) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1680) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 6) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1681))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 43) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 43) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 7) % 9))) && ((((((int)threadIdx.x) * 2) + 7) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1681) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 7) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1792))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 28) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 28) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 1) % 9))) && ((((((int)threadIdx.x) * 2) + 1) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1792) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 1) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1793))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 29) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 29) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 2) % 9))) && ((((((int)threadIdx.x) * 2) + 2) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1793) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 2) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1904))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 5) % 9))) && ((((((int)threadIdx.x) * 2) + 5) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1904) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 5) % 9)) - 8))] : 0.000000e+00f);
          pad_temp_shared[(((((int)threadIdx.x) * 2) + 1905))] = (((((1 <= (((((((int)threadIdx.x) * 2) + 15) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 15) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 2) + 6) % 9))) && ((((((int)threadIdx.x) * 2) + 6) % 9) < 8)) ? data[((((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1905) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 2) + 6) % 9)) - 8))] : 0.000000e+00f);
          if (((int)threadIdx.x) < 24) {
            kernel_shared[((((int)threadIdx.x) * 32))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((int)threadIdx.x) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) % 3) * 32) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) * 32) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 1))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 1) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 1) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 1) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 2))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 2) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 2) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 2) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 3))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 3) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 3) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) * 32) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 4))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 4) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 4) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 1) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 5))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 5) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 5) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 2) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 6))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 6) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 6) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) * 32) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 7))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 7) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 7) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 1) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 8))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 8) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 8) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 2) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 9))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 9) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 9) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) * 32) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 10))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 10) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 10) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 1) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 11))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 11) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 11) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 2) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 12))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 12) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 12) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) * 32) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 13))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 13) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 13) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 1) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 14))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 14) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 14) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 2) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 15))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 15) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 15) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) * 32) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 16))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 16) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 16) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 1) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 17))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 17) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 17) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 2) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 18))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 18) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 18) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) * 32) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 19))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 19) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 19) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 1) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 20))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 20) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 20) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 2) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 21))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 21) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 21) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) * 32) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 22))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 22) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 22) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 1) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 23))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 23) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 23) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 2) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 24))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 24) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 24) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) * 32) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 25))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 25) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 25) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 1) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 26))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 26) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 26) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 2) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 27))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 27) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 27) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) * 32) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 28))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 28) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 28) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 1) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 29))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 29) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 29) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 2) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 30))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 30) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 30) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) * 32) % 3)))];
          }
          if (((int)threadIdx.x) < 24) {
            kernel_shared[(((((int)threadIdx.x) * 32) + 31))] = kernel[(((((((((int)blockIdx.x) * 36864) + ((((((int)threadIdx.x) * 32) + 31) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((((int)threadIdx.x) * 32) + 31) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + (((((int)threadIdx.x) * 32) + 1) % 3)))];
          }
          __syncthreads();
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9))] * kernel_shared[(((((int)threadIdx.x) / 7) * 96))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1))] * kernel_shared[(((((int)threadIdx.x) / 7) * 96))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 2))] * kernel_shared[(((((int)threadIdx.x) / 7) * 96))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 3))] * kernel_shared[(((((int)threadIdx.x) / 7) * 96))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 4))] * kernel_shared[(((((int)threadIdx.x) / 7) * 96))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 5))] * kernel_shared[(((((int)threadIdx.x) / 7) * 96))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 6))] * kernel_shared[(((((int)threadIdx.x) / 7) * 96))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 1))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 2))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 1))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 3))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 1))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 4))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 1))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 5))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 1))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 6))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 1))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 7))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 1))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 2))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 2))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 3))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 2))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 4))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 2))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 5))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 2))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 6))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 2))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 7))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 2))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 8))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 2))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 63))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 3))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 64))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 3))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 65))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 3))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 66))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 3))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 67))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 3))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 68))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 3))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 69))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 3))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 64))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 4))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 65))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 4))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 66))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 4))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 67))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 4))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 68))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 4))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 69))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 4))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 70))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 4))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 65))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 5))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 66))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 5))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 67))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 5))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 68))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 5))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 69))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 5))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 70))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 5))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 71))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 5))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 126))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 6))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 127))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 6))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 128))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 6))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 129))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 6))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 130))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 6))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 131))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 6))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 132))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 6))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 127))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 7))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 128))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 7))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 129))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 7))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 130))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 7))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 131))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 7))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 132))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 7))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 133))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 7))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 128))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 8))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 129))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 8))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 130))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 8))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 131))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 8))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 132))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 8))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 133))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 8))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 134))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 8))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 189))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 9))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 190))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 9))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 191))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 9))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 192))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 9))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 193))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 9))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 194))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 9))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 195))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 9))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 190))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 10))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 191))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 10))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 192))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 10))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 193))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 10))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 194))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 10))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 195))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 10))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 196))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 10))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 191))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 11))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 192))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 11))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 193))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 11))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 194))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 11))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 195))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 11))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 196))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 11))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 197))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 11))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 252))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 12))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 253))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 12))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 254))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 12))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 255))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 12))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 256))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 12))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 257))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 12))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 258))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 12))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 253))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 13))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 254))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 13))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 255))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 13))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 256))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 13))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 257))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 13))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 258))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 13))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 259))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 13))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 254))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 14))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 255))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 14))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 256))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 14))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 257))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 14))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 258))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 14))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 259))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 14))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 260))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 14))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 315))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 15))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 316))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 15))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 317))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 15))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 318))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 15))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 319))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 15))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 320))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 15))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 321))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 15))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 316))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 16))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 317))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 16))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 318))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 16))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 319))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 16))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 320))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 16))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 321))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 16))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 322))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 16))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 317))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 17))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 318))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 17))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 319))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 17))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 320))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 17))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 321))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 17))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 322))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 17))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 323))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 17))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 378))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 18))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 379))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 18))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 380))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 18))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 381))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 18))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 382))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 18))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 383))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 18))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 384))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 18))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 379))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 19))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 380))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 19))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 381))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 19))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 382))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 19))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 383))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 19))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 384))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 19))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 385))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 19))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 380))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 20))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 381))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 20))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 382))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 20))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 383))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 20))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 384))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 20))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 385))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 20))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 386))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 20))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 441))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 21))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 442))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 21))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 443))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 21))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 444))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 21))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 445))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 21))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 446))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 21))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 447))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 21))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 442))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 22))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 443))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 22))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 444))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 22))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 445))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 22))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 446))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 22))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 447))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 22))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 448))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 22))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 443))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 23))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 444))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 23))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 445))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 23))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 446))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 23))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 447))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 23))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 448))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 23))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 449))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 23))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 504))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 24))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 505))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 24))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 506))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 24))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 507))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 24))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 508))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 24))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 509))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 24))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 510))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 24))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 505))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 25))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 506))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 25))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 507))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 25))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 508))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 25))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 509))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 25))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 510))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 25))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 511))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 25))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 506))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 26))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 507))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 26))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 508))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 26))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 509))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 26))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 510))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 26))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 511))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 26))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 512))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 26))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 567))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 27))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 568))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 27))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 569))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 27))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 570))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 27))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 571))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 27))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 572))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 27))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 573))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 27))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 568))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 28))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 569))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 28))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 570))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 28))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 571))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 28))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 572))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 28))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 573))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 28))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 574))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 28))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 569))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 29))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 570))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 29))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 571))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 29))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 572))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 29))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 573))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 29))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 574))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 29))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 575))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 29))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 630))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 30))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 631))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 30))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 632))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 30))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 633))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 30))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 634))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 30))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 635))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 30))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 636))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 30))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 631))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 31))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 632))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 31))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 633))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 31))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 634))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 31))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 635))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 31))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 636))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 31))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 637))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 31))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 632))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 32))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 633))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 32))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 634))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 32))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 635))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 32))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 636))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 32))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 637))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 32))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 638))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 32))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 693))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 33))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 694))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 33))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 695))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 33))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 696))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 33))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 697))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 33))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 698))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 33))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 699))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 33))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 694))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 34))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 695))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 34))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 696))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 34))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 697))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 34))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 698))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 34))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 699))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 34))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 700))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 34))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 695))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 35))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 696))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 35))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 697))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 35))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 698))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 35))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 699))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 35))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 700))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 35))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 701))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 35))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 756))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 36))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 757))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 36))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 758))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 36))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 759))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 36))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 760))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 36))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 761))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 36))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 762))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 36))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 757))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 37))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 758))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 37))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 759))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 37))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 760))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 37))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 761))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 37))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 762))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 37))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 763))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 37))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 758))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 38))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 759))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 38))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 760))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 38))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 761))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 38))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 762))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 38))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 763))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 38))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 764))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 38))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 819))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 39))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 820))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 39))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 821))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 39))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 822))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 39))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 823))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 39))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 824))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 39))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 825))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 39))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 820))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 40))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 821))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 40))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 822))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 40))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 823))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 40))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 824))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 40))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 825))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 40))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 826))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 40))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 821))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 41))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 822))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 41))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 823))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 41))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 824))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 41))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 825))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 41))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 826))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 41))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 827))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 41))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 882))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 42))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 883))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 42))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 884))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 42))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 885))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 42))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 886))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 42))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 887))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 42))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 888))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 42))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 883))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 43))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 884))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 43))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 885))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 43))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 886))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 43))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 887))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 43))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 888))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 43))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 889))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 43))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 884))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 44))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 885))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 44))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 886))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 44))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 887))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 44))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 888))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 44))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 889))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 44))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 890))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 44))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 945))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 45))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 946))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 45))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 947))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 45))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 948))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 45))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 949))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 45))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 950))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 45))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 951))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 45))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 946))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 46))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 947))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 46))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 948))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 46))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 949))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 46))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 950))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 46))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 951))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 46))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 952))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 46))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 947))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 47))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 948))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 47))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 949))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 47))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 950))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 47))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 951))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 47))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 952))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 47))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 953))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 47))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1008))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 48))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1009))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 48))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1010))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 48))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1011))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 48))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1012))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 48))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1013))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 48))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1014))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 48))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1009))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 49))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1010))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 49))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1011))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 49))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1012))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 49))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1013))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 49))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1014))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 49))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1015))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 49))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1010))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 50))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1011))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 50))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1012))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 50))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1013))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 50))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1014))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 50))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1015))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 50))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1016))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 50))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1071))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 51))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1072))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 51))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1073))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 51))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1074))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 51))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1075))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 51))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1076))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 51))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1077))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 51))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1072))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 52))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1073))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 52))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1074))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 52))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1075))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 52))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1076))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 52))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1077))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 52))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1078))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 52))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1073))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 53))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1074))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 53))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1075))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 53))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1076))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 53))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1077))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 53))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1078))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 53))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1079))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 53))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1134))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 54))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1135))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 54))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1136))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 54))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1137))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 54))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1138))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 54))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1139))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 54))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1140))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 54))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1135))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 55))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1136))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 55))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1137))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 55))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1138))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 55))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1139))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 55))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1140))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 55))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1141))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 55))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1136))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 56))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1137))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 56))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1138))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 56))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1139))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 56))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1140))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 56))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1141))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 56))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1142))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 56))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1197))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 57))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1198))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 57))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1199))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 57))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1200))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 57))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1201))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 57))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1202))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 57))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1203))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 57))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1198))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 58))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1199))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 58))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1200))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 58))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1201))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 58))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1202))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 58))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1203))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 58))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1204))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 58))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1199))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 59))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1200))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 59))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1201))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 59))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1202))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 59))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1203))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 59))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1204))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 59))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1205))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 59))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1260))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 60))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1261))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 60))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1262))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 60))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1263))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 60))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1264))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 60))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1265))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 60))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1266))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 60))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1261))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 61))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1262))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 61))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1263))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 61))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1264))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 61))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1265))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 61))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1266))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 61))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1267))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 61))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1262))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 62))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1263))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 62))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1264))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 62))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1265))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 62))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1266))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 62))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1267))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 62))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1268))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 62))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1323))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 63))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1324))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 63))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1325))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 63))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1326))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 63))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1327))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 63))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1328))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 63))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1329))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 63))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1324))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 64))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1325))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 64))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1326))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 64))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1327))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 64))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1328))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 64))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1329))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 64))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1330))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 64))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1325))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 65))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1326))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 65))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1327))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 65))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1328))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 65))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1329))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 65))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1330))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 65))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1331))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 65))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1386))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 66))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1387))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 66))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1388))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 66))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1389))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 66))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1390))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 66))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1391))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 66))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1392))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 66))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1387))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 67))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1388))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 67))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1389))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 67))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1390))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 67))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1391))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 67))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1392))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 67))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1393))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 67))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1388))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 68))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1389))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 68))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1390))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 68))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1391))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 68))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1392))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 68))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1393))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 68))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1394))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 68))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1449))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 69))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1450))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 69))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1451))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 69))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1452))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 69))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1453))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 69))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1454))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 69))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1455))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 69))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1450))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 70))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1451))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 70))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1452))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 70))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1453))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 70))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1454))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 70))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1455))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 70))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1456))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 70))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1451))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 71))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1452))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 71))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1453))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 71))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1454))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 71))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1455))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 71))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1456))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 71))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1457))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 71))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1512))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 72))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1513))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 72))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1514))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 72))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1515))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 72))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1516))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 72))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1517))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 72))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1518))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 72))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1513))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 73))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1514))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 73))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1515))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 73))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1516))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 73))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1517))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 73))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1518))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 73))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1519))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 73))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1514))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 74))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1515))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 74))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1516))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 74))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1517))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 74))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1518))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 74))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1519))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 74))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1520))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 74))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1575))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 75))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1576))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 75))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1577))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 75))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1578))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 75))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1579))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 75))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1580))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 75))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1581))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 75))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1576))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 76))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1577))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 76))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1578))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 76))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1579))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 76))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1580))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 76))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1581))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 76))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1582))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 76))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1577))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 77))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1578))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 77))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1579))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 77))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1580))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 77))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1581))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 77))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1582))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 77))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1583))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 77))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1638))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 78))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1639))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 78))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1640))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 78))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1641))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 78))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1642))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 78))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1643))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 78))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1644))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 78))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1639))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 79))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1640))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 79))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1641))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 79))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1642))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 79))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1643))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 79))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1644))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 79))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1645))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 79))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1640))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 80))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1641))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 80))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1642))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 80))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1643))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 80))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1644))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 80))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1645))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 80))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1646))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 80))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1701))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 81))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1702))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 81))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1703))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 81))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1704))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 81))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1705))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 81))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1706))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 81))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1707))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 81))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1702))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 82))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1703))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 82))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1704))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 82))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1705))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 82))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1706))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 82))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1707))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 82))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1708))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 82))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1703))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 83))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1704))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 83))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1705))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 83))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1706))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 83))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1707))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 83))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1708))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 83))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1709))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 83))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1764))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 84))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1765))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 84))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1766))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 84))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1767))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 84))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1768))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 84))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1769))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 84))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1770))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 84))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1765))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 85))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1766))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 85))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1767))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 85))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1768))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 85))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1769))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 85))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1770))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 85))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1771))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 85))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1766))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 86))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1767))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 86))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1768))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 86))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1769))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 86))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1770))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 86))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1771))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 86))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1772))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 86))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1827))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 87))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1828))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 87))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1829))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 87))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1830))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 87))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1831))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 87))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1832))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 87))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1833))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 87))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1828))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 88))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1829))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 88))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1830))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 88))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1831))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 88))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1832))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 88))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1833))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 88))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1834))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 88))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1829))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 89))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1830))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 89))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1831))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 89))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1832))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 89))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1833))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 89))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1834))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 89))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1835))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 89))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1890))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 90))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1891))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 90))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1892))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 90))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1893))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 90))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1894))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 90))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1895))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 90))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1896))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 90))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1891))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 91))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1892))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 91))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1893))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 91))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1894))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 91))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1895))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 91))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1896))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 91))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1897))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 91))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1892))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 92))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1893))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 92))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1894))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 92))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1895))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 92))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1896))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 92))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1897))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 92))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1898))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 92))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1953))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 93))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1954))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 93))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1955))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 93))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1956))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 93))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1957))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 93))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1958))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 93))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1959))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 93))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1954))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 94))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1955))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 94))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1956))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 94))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1957))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 94))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1958))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 94))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1959))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 94))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1960))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 94))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1955))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 95))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1956))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 95))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1957))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 95))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1958))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 95))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1959))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 95))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1960))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 95))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 9) + 1961))] * kernel_shared[((((((int)threadIdx.x) / 7) * 96) + 95))]));
        }
      }
      for (int i3_inner = 0; i3_inner < 7; ++i3_inner) {
        compute[((((((int)blockIdx.x) * 392) + (((int)threadIdx.x) * 7)) + i3_inner))] = max((compute1[(i3_inner)] + bias[(((((int)blockIdx.x) * 8) + (((int)threadIdx.x) / 7)))]), 0.000000e+00f);
      }
    }





A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.6/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!





.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
