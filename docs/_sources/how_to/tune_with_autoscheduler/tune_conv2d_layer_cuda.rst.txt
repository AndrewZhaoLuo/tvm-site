
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: default



    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 54-59

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 59-71

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 72-75

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 75-88

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 89-106

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 106-116

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 117-123

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 123-132

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 133-136

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 136-140

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute}
      preflattened_buffer_map = {data_1: data_3: Buffer(data_2, float32, [1, 512, 7, 7], []), kernel_1: kernel_3: Buffer(kernel_2, float32, [512, 512, 3, 3], []), bias_1: bias_3: Buffer(bias_2, float32, [1, 512, 1, 1], []), compute_1: compute_3: Buffer(compute_2, float32, [1, 512, 7, 7], [])} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 128;
      allocate(conv2d_nchw: Pointer(local float32), float32, [28]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [324]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [144]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [16], [], scope="local", align=16)[0] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[8] = 0f32
        conv2d_nchw_1[12] = 0f32
        conv2d_nchw_1[16] = 0f32
        conv2d_nchw_1[20] = 0f32
        conv2d_nchw_1[24] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[9] = 0f32
        conv2d_nchw_1[13] = 0f32
        conv2d_nchw_1[17] = 0f32
        conv2d_nchw_1[21] = 0f32
        conv2d_nchw_1[25] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[6] = 0f32
        conv2d_nchw_1[10] = 0f32
        conv2d_nchw_1[14] = 0f32
        conv2d_nchw_1[18] = 0f32
        conv2d_nchw_1[22] = 0f32
        conv2d_nchw_1[26] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[7] = 0f32
        conv2d_nchw_1[11] = 0f32
        conv2d_nchw_1[15] = 0f32
        conv2d_nchw_1[19] = 0f32
        conv2d_nchw_1[23] = 0f32
        conv2d_nchw_1[27] = 0f32
        for (rc.outer.outer: int32, 0, 128) {
          let cse_var_1: int32 = (rc.outer.outer*196)
           {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
              pad_temp.shared_1: Buffer(pad_temp.shared, float32, [324], [], scope="shared")[(threadIdx.x_1*9)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*9) + 1)] = @tir.if_then_else((1 <= threadIdx.x_1), data[((cse_var_1 + (threadIdx.x_1*7)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 2)] = @tir.if_then_else((1 <= threadIdx.x_1), data[((cse_var_1 + (threadIdx.x_1*7)) - 6)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 3)] = @tir.if_then_else((1 <= threadIdx.x_1), data[((cse_var_1 + (threadIdx.x_1*7)) - 5)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 4)] = @tir.if_then_else((1 <= threadIdx.x_1), data[((cse_var_1 + (threadIdx.x_1*7)) - 4)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 5)] = @tir.if_then_else((1 <= threadIdx.x_1), data[((cse_var_1 + (threadIdx.x_1*7)) - 3)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 6)] = @tir.if_then_else((1 <= threadIdx.x_1), data[((cse_var_1 + (threadIdx.x_1*7)) - 2)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 7)] = @tir.if_then_else((1 <= threadIdx.x_1), data[((cse_var_1 + (threadIdx.x_1*7)) - 1)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 8)] = 0f32
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
              pad_temp.shared_1[((threadIdx.x_1*9) + 63)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*9) + 64)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 7), 9)) && (floormod((threadIdx.x_1 + 7), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 7), 9)*49)) + (floormod((threadIdx.x_1 + 7), 9)*7)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 65)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 7), 9)) && (floormod((threadIdx.x_1 + 7), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 7), 9)*49)) + (floormod((threadIdx.x_1 + 7), 9)*7)) - 6)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 66)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 7), 9)) && (floormod((threadIdx.x_1 + 7), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 7), 9)*49)) + (floormod((threadIdx.x_1 + 7), 9)*7)) - 5)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 67)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 7), 9)) && (floormod((threadIdx.x_1 + 7), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 7), 9)*49)) + (floormod((threadIdx.x_1 + 7), 9)*7)) - 4)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 68)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 7), 9)) && (floormod((threadIdx.x_1 + 7), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 7), 9)*49)) + (floormod((threadIdx.x_1 + 7), 9)*7)) - 3)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 69)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 7), 9)) && (floormod((threadIdx.x_1 + 7), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 7), 9)*49)) + (floormod((threadIdx.x_1 + 7), 9)*7)) - 2)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 70)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 7), 9)) && (floormod((threadIdx.x_1 + 7), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 7), 9)*49)) + (floormod((threadIdx.x_1 + 7), 9)*7)) - 1)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 71)] = 0f32
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
              pad_temp.shared_1[((threadIdx.x_1*9) + 126)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*9) + 127)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 5), 9)) && (floormod((threadIdx.x_1 + 5), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 14), 9)*49)) + (floormod((threadIdx.x_1 + 5), 9)*7)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 128)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 5), 9)) && (floormod((threadIdx.x_1 + 5), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 14), 9)*49)) + (floormod((threadIdx.x_1 + 5), 9)*7)) - 6)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 129)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 5), 9)) && (floormod((threadIdx.x_1 + 5), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 14), 9)*49)) + (floormod((threadIdx.x_1 + 5), 9)*7)) - 5)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 130)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 5), 9)) && (floormod((threadIdx.x_1 + 5), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 14), 9)*49)) + (floormod((threadIdx.x_1 + 5), 9)*7)) - 4)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 131)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 5), 9)) && (floormod((threadIdx.x_1 + 5), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 14), 9)*49)) + (floormod((threadIdx.x_1 + 5), 9)*7)) - 3)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 132)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 5), 9)) && (floormod((threadIdx.x_1 + 5), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 14), 9)*49)) + (floormod((threadIdx.x_1 + 5), 9)*7)) - 2)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 133)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 5), 9)) && (floormod((threadIdx.x_1 + 5), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 14), 9)*49)) + (floormod((threadIdx.x_1 + 5), 9)*7)) - 1)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 134)] = 0f32
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
              pad_temp.shared_1[((threadIdx.x_1*9) + 189)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*9) + 190)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 3), 9)) && (floormod((threadIdx.x_1 + 3), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 21), 9)*49)) + (floormod((threadIdx.x_1 + 3), 9)*7)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 191)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 3), 9)) && (floormod((threadIdx.x_1 + 3), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 21), 9)*49)) + (floormod((threadIdx.x_1 + 3), 9)*7)) - 6)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 192)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 3), 9)) && (floormod((threadIdx.x_1 + 3), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 21), 9)*49)) + (floormod((threadIdx.x_1 + 3), 9)*7)) - 5)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 193)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 3), 9)) && (floormod((threadIdx.x_1 + 3), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 21), 9)*49)) + (floormod((threadIdx.x_1 + 3), 9)*7)) - 4)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 194)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 3), 9)) && (floormod((threadIdx.x_1 + 3), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 21), 9)*49)) + (floormod((threadIdx.x_1 + 3), 9)*7)) - 3)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 195)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 3), 9)) && (floormod((threadIdx.x_1 + 3), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 21), 9)*49)) + (floormod((threadIdx.x_1 + 3), 9)*7)) - 2)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 196)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 3), 9)) && (floormod((threadIdx.x_1 + 3), 9) < 8)), data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 21), 9)*49)) + (floormod((threadIdx.x_1 + 3), 9)*7)) - 1)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*9) + 197)] = 0f32
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
              pad_temp.shared_1[((threadIdx.x_1*9) + 252)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*9) + 253)] = data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 28), 9)*49)) + ((threadIdx.x_1 + 1)*7)) - 7)]
              pad_temp.shared_1[((threadIdx.x_1*9) + 254)] = data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 28), 9)*49)) + ((threadIdx.x_1 + 1)*7)) - 6)]
              pad_temp.shared_1[((threadIdx.x_1*9) + 255)] = data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 28), 9)*49)) + ((threadIdx.x_1 + 1)*7)) - 5)]
              pad_temp.shared_1[((threadIdx.x_1*9) + 256)] = data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 28), 9)*49)) + ((threadIdx.x_1 + 1)*7)) - 4)]
              pad_temp.shared_1[((threadIdx.x_1*9) + 257)] = data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 28), 9)*49)) + ((threadIdx.x_1 + 1)*7)) - 3)]
              pad_temp.shared_1[((threadIdx.x_1*9) + 258)] = data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 28), 9)*49)) + ((threadIdx.x_1 + 1)*7)) - 2)]
              pad_temp.shared_1[((threadIdx.x_1*9) + 259)] = data[(((cse_var_1 + (floordiv((threadIdx.x_1 + 28), 9)*49)) + ((threadIdx.x_1 + 1)*7)) - 1)]
              pad_temp.shared_1[((threadIdx.x_1*9) + 260)] = 0f32
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7;
            if @tir.likely((threadIdx.x_1 < 1), dtype=bool) {
              pad_temp.shared_1[((threadIdx.x_1*9) + 315)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*9) + 316)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*9) + 317)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*9) + 318)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*9) + 319)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*9) + 320)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*9) + 321)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*9) + 322)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*9) + 323)] = 0f32
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 7 {
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1: Buffer(kernel.shared, float32, [144], [], scope="shared")[(threadIdx.x_2*24)] = kernel[(((((blockIdx.x*18432) + (floordiv((threadIdx.x_2*2), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod((threadIdx.x_2*8), 12), 3)*9)) + (floormod((threadIdx.x_2*2), 3)*3))]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 1)] = kernel[((((((blockIdx.x*18432) + (floordiv((threadIdx.x_2*2), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod((threadIdx.x_2*8), 12), 3)*9)) + (floormod((threadIdx.x_2*2), 3)*3)) + 1)]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 2)] = kernel[((((((blockIdx.x*18432) + (floordiv((threadIdx.x_2*2), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod((threadIdx.x_2*8), 12), 3)*9)) + (floormod((threadIdx.x_2*2), 3)*3)) + 2)]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 3)] = kernel[(((((blockIdx.x*18432) + (floordiv((threadIdx.x_2*2), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod(((threadIdx.x_2*8) + 1), 12), 3)*9)) + (floormod(((threadIdx.x_2*2) + 1), 3)*3))]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 4)] = kernel[((((((blockIdx.x*18432) + (floordiv((threadIdx.x_2*2), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod(((threadIdx.x_2*8) + 1), 12), 3)*9)) + (floormod(((threadIdx.x_2*2) + 1), 3)*3)) + 1)]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 5)] = kernel[((((((blockIdx.x*18432) + (floordiv((threadIdx.x_2*2), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod(((threadIdx.x_2*8) + 1), 12), 3)*9)) + (floormod(((threadIdx.x_2*2) + 1), 3)*3)) + 2)]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 6)] = kernel[(((((blockIdx.x*18432) + (floordiv((threadIdx.x_2*2), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod(((threadIdx.x_2*8) + 2), 12), 3)*9)) + (floormod(((threadIdx.x_2*2) + 2), 3)*3))]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 7)] = kernel[((((((blockIdx.x*18432) + (floordiv((threadIdx.x_2*2), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod(((threadIdx.x_2*8) + 2), 12), 3)*9)) + (floormod(((threadIdx.x_2*2) + 2), 3)*3)) + 1)]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 8)] = kernel[((((((blockIdx.x*18432) + (floordiv((threadIdx.x_2*2), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod(((threadIdx.x_2*8) + 2), 12), 3)*9)) + (floormod(((threadIdx.x_2*2) + 2), 3)*3)) + 2)]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 9)] = kernel[(((((blockIdx.x*18432) + (floordiv((threadIdx.x_2*2), 3)*4608)) + (rc.outer.outer*36)) + (floormod((floordiv((threadIdx.x_2*8), 3) + 1), 4)*9)) + (floormod((threadIdx.x_2*2), 3)*3))]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 10)] = kernel[((((((blockIdx.x*18432) + (floordiv((threadIdx.x_2*2), 3)*4608)) + (rc.outer.outer*36)) + (floormod((floordiv((threadIdx.x_2*8), 3) + 1), 4)*9)) + (floormod((threadIdx.x_2*2), 3)*3)) + 1)]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 11)] = kernel[((((((blockIdx.x*18432) + (floordiv((threadIdx.x_2*2), 3)*4608)) + (rc.outer.outer*36)) + (floormod((floordiv((threadIdx.x_2*8), 3) + 1), 4)*9)) + (floormod((threadIdx.x_2*2), 3)*3)) + 2)]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 12)] = kernel[(((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 1), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod(((threadIdx.x_2*8) + 4), 12), 3)*9)) + (floormod(((threadIdx.x_2*2) + 1), 3)*3))]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 13)] = kernel[((((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 1), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod(((threadIdx.x_2*8) + 4), 12), 3)*9)) + (floormod(((threadIdx.x_2*2) + 1), 3)*3)) + 1)]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 14)] = kernel[((((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 1), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod(((threadIdx.x_2*8) + 4), 12), 3)*9)) + (floormod(((threadIdx.x_2*2) + 1), 3)*3)) + 2)]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 15)] = kernel[(((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 1), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod(((threadIdx.x_2*8) + 5), 12), 3)*9)) + (floormod(((threadIdx.x_2*2) + 2), 3)*3))]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 16)] = kernel[((((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 1), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod(((threadIdx.x_2*8) + 5), 12), 3)*9)) + (floormod(((threadIdx.x_2*2) + 2), 3)*3)) + 1)]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 17)] = kernel[((((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 1), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod(((threadIdx.x_2*8) + 5), 12), 3)*9)) + (floormod(((threadIdx.x_2*2) + 2), 3)*3)) + 2)]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 18)] = kernel[(((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 1), 3)*4608)) + (rc.outer.outer*36)) + (floormod((floordiv((threadIdx.x_2*8), 3) + 2), 4)*9)) + (floormod((threadIdx.x_2*2), 3)*3))]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 19)] = kernel[((((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 1), 3)*4608)) + (rc.outer.outer*36)) + (floormod((floordiv((threadIdx.x_2*8), 3) + 2), 4)*9)) + (floormod((threadIdx.x_2*2), 3)*3)) + 1)]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 20)] = kernel[((((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 1), 3)*4608)) + (rc.outer.outer*36)) + (floormod((floordiv((threadIdx.x_2*8), 3) + 2), 4)*9)) + (floormod((threadIdx.x_2*2), 3)*3)) + 2)]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 21)] = kernel[(((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 1), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod(((threadIdx.x_2*8) + 7), 12), 3)*9)) + (floormod(((threadIdx.x_2*2) + 1), 3)*3))]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 22)] = kernel[((((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 1), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod(((threadIdx.x_2*8) + 7), 12), 3)*9)) + (floormod(((threadIdx.x_2*2) + 1), 3)*3)) + 1)]
              }
              if @tir.likely((threadIdx.x_2 < 6), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*24) + 23)] = kernel[((((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 1), 3)*4608)) + (rc.outer.outer*36)) + (floordiv(floormod(((threadIdx.x_2*8) + 7), 12), 3)*9)) + (floormod(((threadIdx.x_2*2) + 1), 3)*3)) + 2)]
              }
            }
            for (ry.outer.inner: int32, 0, 3) {
              let cse_var_49: int32 = (ry.outer.inner*3)
              let cse_var_48: int32 = (cse_var_49 + 99)
              let cse_var_47: int32 = (cse_var_49 + 92)
              let cse_var_46: int32 = (cse_var_49 + 91)
              let cse_var_45: int32 = (cse_var_49 + 90)
              let cse_var_44: int32 = (cse_var_49 + 9)
              let cse_var_43: int32 = (cse_var_49 + 83)
              let cse_var_42: int32 = (cse_var_49 + 82)
              let cse_var_41: int32 = (cse_var_49 + 81)
              let cse_var_40: int32 = (cse_var_49 + 74)
              let cse_var_39: int32 = (cse_var_49 + 73)
              let cse_var_38: int32 = (cse_var_49 + 72)
              let cse_var_37: int32 = (cse_var_49 + 65)
              let cse_var_36: int32 = (cse_var_49 + 64)
              let cse_var_35: int32 = (cse_var_49 + 63)
              let cse_var_34: int32 = (cse_var_49 + 56)
              let cse_var_33: int32 = (cse_var_49 + 55)
              let cse_var_32: int32 = (cse_var_49 + 54)
              let cse_var_31: int32 = (cse_var_49 + 47)
              let cse_var_30: int32 = (cse_var_49 + 46)
              let cse_var_29: int32 = (cse_var_49 + 45)
              let cse_var_28: int32 = (cse_var_49 + 38)
              let cse_var_27: int32 = (cse_var_49 + 37)
              let cse_var_26: int32 = (cse_var_49 + 36)
              let cse_var_25: int32 = (cse_var_49 + 29)
              let cse_var_24: int32 = (cse_var_49 + 28)
              let cse_var_23: int32 = (cse_var_49 + 27)
              let cse_var_22: int32 = (cse_var_49 + 20)
              let cse_var_21: int32 = (cse_var_49 + 2)
              let cse_var_20: int32 = (cse_var_49 + 19)
              let cse_var_19: int32 = (cse_var_49 + 18)
              let cse_var_18: int32 = (cse_var_49 + 137)
              let cse_var_17: int32 = (cse_var_49 + 136)
              let cse_var_16: int32 = (cse_var_49 + 135)
              let cse_var_15: int32 = (cse_var_49 + 128)
              let cse_var_14: int32 = (cse_var_49 + 127)
              let cse_var_13: int32 = (cse_var_49 + 126)
              let cse_var_12: int32 = (cse_var_49 + 119)
              let cse_var_11: int32 = (cse_var_49 + 118)
              let cse_var_10: int32 = (cse_var_49 + 117)
              let cse_var_9: int32 = (cse_var_49 + 110)
              let cse_var_8: int32 = (cse_var_49 + 11)
              let cse_var_7: int32 = (cse_var_49 + 109)
              let cse_var_6: int32 = (cse_var_49 + 108)
              let cse_var_5: int32 = (cse_var_49 + 101)
              let cse_var_4: int32 = (cse_var_49 + 100)
              let cse_var_3: int32 = (cse_var_49 + 10)
              let cse_var_2: int32 = (cse_var_49 + 1)
               {
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((threadIdx.x*9) + (ry.outer.inner*9))]*kernel.shared_1[cse_var_49]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 1)]*kernel.shared_1[cse_var_49]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 2)]*kernel.shared_1[cse_var_49]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 3)]*kernel.shared_1[cse_var_49]))
                conv2d_nchw_1[16] = (conv2d_nchw_1[16] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 4)]*kernel.shared_1[cse_var_49]))
                conv2d_nchw_1[20] = (conv2d_nchw_1[20] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 5)]*kernel.shared_1[cse_var_49]))
                conv2d_nchw_1[24] = (conv2d_nchw_1[24] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 6)]*kernel.shared_1[cse_var_49]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((threadIdx.x*9) + (ry.outer.inner*9))]*kernel.shared_1[cse_var_26]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 1)]*kernel.shared_1[cse_var_26]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 2)]*kernel.shared_1[cse_var_26]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 3)]*kernel.shared_1[cse_var_26]))
                conv2d_nchw_1[17] = (conv2d_nchw_1[17] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 4)]*kernel.shared_1[cse_var_26]))
                conv2d_nchw_1[21] = (conv2d_nchw_1[21] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 5)]*kernel.shared_1[cse_var_26]))
                conv2d_nchw_1[25] = (conv2d_nchw_1[25] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 6)]*kernel.shared_1[cse_var_26]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 81)]*kernel.shared_1[cse_var_44]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 82)]*kernel.shared_1[cse_var_44]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 83)]*kernel.shared_1[cse_var_44]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 84)]*kernel.shared_1[cse_var_44]))
                conv2d_nchw_1[16] = (conv2d_nchw_1[16] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 85)]*kernel.shared_1[cse_var_44]))
                conv2d_nchw_1[20] = (conv2d_nchw_1[20] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 86)]*kernel.shared_1[cse_var_44]))
                conv2d_nchw_1[24] = (conv2d_nchw_1[24] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 87)]*kernel.shared_1[cse_var_44]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 81)]*kernel.shared_1[cse_var_29]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 82)]*kernel.shared_1[cse_var_29]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 83)]*kernel.shared_1[cse_var_29]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 84)]*kernel.shared_1[cse_var_29]))
                conv2d_nchw_1[17] = (conv2d_nchw_1[17] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 85)]*kernel.shared_1[cse_var_29]))
                conv2d_nchw_1[21] = (conv2d_nchw_1[21] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 86)]*kernel.shared_1[cse_var_29]))
                conv2d_nchw_1[25] = (conv2d_nchw_1[25] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 87)]*kernel.shared_1[cse_var_29]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 162)]*kernel.shared_1[cse_var_19]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 163)]*kernel.shared_1[cse_var_19]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 164)]*kernel.shared_1[cse_var_19]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 165)]*kernel.shared_1[cse_var_19]))
                conv2d_nchw_1[16] = (conv2d_nchw_1[16] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 166)]*kernel.shared_1[cse_var_19]))
                conv2d_nchw_1[20] = (conv2d_nchw_1[20] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 167)]*kernel.shared_1[cse_var_19]))
                conv2d_nchw_1[24] = (conv2d_nchw_1[24] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 168)]*kernel.shared_1[cse_var_19]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 162)]*kernel.shared_1[cse_var_32]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 163)]*kernel.shared_1[cse_var_32]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 164)]*kernel.shared_1[cse_var_32]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 165)]*kernel.shared_1[cse_var_32]))
                conv2d_nchw_1[17] = (conv2d_nchw_1[17] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 166)]*kernel.shared_1[cse_var_32]))
                conv2d_nchw_1[21] = (conv2d_nchw_1[21] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 167)]*kernel.shared_1[cse_var_32]))
                conv2d_nchw_1[25] = (conv2d_nchw_1[25] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 168)]*kernel.shared_1[cse_var_32]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 243)]*kernel.shared_1[cse_var_23]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 244)]*kernel.shared_1[cse_var_23]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 245)]*kernel.shared_1[cse_var_23]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 246)]*kernel.shared_1[cse_var_23]))
                conv2d_nchw_1[16] = (conv2d_nchw_1[16] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 247)]*kernel.shared_1[cse_var_23]))
                conv2d_nchw_1[20] = (conv2d_nchw_1[20] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 248)]*kernel.shared_1[cse_var_23]))
                conv2d_nchw_1[24] = (conv2d_nchw_1[24] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 249)]*kernel.shared_1[cse_var_23]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 243)]*kernel.shared_1[cse_var_35]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 244)]*kernel.shared_1[cse_var_35]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 245)]*kernel.shared_1[cse_var_35]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 246)]*kernel.shared_1[cse_var_35]))
                conv2d_nchw_1[17] = (conv2d_nchw_1[17] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 247)]*kernel.shared_1[cse_var_35]))
                conv2d_nchw_1[21] = (conv2d_nchw_1[21] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 248)]*kernel.shared_1[cse_var_35]))
                conv2d_nchw_1[25] = (conv2d_nchw_1[25] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 249)]*kernel.shared_1[cse_var_35]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((threadIdx.x*9) + (ry.outer.inner*9))]*kernel.shared_1[cse_var_38]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 1)]*kernel.shared_1[cse_var_38]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 2)]*kernel.shared_1[cse_var_38]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 3)]*kernel.shared_1[cse_var_38]))
                conv2d_nchw_1[18] = (conv2d_nchw_1[18] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 4)]*kernel.shared_1[cse_var_38]))
                conv2d_nchw_1[22] = (conv2d_nchw_1[22] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 5)]*kernel.shared_1[cse_var_38]))
                conv2d_nchw_1[26] = (conv2d_nchw_1[26] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 6)]*kernel.shared_1[cse_var_38]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((threadIdx.x*9) + (ry.outer.inner*9))]*kernel.shared_1[cse_var_6]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 1)]*kernel.shared_1[cse_var_6]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 2)]*kernel.shared_1[cse_var_6]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 3)]*kernel.shared_1[cse_var_6]))
                conv2d_nchw_1[19] = (conv2d_nchw_1[19] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 4)]*kernel.shared_1[cse_var_6]))
                conv2d_nchw_1[23] = (conv2d_nchw_1[23] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 5)]*kernel.shared_1[cse_var_6]))
                conv2d_nchw_1[27] = (conv2d_nchw_1[27] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 6)]*kernel.shared_1[cse_var_6]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 81)]*kernel.shared_1[cse_var_41]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 82)]*kernel.shared_1[cse_var_41]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 83)]*kernel.shared_1[cse_var_41]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 84)]*kernel.shared_1[cse_var_41]))
                conv2d_nchw_1[18] = (conv2d_nchw_1[18] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 85)]*kernel.shared_1[cse_var_41]))
                conv2d_nchw_1[22] = (conv2d_nchw_1[22] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 86)]*kernel.shared_1[cse_var_41]))
                conv2d_nchw_1[26] = (conv2d_nchw_1[26] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 87)]*kernel.shared_1[cse_var_41]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 81)]*kernel.shared_1[cse_var_10]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 82)]*kernel.shared_1[cse_var_10]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 83)]*kernel.shared_1[cse_var_10]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 84)]*kernel.shared_1[cse_var_10]))
                conv2d_nchw_1[19] = (conv2d_nchw_1[19] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 85)]*kernel.shared_1[cse_var_10]))
                conv2d_nchw_1[23] = (conv2d_nchw_1[23] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 86)]*kernel.shared_1[cse_var_10]))
                conv2d_nchw_1[27] = (conv2d_nchw_1[27] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 87)]*kernel.shared_1[cse_var_10]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 162)]*kernel.shared_1[cse_var_45]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 163)]*kernel.shared_1[cse_var_45]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 164)]*kernel.shared_1[cse_var_45]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 165)]*kernel.shared_1[cse_var_45]))
                conv2d_nchw_1[18] = (conv2d_nchw_1[18] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 166)]*kernel.shared_1[cse_var_45]))
                conv2d_nchw_1[22] = (conv2d_nchw_1[22] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 167)]*kernel.shared_1[cse_var_45]))
                conv2d_nchw_1[26] = (conv2d_nchw_1[26] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 168)]*kernel.shared_1[cse_var_45]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 162)]*kernel.shared_1[cse_var_13]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 163)]*kernel.shared_1[cse_var_13]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 164)]*kernel.shared_1[cse_var_13]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 165)]*kernel.shared_1[cse_var_13]))
                conv2d_nchw_1[19] = (conv2d_nchw_1[19] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 166)]*kernel.shared_1[cse_var_13]))
                conv2d_nchw_1[23] = (conv2d_nchw_1[23] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 167)]*kernel.shared_1[cse_var_13]))
                conv2d_nchw_1[27] = (conv2d_nchw_1[27] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 168)]*kernel.shared_1[cse_var_13]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 243)]*kernel.shared_1[cse_var_48]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 244)]*kernel.shared_1[cse_var_48]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 245)]*kernel.shared_1[cse_var_48]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 246)]*kernel.shared_1[cse_var_48]))
                conv2d_nchw_1[18] = (conv2d_nchw_1[18] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 247)]*kernel.shared_1[cse_var_48]))
                conv2d_nchw_1[22] = (conv2d_nchw_1[22] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 248)]*kernel.shared_1[cse_var_48]))
                conv2d_nchw_1[26] = (conv2d_nchw_1[26] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 249)]*kernel.shared_1[cse_var_48]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 243)]*kernel.shared_1[cse_var_16]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 244)]*kernel.shared_1[cse_var_16]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 245)]*kernel.shared_1[cse_var_16]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 246)]*kernel.shared_1[cse_var_16]))
                conv2d_nchw_1[19] = (conv2d_nchw_1[19] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 247)]*kernel.shared_1[cse_var_16]))
                conv2d_nchw_1[23] = (conv2d_nchw_1[23] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 248)]*kernel.shared_1[cse_var_16]))
                conv2d_nchw_1[27] = (conv2d_nchw_1[27] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 249)]*kernel.shared_1[cse_var_16]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 1)]*kernel.shared_1[cse_var_2]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 2)]*kernel.shared_1[cse_var_2]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 3)]*kernel.shared_1[cse_var_2]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 4)]*kernel.shared_1[cse_var_2]))
                conv2d_nchw_1[16] = (conv2d_nchw_1[16] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 5)]*kernel.shared_1[cse_var_2]))
                conv2d_nchw_1[20] = (conv2d_nchw_1[20] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 6)]*kernel.shared_1[cse_var_2]))
                conv2d_nchw_1[24] = (conv2d_nchw_1[24] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 7)]*kernel.shared_1[cse_var_2]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 1)]*kernel.shared_1[cse_var_27]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 2)]*kernel.shared_1[cse_var_27]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 3)]*kernel.shared_1[cse_var_27]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 4)]*kernel.shared_1[cse_var_27]))
                conv2d_nchw_1[17] = (conv2d_nchw_1[17] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 5)]*kernel.shared_1[cse_var_27]))
                conv2d_nchw_1[21] = (conv2d_nchw_1[21] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 6)]*kernel.shared_1[cse_var_27]))
                conv2d_nchw_1[25] = (conv2d_nchw_1[25] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 7)]*kernel.shared_1[cse_var_27]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 82)]*kernel.shared_1[cse_var_3]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 83)]*kernel.shared_1[cse_var_3]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 84)]*kernel.shared_1[cse_var_3]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 85)]*kernel.shared_1[cse_var_3]))
                conv2d_nchw_1[16] = (conv2d_nchw_1[16] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 86)]*kernel.shared_1[cse_var_3]))
                conv2d_nchw_1[20] = (conv2d_nchw_1[20] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 87)]*kernel.shared_1[cse_var_3]))
                conv2d_nchw_1[24] = (conv2d_nchw_1[24] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 88)]*kernel.shared_1[cse_var_3]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 82)]*kernel.shared_1[cse_var_30]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 83)]*kernel.shared_1[cse_var_30]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 84)]*kernel.shared_1[cse_var_30]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 85)]*kernel.shared_1[cse_var_30]))
                conv2d_nchw_1[17] = (conv2d_nchw_1[17] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 86)]*kernel.shared_1[cse_var_30]))
                conv2d_nchw_1[21] = (conv2d_nchw_1[21] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 87)]*kernel.shared_1[cse_var_30]))
                conv2d_nchw_1[25] = (conv2d_nchw_1[25] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 88)]*kernel.shared_1[cse_var_30]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 163)]*kernel.shared_1[cse_var_20]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 164)]*kernel.shared_1[cse_var_20]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 165)]*kernel.shared_1[cse_var_20]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 166)]*kernel.shared_1[cse_var_20]))
                conv2d_nchw_1[16] = (conv2d_nchw_1[16] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 167)]*kernel.shared_1[cse_var_20]))
                conv2d_nchw_1[20] = (conv2d_nchw_1[20] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 168)]*kernel.shared_1[cse_var_20]))
                conv2d_nchw_1[24] = (conv2d_nchw_1[24] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 169)]*kernel.shared_1[cse_var_20]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 163)]*kernel.shared_1[cse_var_33]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 164)]*kernel.shared_1[cse_var_33]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 165)]*kernel.shared_1[cse_var_33]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 166)]*kernel.shared_1[cse_var_33]))
                conv2d_nchw_1[17] = (conv2d_nchw_1[17] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 167)]*kernel.shared_1[cse_var_33]))
                conv2d_nchw_1[21] = (conv2d_nchw_1[21] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 168)]*kernel.shared_1[cse_var_33]))
                conv2d_nchw_1[25] = (conv2d_nchw_1[25] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 169)]*kernel.shared_1[cse_var_33]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 244)]*kernel.shared_1[cse_var_24]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 245)]*kernel.shared_1[cse_var_24]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 246)]*kernel.shared_1[cse_var_24]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 247)]*kernel.shared_1[cse_var_24]))
                conv2d_nchw_1[16] = (conv2d_nchw_1[16] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 248)]*kernel.shared_1[cse_var_24]))
                conv2d_nchw_1[20] = (conv2d_nchw_1[20] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 249)]*kernel.shared_1[cse_var_24]))
                conv2d_nchw_1[24] = (conv2d_nchw_1[24] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 250)]*kernel.shared_1[cse_var_24]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 244)]*kernel.shared_1[cse_var_36]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 245)]*kernel.shared_1[cse_var_36]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 246)]*kernel.shared_1[cse_var_36]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 247)]*kernel.shared_1[cse_var_36]))
                conv2d_nchw_1[17] = (conv2d_nchw_1[17] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 248)]*kernel.shared_1[cse_var_36]))
                conv2d_nchw_1[21] = (conv2d_nchw_1[21] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 249)]*kernel.shared_1[cse_var_36]))
                conv2d_nchw_1[25] = (conv2d_nchw_1[25] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 250)]*kernel.shared_1[cse_var_36]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 1)]*kernel.shared_1[cse_var_39]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 2)]*kernel.shared_1[cse_var_39]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 3)]*kernel.shared_1[cse_var_39]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 4)]*kernel.shared_1[cse_var_39]))
                conv2d_nchw_1[18] = (conv2d_nchw_1[18] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 5)]*kernel.shared_1[cse_var_39]))
                conv2d_nchw_1[22] = (conv2d_nchw_1[22] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 6)]*kernel.shared_1[cse_var_39]))
                conv2d_nchw_1[26] = (conv2d_nchw_1[26] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 7)]*kernel.shared_1[cse_var_39]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 1)]*kernel.shared_1[cse_var_7]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 2)]*kernel.shared_1[cse_var_7]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 3)]*kernel.shared_1[cse_var_7]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 4)]*kernel.shared_1[cse_var_7]))
                conv2d_nchw_1[19] = (conv2d_nchw_1[19] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 5)]*kernel.shared_1[cse_var_7]))
                conv2d_nchw_1[23] = (conv2d_nchw_1[23] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 6)]*kernel.shared_1[cse_var_7]))
                conv2d_nchw_1[27] = (conv2d_nchw_1[27] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 7)]*kernel.shared_1[cse_var_7]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 82)]*kernel.shared_1[cse_var_42]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 83)]*kernel.shared_1[cse_var_42]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 84)]*kernel.shared_1[cse_var_42]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 85)]*kernel.shared_1[cse_var_42]))
                conv2d_nchw_1[18] = (conv2d_nchw_1[18] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 86)]*kernel.shared_1[cse_var_42]))
                conv2d_nchw_1[22] = (conv2d_nchw_1[22] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 87)]*kernel.shared_1[cse_var_42]))
                conv2d_nchw_1[26] = (conv2d_nchw_1[26] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 88)]*kernel.shared_1[cse_var_42]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 82)]*kernel.shared_1[cse_var_11]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 83)]*kernel.shared_1[cse_var_11]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 84)]*kernel.shared_1[cse_var_11]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 85)]*kernel.shared_1[cse_var_11]))
                conv2d_nchw_1[19] = (conv2d_nchw_1[19] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 86)]*kernel.shared_1[cse_var_11]))
                conv2d_nchw_1[23] = (conv2d_nchw_1[23] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 87)]*kernel.shared_1[cse_var_11]))
                conv2d_nchw_1[27] = (conv2d_nchw_1[27] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 88)]*kernel.shared_1[cse_var_11]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 163)]*kernel.shared_1[cse_var_46]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 164)]*kernel.shared_1[cse_var_46]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 165)]*kernel.shared_1[cse_var_46]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 166)]*kernel.shared_1[cse_var_46]))
                conv2d_nchw_1[18] = (conv2d_nchw_1[18] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 167)]*kernel.shared_1[cse_var_46]))
                conv2d_nchw_1[22] = (conv2d_nchw_1[22] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 168)]*kernel.shared_1[cse_var_46]))
                conv2d_nchw_1[26] = (conv2d_nchw_1[26] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 169)]*kernel.shared_1[cse_var_46]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 163)]*kernel.shared_1[cse_var_14]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 164)]*kernel.shared_1[cse_var_14]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 165)]*kernel.shared_1[cse_var_14]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 166)]*kernel.shared_1[cse_var_14]))
                conv2d_nchw_1[19] = (conv2d_nchw_1[19] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 167)]*kernel.shared_1[cse_var_14]))
                conv2d_nchw_1[23] = (conv2d_nchw_1[23] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 168)]*kernel.shared_1[cse_var_14]))
                conv2d_nchw_1[27] = (conv2d_nchw_1[27] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 169)]*kernel.shared_1[cse_var_14]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 244)]*kernel.shared_1[cse_var_4]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 245)]*kernel.shared_1[cse_var_4]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 246)]*kernel.shared_1[cse_var_4]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 247)]*kernel.shared_1[cse_var_4]))
                conv2d_nchw_1[18] = (conv2d_nchw_1[18] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 248)]*kernel.shared_1[cse_var_4]))
                conv2d_nchw_1[22] = (conv2d_nchw_1[22] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 249)]*kernel.shared_1[cse_var_4]))
                conv2d_nchw_1[26] = (conv2d_nchw_1[26] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 250)]*kernel.shared_1[cse_var_4]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 244)]*kernel.shared_1[cse_var_17]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 245)]*kernel.shared_1[cse_var_17]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 246)]*kernel.shared_1[cse_var_17]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 247)]*kernel.shared_1[cse_var_17]))
                conv2d_nchw_1[19] = (conv2d_nchw_1[19] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 248)]*kernel.shared_1[cse_var_17]))
                conv2d_nchw_1[23] = (conv2d_nchw_1[23] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 249)]*kernel.shared_1[cse_var_17]))
                conv2d_nchw_1[27] = (conv2d_nchw_1[27] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 250)]*kernel.shared_1[cse_var_17]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 2)]*kernel.shared_1[cse_var_21]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 3)]*kernel.shared_1[cse_var_21]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 4)]*kernel.shared_1[cse_var_21]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 5)]*kernel.shared_1[cse_var_21]))
                conv2d_nchw_1[16] = (conv2d_nchw_1[16] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 6)]*kernel.shared_1[cse_var_21]))
                conv2d_nchw_1[20] = (conv2d_nchw_1[20] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 7)]*kernel.shared_1[cse_var_21]))
                conv2d_nchw_1[24] = (conv2d_nchw_1[24] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 8)]*kernel.shared_1[cse_var_21]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 2)]*kernel.shared_1[cse_var_28]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 3)]*kernel.shared_1[cse_var_28]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 4)]*kernel.shared_1[cse_var_28]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 5)]*kernel.shared_1[cse_var_28]))
                conv2d_nchw_1[17] = (conv2d_nchw_1[17] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 6)]*kernel.shared_1[cse_var_28]))
                conv2d_nchw_1[21] = (conv2d_nchw_1[21] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 7)]*kernel.shared_1[cse_var_28]))
                conv2d_nchw_1[25] = (conv2d_nchw_1[25] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 8)]*kernel.shared_1[cse_var_28]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 83)]*kernel.shared_1[cse_var_8]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 84)]*kernel.shared_1[cse_var_8]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 85)]*kernel.shared_1[cse_var_8]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 86)]*kernel.shared_1[cse_var_8]))
                conv2d_nchw_1[16] = (conv2d_nchw_1[16] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 87)]*kernel.shared_1[cse_var_8]))
                conv2d_nchw_1[20] = (conv2d_nchw_1[20] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 88)]*kernel.shared_1[cse_var_8]))
                conv2d_nchw_1[24] = (conv2d_nchw_1[24] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 89)]*kernel.shared_1[cse_var_8]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 83)]*kernel.shared_1[cse_var_31]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 84)]*kernel.shared_1[cse_var_31]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 85)]*kernel.shared_1[cse_var_31]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 86)]*kernel.shared_1[cse_var_31]))
                conv2d_nchw_1[17] = (conv2d_nchw_1[17] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 87)]*kernel.shared_1[cse_var_31]))
                conv2d_nchw_1[21] = (conv2d_nchw_1[21] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 88)]*kernel.shared_1[cse_var_31]))
                conv2d_nchw_1[25] = (conv2d_nchw_1[25] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 89)]*kernel.shared_1[cse_var_31]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 164)]*kernel.shared_1[cse_var_22]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 165)]*kernel.shared_1[cse_var_22]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 166)]*kernel.shared_1[cse_var_22]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 167)]*kernel.shared_1[cse_var_22]))
                conv2d_nchw_1[16] = (conv2d_nchw_1[16] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 168)]*kernel.shared_1[cse_var_22]))
                conv2d_nchw_1[20] = (conv2d_nchw_1[20] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 169)]*kernel.shared_1[cse_var_22]))
                conv2d_nchw_1[24] = (conv2d_nchw_1[24] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 170)]*kernel.shared_1[cse_var_22]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 164)]*kernel.shared_1[cse_var_34]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 165)]*kernel.shared_1[cse_var_34]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 166)]*kernel.shared_1[cse_var_34]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 167)]*kernel.shared_1[cse_var_34]))
                conv2d_nchw_1[17] = (conv2d_nchw_1[17] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 168)]*kernel.shared_1[cse_var_34]))
                conv2d_nchw_1[21] = (conv2d_nchw_1[21] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 169)]*kernel.shared_1[cse_var_34]))
                conv2d_nchw_1[25] = (conv2d_nchw_1[25] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 170)]*kernel.shared_1[cse_var_34]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 245)]*kernel.shared_1[cse_var_25]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 246)]*kernel.shared_1[cse_var_25]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 247)]*kernel.shared_1[cse_var_25]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 248)]*kernel.shared_1[cse_var_25]))
                conv2d_nchw_1[16] = (conv2d_nchw_1[16] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 249)]*kernel.shared_1[cse_var_25]))
                conv2d_nchw_1[20] = (conv2d_nchw_1[20] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 250)]*kernel.shared_1[cse_var_25]))
                conv2d_nchw_1[24] = (conv2d_nchw_1[24] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 251)]*kernel.shared_1[cse_var_25]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 245)]*kernel.shared_1[cse_var_37]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 246)]*kernel.shared_1[cse_var_37]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 247)]*kernel.shared_1[cse_var_37]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 248)]*kernel.shared_1[cse_var_37]))
                conv2d_nchw_1[17] = (conv2d_nchw_1[17] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 249)]*kernel.shared_1[cse_var_37]))
                conv2d_nchw_1[21] = (conv2d_nchw_1[21] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 250)]*kernel.shared_1[cse_var_37]))
                conv2d_nchw_1[25] = (conv2d_nchw_1[25] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 251)]*kernel.shared_1[cse_var_37]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 2)]*kernel.shared_1[cse_var_40]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 3)]*kernel.shared_1[cse_var_40]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 4)]*kernel.shared_1[cse_var_40]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 5)]*kernel.shared_1[cse_var_40]))
                conv2d_nchw_1[18] = (conv2d_nchw_1[18] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 6)]*kernel.shared_1[cse_var_40]))
                conv2d_nchw_1[22] = (conv2d_nchw_1[22] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 7)]*kernel.shared_1[cse_var_40]))
                conv2d_nchw_1[26] = (conv2d_nchw_1[26] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 8)]*kernel.shared_1[cse_var_40]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 2)]*kernel.shared_1[cse_var_9]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 3)]*kernel.shared_1[cse_var_9]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 4)]*kernel.shared_1[cse_var_9]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 5)]*kernel.shared_1[cse_var_9]))
                conv2d_nchw_1[19] = (conv2d_nchw_1[19] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 6)]*kernel.shared_1[cse_var_9]))
                conv2d_nchw_1[23] = (conv2d_nchw_1[23] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 7)]*kernel.shared_1[cse_var_9]))
                conv2d_nchw_1[27] = (conv2d_nchw_1[27] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 8)]*kernel.shared_1[cse_var_9]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 83)]*kernel.shared_1[cse_var_43]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 84)]*kernel.shared_1[cse_var_43]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 85)]*kernel.shared_1[cse_var_43]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 86)]*kernel.shared_1[cse_var_43]))
                conv2d_nchw_1[18] = (conv2d_nchw_1[18] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 87)]*kernel.shared_1[cse_var_43]))
                conv2d_nchw_1[22] = (conv2d_nchw_1[22] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 88)]*kernel.shared_1[cse_var_43]))
                conv2d_nchw_1[26] = (conv2d_nchw_1[26] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 89)]*kernel.shared_1[cse_var_43]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 83)]*kernel.shared_1[cse_var_12]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 84)]*kernel.shared_1[cse_var_12]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 85)]*kernel.shared_1[cse_var_12]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 86)]*kernel.shared_1[cse_var_12]))
                conv2d_nchw_1[19] = (conv2d_nchw_1[19] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 87)]*kernel.shared_1[cse_var_12]))
                conv2d_nchw_1[23] = (conv2d_nchw_1[23] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 88)]*kernel.shared_1[cse_var_12]))
                conv2d_nchw_1[27] = (conv2d_nchw_1[27] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 89)]*kernel.shared_1[cse_var_12]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 164)]*kernel.shared_1[cse_var_47]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 165)]*kernel.shared_1[cse_var_47]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 166)]*kernel.shared_1[cse_var_47]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 167)]*kernel.shared_1[cse_var_47]))
                conv2d_nchw_1[18] = (conv2d_nchw_1[18] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 168)]*kernel.shared_1[cse_var_47]))
                conv2d_nchw_1[22] = (conv2d_nchw_1[22] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 169)]*kernel.shared_1[cse_var_47]))
                conv2d_nchw_1[26] = (conv2d_nchw_1[26] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 170)]*kernel.shared_1[cse_var_47]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 164)]*kernel.shared_1[cse_var_15]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 165)]*kernel.shared_1[cse_var_15]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 166)]*kernel.shared_1[cse_var_15]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 167)]*kernel.shared_1[cse_var_15]))
                conv2d_nchw_1[19] = (conv2d_nchw_1[19] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 168)]*kernel.shared_1[cse_var_15]))
                conv2d_nchw_1[23] = (conv2d_nchw_1[23] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 169)]*kernel.shared_1[cse_var_15]))
                conv2d_nchw_1[27] = (conv2d_nchw_1[27] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 170)]*kernel.shared_1[cse_var_15]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 245)]*kernel.shared_1[cse_var_5]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 246)]*kernel.shared_1[cse_var_5]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 247)]*kernel.shared_1[cse_var_5]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 248)]*kernel.shared_1[cse_var_5]))
                conv2d_nchw_1[18] = (conv2d_nchw_1[18] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 249)]*kernel.shared_1[cse_var_5]))
                conv2d_nchw_1[22] = (conv2d_nchw_1[22] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 250)]*kernel.shared_1[cse_var_5]))
                conv2d_nchw_1[26] = (conv2d_nchw_1[26] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 251)]*kernel.shared_1[cse_var_5]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 245)]*kernel.shared_1[cse_var_18]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 246)]*kernel.shared_1[cse_var_18]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 247)]*kernel.shared_1[cse_var_18]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 248)]*kernel.shared_1[cse_var_18]))
                conv2d_nchw_1[19] = (conv2d_nchw_1[19] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 249)]*kernel.shared_1[cse_var_18]))
                conv2d_nchw_1[23] = (conv2d_nchw_1[23] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 250)]*kernel.shared_1[cse_var_18]))
                conv2d_nchw_1[27] = (conv2d_nchw_1[27] + (pad_temp.shared_1[(((threadIdx.x*9) + (ry.outer.inner*9)) + 251)]*kernel.shared_1[cse_var_18]))
              }
            }
          }
        }
        for (i1.inner: int32, 0, 4) {
          compute[(((blockIdx.x*196) + (i1.inner*49)) + (threadIdx.x*7))] = max((conv2d_nchw_1[i1.inner] + bias[((blockIdx.x*4) + i1.inner)]), 0f32)
          compute[((((blockIdx.x*196) + (i1.inner*49)) + (threadIdx.x*7)) + 1)] = max((conv2d_nchw_1[(i1.inner + 4)] + bias[((blockIdx.x*4) + i1.inner)]), 0f32)
          compute[((((blockIdx.x*196) + (i1.inner*49)) + (threadIdx.x*7)) + 2)] = max((conv2d_nchw_1[(i1.inner + 8)] + bias[((blockIdx.x*4) + i1.inner)]), 0f32)
          compute[((((blockIdx.x*196) + (i1.inner*49)) + (threadIdx.x*7)) + 3)] = max((conv2d_nchw_1[(i1.inner + 12)] + bias[((blockIdx.x*4) + i1.inner)]), 0f32)
          compute[((((blockIdx.x*196) + (i1.inner*49)) + (threadIdx.x*7)) + 4)] = max((conv2d_nchw_1[(i1.inner + 16)] + bias[((blockIdx.x*4) + i1.inner)]), 0f32)
          compute[((((blockIdx.x*196) + (i1.inner*49)) + (threadIdx.x*7)) + 5)] = max((conv2d_nchw_1[(i1.inner + 20)] + bias[((blockIdx.x*4) + i1.inner)]), 0f32)
          compute[((((blockIdx.x*196) + (i1.inner*49)) + (threadIdx.x*7)) + 6)] = max((conv2d_nchw_1[(i1.inner + 24)] + bias[((blockIdx.x*4) + i1.inner)]), 0f32)
        }
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 141-144

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 144-171

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.381 ms




.. GENERATED FROM PYTHON SOURCE LINES 172-177

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 179-182

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=2)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=2)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=7)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=4)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=1)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=3)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=3)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=4)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=1)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=7)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=24)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=7)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=9)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=7)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(7) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[28];
      __shared__ float pad_temp_shared[324];
      __shared__ float kernel_shared[144];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[8] = 0.000000e+00f;
      conv2d_nchw[12] = 0.000000e+00f;
      conv2d_nchw[16] = 0.000000e+00f;
      conv2d_nchw[20] = 0.000000e+00f;
      conv2d_nchw[24] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[9] = 0.000000e+00f;
      conv2d_nchw[13] = 0.000000e+00f;
      conv2d_nchw[17] = 0.000000e+00f;
      conv2d_nchw[21] = 0.000000e+00f;
      conv2d_nchw[25] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      conv2d_nchw[10] = 0.000000e+00f;
      conv2d_nchw[14] = 0.000000e+00f;
      conv2d_nchw[18] = 0.000000e+00f;
      conv2d_nchw[22] = 0.000000e+00f;
      conv2d_nchw[26] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[7] = 0.000000e+00f;
      conv2d_nchw[11] = 0.000000e+00f;
      conv2d_nchw[15] = 0.000000e+00f;
      conv2d_nchw[19] = 0.000000e+00f;
      conv2d_nchw[23] = 0.000000e+00f;
      conv2d_nchw[27] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 128; ++rc_outer_outer) {
        __syncthreads();
        pad_temp_shared[(((int)threadIdx.x) * 9)] = 0.000000e+00f;
        pad_temp_shared[((((int)threadIdx.x) * 9) + 1)] = ((1 <= ((int)threadIdx.x)) ? data[(((rc_outer_outer * 196) + (((int)threadIdx.x) * 7)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 2)] = ((1 <= ((int)threadIdx.x)) ? data[(((rc_outer_outer * 196) + (((int)threadIdx.x) * 7)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 3)] = ((1 <= ((int)threadIdx.x)) ? data[(((rc_outer_outer * 196) + (((int)threadIdx.x) * 7)) - 5)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 4)] = ((1 <= ((int)threadIdx.x)) ? data[(((rc_outer_outer * 196) + (((int)threadIdx.x) * 7)) - 4)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 5)] = ((1 <= ((int)threadIdx.x)) ? data[(((rc_outer_outer * 196) + (((int)threadIdx.x) * 7)) - 3)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 6)] = ((1 <= ((int)threadIdx.x)) ? data[(((rc_outer_outer * 196) + (((int)threadIdx.x) * 7)) - 2)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 7)] = ((1 <= ((int)threadIdx.x)) ? data[(((rc_outer_outer * 196) + (((int)threadIdx.x) * 7)) - 1)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 8)] = 0.000000e+00f;
        pad_temp_shared[((((int)threadIdx.x) * 9) + 63)] = 0.000000e+00f;
        pad_temp_shared[((((int)threadIdx.x) * 9) + 64)] = (((1 <= ((((int)threadIdx.x) + 7) % 9)) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 7) / 9) * 49)) + (((((int)threadIdx.x) + 7) % 9) * 7)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 65)] = (((1 <= ((((int)threadIdx.x) + 7) % 9)) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 7) / 9) * 49)) + (((((int)threadIdx.x) + 7) % 9) * 7)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 66)] = (((1 <= ((((int)threadIdx.x) + 7) % 9)) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 7) / 9) * 49)) + (((((int)threadIdx.x) + 7) % 9) * 7)) - 5)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 67)] = (((1 <= ((((int)threadIdx.x) + 7) % 9)) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 7) / 9) * 49)) + (((((int)threadIdx.x) + 7) % 9) * 7)) - 4)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 68)] = (((1 <= ((((int)threadIdx.x) + 7) % 9)) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 7) / 9) * 49)) + (((((int)threadIdx.x) + 7) % 9) * 7)) - 3)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 69)] = (((1 <= ((((int)threadIdx.x) + 7) % 9)) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 7) / 9) * 49)) + (((((int)threadIdx.x) + 7) % 9) * 7)) - 2)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 70)] = (((1 <= ((((int)threadIdx.x) + 7) % 9)) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 7) / 9) * 49)) + (((((int)threadIdx.x) + 7) % 9) * 7)) - 1)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 71)] = 0.000000e+00f;
        pad_temp_shared[((((int)threadIdx.x) * 9) + 126)] = 0.000000e+00f;
        pad_temp_shared[((((int)threadIdx.x) * 9) + 127)] = (((1 <= ((((int)threadIdx.x) + 5) % 9)) && (((((int)threadIdx.x) + 5) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 14) / 9) * 49)) + (((((int)threadIdx.x) + 5) % 9) * 7)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 128)] = (((1 <= ((((int)threadIdx.x) + 5) % 9)) && (((((int)threadIdx.x) + 5) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 14) / 9) * 49)) + (((((int)threadIdx.x) + 5) % 9) * 7)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 129)] = (((1 <= ((((int)threadIdx.x) + 5) % 9)) && (((((int)threadIdx.x) + 5) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 14) / 9) * 49)) + (((((int)threadIdx.x) + 5) % 9) * 7)) - 5)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 130)] = (((1 <= ((((int)threadIdx.x) + 5) % 9)) && (((((int)threadIdx.x) + 5) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 14) / 9) * 49)) + (((((int)threadIdx.x) + 5) % 9) * 7)) - 4)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 131)] = (((1 <= ((((int)threadIdx.x) + 5) % 9)) && (((((int)threadIdx.x) + 5) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 14) / 9) * 49)) + (((((int)threadIdx.x) + 5) % 9) * 7)) - 3)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 132)] = (((1 <= ((((int)threadIdx.x) + 5) % 9)) && (((((int)threadIdx.x) + 5) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 14) / 9) * 49)) + (((((int)threadIdx.x) + 5) % 9) * 7)) - 2)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 133)] = (((1 <= ((((int)threadIdx.x) + 5) % 9)) && (((((int)threadIdx.x) + 5) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 14) / 9) * 49)) + (((((int)threadIdx.x) + 5) % 9) * 7)) - 1)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 134)] = 0.000000e+00f;
        pad_temp_shared[((((int)threadIdx.x) * 9) + 189)] = 0.000000e+00f;
        pad_temp_shared[((((int)threadIdx.x) * 9) + 190)] = (((1 <= ((((int)threadIdx.x) + 3) % 9)) && (((((int)threadIdx.x) + 3) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 21) / 9) * 49)) + (((((int)threadIdx.x) + 3) % 9) * 7)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 191)] = (((1 <= ((((int)threadIdx.x) + 3) % 9)) && (((((int)threadIdx.x) + 3) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 21) / 9) * 49)) + (((((int)threadIdx.x) + 3) % 9) * 7)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 192)] = (((1 <= ((((int)threadIdx.x) + 3) % 9)) && (((((int)threadIdx.x) + 3) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 21) / 9) * 49)) + (((((int)threadIdx.x) + 3) % 9) * 7)) - 5)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 193)] = (((1 <= ((((int)threadIdx.x) + 3) % 9)) && (((((int)threadIdx.x) + 3) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 21) / 9) * 49)) + (((((int)threadIdx.x) + 3) % 9) * 7)) - 4)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 194)] = (((1 <= ((((int)threadIdx.x) + 3) % 9)) && (((((int)threadIdx.x) + 3) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 21) / 9) * 49)) + (((((int)threadIdx.x) + 3) % 9) * 7)) - 3)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 195)] = (((1 <= ((((int)threadIdx.x) + 3) % 9)) && (((((int)threadIdx.x) + 3) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 21) / 9) * 49)) + (((((int)threadIdx.x) + 3) % 9) * 7)) - 2)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 196)] = (((1 <= ((((int)threadIdx.x) + 3) % 9)) && (((((int)threadIdx.x) + 3) % 9) < 8)) ? data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 21) / 9) * 49)) + (((((int)threadIdx.x) + 3) % 9) * 7)) - 1)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 9) + 197)] = 0.000000e+00f;
        pad_temp_shared[((((int)threadIdx.x) * 9) + 252)] = 0.000000e+00f;
        pad_temp_shared[((((int)threadIdx.x) * 9) + 253)] = data[(((rc_outer_outer * 196) + (((((int)threadIdx.x) + 28) / 9) * 49)) + (((int)threadIdx.x) * 7))];
        pad_temp_shared[((((int)threadIdx.x) * 9) + 254)] = data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 28) / 9) * 49)) + (((int)threadIdx.x) * 7)) + 1)];
        pad_temp_shared[((((int)threadIdx.x) * 9) + 255)] = data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 28) / 9) * 49)) + (((int)threadIdx.x) * 7)) + 2)];
        pad_temp_shared[((((int)threadIdx.x) * 9) + 256)] = data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 28) / 9) * 49)) + (((int)threadIdx.x) * 7)) + 3)];
        pad_temp_shared[((((int)threadIdx.x) * 9) + 257)] = data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 28) / 9) * 49)) + (((int)threadIdx.x) * 7)) + 4)];
        pad_temp_shared[((((int)threadIdx.x) * 9) + 258)] = data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 28) / 9) * 49)) + (((int)threadIdx.x) * 7)) + 5)];
        pad_temp_shared[((((int)threadIdx.x) * 9) + 259)] = data[((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 28) / 9) * 49)) + (((int)threadIdx.x) * 7)) + 6)];
        pad_temp_shared[((((int)threadIdx.x) * 9) + 260)] = 0.000000e+00f;
        if (((int)threadIdx.x) < 1) {
          pad_temp_shared[((((int)threadIdx.x) * 9) + 315)] = 0.000000e+00f;
          pad_temp_shared[((((int)threadIdx.x) * 9) + 316)] = 0.000000e+00f;
          pad_temp_shared[((((int)threadIdx.x) * 9) + 317)] = 0.000000e+00f;
          pad_temp_shared[((((int)threadIdx.x) * 9) + 318)] = 0.000000e+00f;
          pad_temp_shared[((((int)threadIdx.x) * 9) + 319)] = 0.000000e+00f;
          pad_temp_shared[((((int)threadIdx.x) * 9) + 320)] = 0.000000e+00f;
          pad_temp_shared[((((int)threadIdx.x) * 9) + 321)] = 0.000000e+00f;
          pad_temp_shared[((((int)threadIdx.x) * 9) + 322)] = 0.000000e+00f;
          pad_temp_shared[((((int)threadIdx.x) * 9) + 323)] = 0.000000e+00f;
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[(((int)threadIdx.x) * 24)] = kernel[(((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) * 2) / 3) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) * 8) % 12) / 3) * 9)) + (((((int)threadIdx.x) * 2) % 3) * 3))];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 1)] = kernel[((((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) * 2) / 3) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) * 8) % 12) / 3) * 9)) + (((((int)threadIdx.x) * 2) % 3) * 3)) + 1)];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 2)] = kernel[((((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) * 2) / 3) * 4608)) + (rc_outer_outer * 36)) + ((((((int)threadIdx.x) * 8) % 12) / 3) * 9)) + (((((int)threadIdx.x) * 2) % 3) * 3)) + 2)];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 3)] = kernel[(((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) * 2) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) + 1) % 12) / 3) * 9)) + ((((((int)threadIdx.x) * 2) + 1) % 3) * 3))];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 4)] = kernel[((((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) * 2) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) + 1) % 12) / 3) * 9)) + ((((((int)threadIdx.x) * 2) + 1) % 3) * 3)) + 1)];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 5)] = kernel[((((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) * 2) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) + 1) % 12) / 3) * 9)) + ((((((int)threadIdx.x) * 2) + 1) % 3) * 3)) + 2)];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 6)] = kernel[(((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) * 2) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) + 2) % 12) / 3) * 9)) + ((((((int)threadIdx.x) * 2) + 2) % 3) * 3))];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 7)] = kernel[((((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) * 2) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) + 2) % 12) / 3) * 9)) + ((((((int)threadIdx.x) * 2) + 2) % 3) * 3)) + 1)];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 8)] = kernel[((((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) * 2) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) + 2) % 12) / 3) * 9)) + ((((((int)threadIdx.x) * 2) + 2) % 3) * 3)) + 2)];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 9)] = kernel[(((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) * 2) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) / 3) + 1) & 3) * 9)) + (((((int)threadIdx.x) * 2) % 3) * 3))];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 10)] = kernel[((((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) * 2) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) / 3) + 1) & 3) * 9)) + (((((int)threadIdx.x) * 2) % 3) * 3)) + 1)];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 11)] = kernel[((((((((int)blockIdx.x) * 18432) + (((((int)threadIdx.x) * 2) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) / 3) + 1) & 3) * 9)) + (((((int)threadIdx.x) * 2) % 3) * 3)) + 2)];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 12)] = kernel[(((((((int)blockIdx.x) * 18432) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) + 4) % 12) / 3) * 9)) + ((((((int)threadIdx.x) * 2) + 1) % 3) * 3))];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 13)] = kernel[((((((((int)blockIdx.x) * 18432) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) + 4) % 12) / 3) * 9)) + ((((((int)threadIdx.x) * 2) + 1) % 3) * 3)) + 1)];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 14)] = kernel[((((((((int)blockIdx.x) * 18432) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) + 4) % 12) / 3) * 9)) + ((((((int)threadIdx.x) * 2) + 1) % 3) * 3)) + 2)];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 15)] = kernel[(((((((int)blockIdx.x) * 18432) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) + 5) % 12) / 3) * 9)) + ((((((int)threadIdx.x) * 2) + 2) % 3) * 3))];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 16)] = kernel[((((((((int)blockIdx.x) * 18432) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) + 5) % 12) / 3) * 9)) + ((((((int)threadIdx.x) * 2) + 2) % 3) * 3)) + 1)];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 17)] = kernel[((((((((int)blockIdx.x) * 18432) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) + 5) % 12) / 3) * 9)) + ((((((int)threadIdx.x) * 2) + 2) % 3) * 3)) + 2)];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 18)] = kernel[(((((((int)blockIdx.x) * 18432) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) / 3) + 2) & 3) * 9)) + (((((int)threadIdx.x) * 2) % 3) * 3))];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 19)] = kernel[((((((((int)blockIdx.x) * 18432) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) / 3) + 2) & 3) * 9)) + (((((int)threadIdx.x) * 2) % 3) * 3)) + 1)];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 20)] = kernel[((((((((int)blockIdx.x) * 18432) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) / 3) + 2) & 3) * 9)) + (((((int)threadIdx.x) * 2) % 3) * 3)) + 2)];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 21)] = kernel[(((((((int)blockIdx.x) * 18432) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) + 7) % 12) / 3) * 9)) + ((((((int)threadIdx.x) * 2) + 1) % 3) * 3))];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 22)] = kernel[((((((((int)blockIdx.x) * 18432) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) + 7) % 12) / 3) * 9)) + ((((((int)threadIdx.x) * 2) + 1) % 3) * 3)) + 1)];
        }
        if (((int)threadIdx.x) < 6) {
          kernel_shared[((((int)threadIdx.x) * 24) + 23)] = kernel[((((((((int)blockIdx.x) * 18432) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 4608)) + (rc_outer_outer * 36)) + (((((((int)threadIdx.x) * 8) + 7) % 12) / 3) * 9)) + ((((((int)threadIdx.x) * 2) + 1) % 3) * 3)) + 2)];
        }
        __syncthreads();
        for (int ry_outer_inner = 0; ry_outer_inner < 3; ++ry_outer_inner) {
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) * 9) + (ry_outer_inner * 9))] * kernel_shared[(ry_outer_inner * 3)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 1)] * kernel_shared[(ry_outer_inner * 3)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 2)] * kernel_shared[(ry_outer_inner * 3)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 3)] * kernel_shared[(ry_outer_inner * 3)]));
          conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 4)] * kernel_shared[(ry_outer_inner * 3)]));
          conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 5)] * kernel_shared[(ry_outer_inner * 3)]));
          conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 6)] * kernel_shared[(ry_outer_inner * 3)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) * 9) + (ry_outer_inner * 9))] * kernel_shared[((ry_outer_inner * 3) + 36)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 1)] * kernel_shared[((ry_outer_inner * 3) + 36)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 2)] * kernel_shared[((ry_outer_inner * 3) + 36)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 3)] * kernel_shared[((ry_outer_inner * 3) + 36)]));
          conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 4)] * kernel_shared[((ry_outer_inner * 3) + 36)]));
          conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 5)] * kernel_shared[((ry_outer_inner * 3) + 36)]));
          conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 6)] * kernel_shared[((ry_outer_inner * 3) + 36)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 81)] * kernel_shared[((ry_outer_inner * 3) + 9)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 82)] * kernel_shared[((ry_outer_inner * 3) + 9)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 83)] * kernel_shared[((ry_outer_inner * 3) + 9)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 84)] * kernel_shared[((ry_outer_inner * 3) + 9)]));
          conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 85)] * kernel_shared[((ry_outer_inner * 3) + 9)]));
          conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 86)] * kernel_shared[((ry_outer_inner * 3) + 9)]));
          conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 87)] * kernel_shared[((ry_outer_inner * 3) + 9)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 81)] * kernel_shared[((ry_outer_inner * 3) + 45)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 82)] * kernel_shared[((ry_outer_inner * 3) + 45)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 83)] * kernel_shared[((ry_outer_inner * 3) + 45)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 84)] * kernel_shared[((ry_outer_inner * 3) + 45)]));
          conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 85)] * kernel_shared[((ry_outer_inner * 3) + 45)]));
          conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 86)] * kernel_shared[((ry_outer_inner * 3) + 45)]));
          conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 87)] * kernel_shared[((ry_outer_inner * 3) + 45)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 162)] * kernel_shared[((ry_outer_inner * 3) + 18)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 163)] * kernel_shared[((ry_outer_inner * 3) + 18)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 164)] * kernel_shared[((ry_outer_inner * 3) + 18)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 165)] * kernel_shared[((ry_outer_inner * 3) + 18)]));
          conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 166)] * kernel_shared[((ry_outer_inner * 3) + 18)]));
          conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 167)] * kernel_shared[((ry_outer_inner * 3) + 18)]));
          conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 168)] * kernel_shared[((ry_outer_inner * 3) + 18)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 162)] * kernel_shared[((ry_outer_inner * 3) + 54)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 163)] * kernel_shared[((ry_outer_inner * 3) + 54)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 164)] * kernel_shared[((ry_outer_inner * 3) + 54)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 165)] * kernel_shared[((ry_outer_inner * 3) + 54)]));
          conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 166)] * kernel_shared[((ry_outer_inner * 3) + 54)]));
          conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 167)] * kernel_shared[((ry_outer_inner * 3) + 54)]));
          conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 168)] * kernel_shared[((ry_outer_inner * 3) + 54)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 243)] * kernel_shared[((ry_outer_inner * 3) + 27)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 244)] * kernel_shared[((ry_outer_inner * 3) + 27)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 245)] * kernel_shared[((ry_outer_inner * 3) + 27)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 246)] * kernel_shared[((ry_outer_inner * 3) + 27)]));
          conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 247)] * kernel_shared[((ry_outer_inner * 3) + 27)]));
          conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 248)] * kernel_shared[((ry_outer_inner * 3) + 27)]));
          conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 249)] * kernel_shared[((ry_outer_inner * 3) + 27)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 243)] * kernel_shared[((ry_outer_inner * 3) + 63)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 244)] * kernel_shared[((ry_outer_inner * 3) + 63)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 245)] * kernel_shared[((ry_outer_inner * 3) + 63)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 246)] * kernel_shared[((ry_outer_inner * 3) + 63)]));
          conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 247)] * kernel_shared[((ry_outer_inner * 3) + 63)]));
          conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 248)] * kernel_shared[((ry_outer_inner * 3) + 63)]));
          conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 249)] * kernel_shared[((ry_outer_inner * 3) + 63)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) * 9) + (ry_outer_inner * 9))] * kernel_shared[((ry_outer_inner * 3) + 72)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 1)] * kernel_shared[((ry_outer_inner * 3) + 72)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 2)] * kernel_shared[((ry_outer_inner * 3) + 72)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 3)] * kernel_shared[((ry_outer_inner * 3) + 72)]));
          conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 4)] * kernel_shared[((ry_outer_inner * 3) + 72)]));
          conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 5)] * kernel_shared[((ry_outer_inner * 3) + 72)]));
          conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 6)] * kernel_shared[((ry_outer_inner * 3) + 72)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) * 9) + (ry_outer_inner * 9))] * kernel_shared[((ry_outer_inner * 3) + 108)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 1)] * kernel_shared[((ry_outer_inner * 3) + 108)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 2)] * kernel_shared[((ry_outer_inner * 3) + 108)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 3)] * kernel_shared[((ry_outer_inner * 3) + 108)]));
          conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 4)] * kernel_shared[((ry_outer_inner * 3) + 108)]));
          conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 5)] * kernel_shared[((ry_outer_inner * 3) + 108)]));
          conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 6)] * kernel_shared[((ry_outer_inner * 3) + 108)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 81)] * kernel_shared[((ry_outer_inner * 3) + 81)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 82)] * kernel_shared[((ry_outer_inner * 3) + 81)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 83)] * kernel_shared[((ry_outer_inner * 3) + 81)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 84)] * kernel_shared[((ry_outer_inner * 3) + 81)]));
          conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 85)] * kernel_shared[((ry_outer_inner * 3) + 81)]));
          conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 86)] * kernel_shared[((ry_outer_inner * 3) + 81)]));
          conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 87)] * kernel_shared[((ry_outer_inner * 3) + 81)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 81)] * kernel_shared[((ry_outer_inner * 3) + 117)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 82)] * kernel_shared[((ry_outer_inner * 3) + 117)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 83)] * kernel_shared[((ry_outer_inner * 3) + 117)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 84)] * kernel_shared[((ry_outer_inner * 3) + 117)]));
          conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 85)] * kernel_shared[((ry_outer_inner * 3) + 117)]));
          conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 86)] * kernel_shared[((ry_outer_inner * 3) + 117)]));
          conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 87)] * kernel_shared[((ry_outer_inner * 3) + 117)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 162)] * kernel_shared[((ry_outer_inner * 3) + 90)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 163)] * kernel_shared[((ry_outer_inner * 3) + 90)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 164)] * kernel_shared[((ry_outer_inner * 3) + 90)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 165)] * kernel_shared[((ry_outer_inner * 3) + 90)]));
          conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 166)] * kernel_shared[((ry_outer_inner * 3) + 90)]));
          conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 167)] * kernel_shared[((ry_outer_inner * 3) + 90)]));
          conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 168)] * kernel_shared[((ry_outer_inner * 3) + 90)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 162)] * kernel_shared[((ry_outer_inner * 3) + 126)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 163)] * kernel_shared[((ry_outer_inner * 3) + 126)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 164)] * kernel_shared[((ry_outer_inner * 3) + 126)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 165)] * kernel_shared[((ry_outer_inner * 3) + 126)]));
          conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 166)] * kernel_shared[((ry_outer_inner * 3) + 126)]));
          conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 167)] * kernel_shared[((ry_outer_inner * 3) + 126)]));
          conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 168)] * kernel_shared[((ry_outer_inner * 3) + 126)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 243)] * kernel_shared[((ry_outer_inner * 3) + 99)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 244)] * kernel_shared[((ry_outer_inner * 3) + 99)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 245)] * kernel_shared[((ry_outer_inner * 3) + 99)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 246)] * kernel_shared[((ry_outer_inner * 3) + 99)]));
          conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 247)] * kernel_shared[((ry_outer_inner * 3) + 99)]));
          conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 248)] * kernel_shared[((ry_outer_inner * 3) + 99)]));
          conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 249)] * kernel_shared[((ry_outer_inner * 3) + 99)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 243)] * kernel_shared[((ry_outer_inner * 3) + 135)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 244)] * kernel_shared[((ry_outer_inner * 3) + 135)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 245)] * kernel_shared[((ry_outer_inner * 3) + 135)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 246)] * kernel_shared[((ry_outer_inner * 3) + 135)]));
          conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 247)] * kernel_shared[((ry_outer_inner * 3) + 135)]));
          conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 248)] * kernel_shared[((ry_outer_inner * 3) + 135)]));
          conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 249)] * kernel_shared[((ry_outer_inner * 3) + 135)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 1)] * kernel_shared[((ry_outer_inner * 3) + 1)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 2)] * kernel_shared[((ry_outer_inner * 3) + 1)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 3)] * kernel_shared[((ry_outer_inner * 3) + 1)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 4)] * kernel_shared[((ry_outer_inner * 3) + 1)]));
          conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 5)] * kernel_shared[((ry_outer_inner * 3) + 1)]));
          conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 6)] * kernel_shared[((ry_outer_inner * 3) + 1)]));
          conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 7)] * kernel_shared[((ry_outer_inner * 3) + 1)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 1)] * kernel_shared[((ry_outer_inner * 3) + 37)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 2)] * kernel_shared[((ry_outer_inner * 3) + 37)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 3)] * kernel_shared[((ry_outer_inner * 3) + 37)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 4)] * kernel_shared[((ry_outer_inner * 3) + 37)]));
          conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 5)] * kernel_shared[((ry_outer_inner * 3) + 37)]));
          conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 6)] * kernel_shared[((ry_outer_inner * 3) + 37)]));
          conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 7)] * kernel_shared[((ry_outer_inner * 3) + 37)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 82)] * kernel_shared[((ry_outer_inner * 3) + 10)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 83)] * kernel_shared[((ry_outer_inner * 3) + 10)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 84)] * kernel_shared[((ry_outer_inner * 3) + 10)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 85)] * kernel_shared[((ry_outer_inner * 3) + 10)]));
          conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 86)] * kernel_shared[((ry_outer_inner * 3) + 10)]));
          conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 87)] * kernel_shared[((ry_outer_inner * 3) + 10)]));
          conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 88)] * kernel_shared[((ry_outer_inner * 3) + 10)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 82)] * kernel_shared[((ry_outer_inner * 3) + 46)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 83)] * kernel_shared[((ry_outer_inner * 3) + 46)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 84)] * kernel_shared[((ry_outer_inner * 3) + 46)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 85)] * kernel_shared[((ry_outer_inner * 3) + 46)]));
          conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 86)] * kernel_shared[((ry_outer_inner * 3) + 46)]));
          conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 87)] * kernel_shared[((ry_outer_inner * 3) + 46)]));
          conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 88)] * kernel_shared[((ry_outer_inner * 3) + 46)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 163)] * kernel_shared[((ry_outer_inner * 3) + 19)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 164)] * kernel_shared[((ry_outer_inner * 3) + 19)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 165)] * kernel_shared[((ry_outer_inner * 3) + 19)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 166)] * kernel_shared[((ry_outer_inner * 3) + 19)]));
          conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 167)] * kernel_shared[((ry_outer_inner * 3) + 19)]));
          conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 168)] * kernel_shared[((ry_outer_inner * 3) + 19)]));
          conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 169)] * kernel_shared[((ry_outer_inner * 3) + 19)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 163)] * kernel_shared[((ry_outer_inner * 3) + 55)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 164)] * kernel_shared[((ry_outer_inner * 3) + 55)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 165)] * kernel_shared[((ry_outer_inner * 3) + 55)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 166)] * kernel_shared[((ry_outer_inner * 3) + 55)]));
          conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 167)] * kernel_shared[((ry_outer_inner * 3) + 55)]));
          conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 168)] * kernel_shared[((ry_outer_inner * 3) + 55)]));
          conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 169)] * kernel_shared[((ry_outer_inner * 3) + 55)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 244)] * kernel_shared[((ry_outer_inner * 3) + 28)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 245)] * kernel_shared[((ry_outer_inner * 3) + 28)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 246)] * kernel_shared[((ry_outer_inner * 3) + 28)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 247)] * kernel_shared[((ry_outer_inner * 3) + 28)]));
          conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 248)] * kernel_shared[((ry_outer_inner * 3) + 28)]));
          conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 249)] * kernel_shared[((ry_outer_inner * 3) + 28)]));
          conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 250)] * kernel_shared[((ry_outer_inner * 3) + 28)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 244)] * kernel_shared[((ry_outer_inner * 3) + 64)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 245)] * kernel_shared[((ry_outer_inner * 3) + 64)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 246)] * kernel_shared[((ry_outer_inner * 3) + 64)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 247)] * kernel_shared[((ry_outer_inner * 3) + 64)]));
          conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 248)] * kernel_shared[((ry_outer_inner * 3) + 64)]));
          conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 249)] * kernel_shared[((ry_outer_inner * 3) + 64)]));
          conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 250)] * kernel_shared[((ry_outer_inner * 3) + 64)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 1)] * kernel_shared[((ry_outer_inner * 3) + 73)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 2)] * kernel_shared[((ry_outer_inner * 3) + 73)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 3)] * kernel_shared[((ry_outer_inner * 3) + 73)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 4)] * kernel_shared[((ry_outer_inner * 3) + 73)]));
          conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 5)] * kernel_shared[((ry_outer_inner * 3) + 73)]));
          conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 6)] * kernel_shared[((ry_outer_inner * 3) + 73)]));
          conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 7)] * kernel_shared[((ry_outer_inner * 3) + 73)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 1)] * kernel_shared[((ry_outer_inner * 3) + 109)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 2)] * kernel_shared[((ry_outer_inner * 3) + 109)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 3)] * kernel_shared[((ry_outer_inner * 3) + 109)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 4)] * kernel_shared[((ry_outer_inner * 3) + 109)]));
          conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 5)] * kernel_shared[((ry_outer_inner * 3) + 109)]));
          conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 6)] * kernel_shared[((ry_outer_inner * 3) + 109)]));
          conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 7)] * kernel_shared[((ry_outer_inner * 3) + 109)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 82)] * kernel_shared[((ry_outer_inner * 3) + 82)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 83)] * kernel_shared[((ry_outer_inner * 3) + 82)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 84)] * kernel_shared[((ry_outer_inner * 3) + 82)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 85)] * kernel_shared[((ry_outer_inner * 3) + 82)]));
          conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 86)] * kernel_shared[((ry_outer_inner * 3) + 82)]));
          conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 87)] * kernel_shared[((ry_outer_inner * 3) + 82)]));
          conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 88)] * kernel_shared[((ry_outer_inner * 3) + 82)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 82)] * kernel_shared[((ry_outer_inner * 3) + 118)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 83)] * kernel_shared[((ry_outer_inner * 3) + 118)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 84)] * kernel_shared[((ry_outer_inner * 3) + 118)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 85)] * kernel_shared[((ry_outer_inner * 3) + 118)]));
          conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 86)] * kernel_shared[((ry_outer_inner * 3) + 118)]));
          conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 87)] * kernel_shared[((ry_outer_inner * 3) + 118)]));
          conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 88)] * kernel_shared[((ry_outer_inner * 3) + 118)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 163)] * kernel_shared[((ry_outer_inner * 3) + 91)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 164)] * kernel_shared[((ry_outer_inner * 3) + 91)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 165)] * kernel_shared[((ry_outer_inner * 3) + 91)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 166)] * kernel_shared[((ry_outer_inner * 3) + 91)]));
          conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 167)] * kernel_shared[((ry_outer_inner * 3) + 91)]));
          conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 168)] * kernel_shared[((ry_outer_inner * 3) + 91)]));
          conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 169)] * kernel_shared[((ry_outer_inner * 3) + 91)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 163)] * kernel_shared[((ry_outer_inner * 3) + 127)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 164)] * kernel_shared[((ry_outer_inner * 3) + 127)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 165)] * kernel_shared[((ry_outer_inner * 3) + 127)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 166)] * kernel_shared[((ry_outer_inner * 3) + 127)]));
          conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 167)] * kernel_shared[((ry_outer_inner * 3) + 127)]));
          conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 168)] * kernel_shared[((ry_outer_inner * 3) + 127)]));
          conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 169)] * kernel_shared[((ry_outer_inner * 3) + 127)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 244)] * kernel_shared[((ry_outer_inner * 3) + 100)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 245)] * kernel_shared[((ry_outer_inner * 3) + 100)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 246)] * kernel_shared[((ry_outer_inner * 3) + 100)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 247)] * kernel_shared[((ry_outer_inner * 3) + 100)]));
          conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 248)] * kernel_shared[((ry_outer_inner * 3) + 100)]));
          conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 249)] * kernel_shared[((ry_outer_inner * 3) + 100)]));
          conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 250)] * kernel_shared[((ry_outer_inner * 3) + 100)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 244)] * kernel_shared[((ry_outer_inner * 3) + 136)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 245)] * kernel_shared[((ry_outer_inner * 3) + 136)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 246)] * kernel_shared[((ry_outer_inner * 3) + 136)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 247)] * kernel_shared[((ry_outer_inner * 3) + 136)]));
          conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 248)] * kernel_shared[((ry_outer_inner * 3) + 136)]));
          conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 249)] * kernel_shared[((ry_outer_inner * 3) + 136)]));
          conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 250)] * kernel_shared[((ry_outer_inner * 3) + 136)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 2)] * kernel_shared[((ry_outer_inner * 3) + 2)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 3)] * kernel_shared[((ry_outer_inner * 3) + 2)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 4)] * kernel_shared[((ry_outer_inner * 3) + 2)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 5)] * kernel_shared[((ry_outer_inner * 3) + 2)]));
          conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 6)] * kernel_shared[((ry_outer_inner * 3) + 2)]));
          conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 7)] * kernel_shared[((ry_outer_inner * 3) + 2)]));
          conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 8)] * kernel_shared[((ry_outer_inner * 3) + 2)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 2)] * kernel_shared[((ry_outer_inner * 3) + 38)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 3)] * kernel_shared[((ry_outer_inner * 3) + 38)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 4)] * kernel_shared[((ry_outer_inner * 3) + 38)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 5)] * kernel_shared[((ry_outer_inner * 3) + 38)]));
          conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 6)] * kernel_shared[((ry_outer_inner * 3) + 38)]));
          conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 7)] * kernel_shared[((ry_outer_inner * 3) + 38)]));
          conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 8)] * kernel_shared[((ry_outer_inner * 3) + 38)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 83)] * kernel_shared[((ry_outer_inner * 3) + 11)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 84)] * kernel_shared[((ry_outer_inner * 3) + 11)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 85)] * kernel_shared[((ry_outer_inner * 3) + 11)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 86)] * kernel_shared[((ry_outer_inner * 3) + 11)]));
          conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 87)] * kernel_shared[((ry_outer_inner * 3) + 11)]));
          conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 88)] * kernel_shared[((ry_outer_inner * 3) + 11)]));
          conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 89)] * kernel_shared[((ry_outer_inner * 3) + 11)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 83)] * kernel_shared[((ry_outer_inner * 3) + 47)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 84)] * kernel_shared[((ry_outer_inner * 3) + 47)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 85)] * kernel_shared[((ry_outer_inner * 3) + 47)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 86)] * kernel_shared[((ry_outer_inner * 3) + 47)]));
          conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 87)] * kernel_shared[((ry_outer_inner * 3) + 47)]));
          conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 88)] * kernel_shared[((ry_outer_inner * 3) + 47)]));
          conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 89)] * kernel_shared[((ry_outer_inner * 3) + 47)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 164)] * kernel_shared[((ry_outer_inner * 3) + 20)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 165)] * kernel_shared[((ry_outer_inner * 3) + 20)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 166)] * kernel_shared[((ry_outer_inner * 3) + 20)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 167)] * kernel_shared[((ry_outer_inner * 3) + 20)]));
          conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 168)] * kernel_shared[((ry_outer_inner * 3) + 20)]));
          conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 169)] * kernel_shared[((ry_outer_inner * 3) + 20)]));
          conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 170)] * kernel_shared[((ry_outer_inner * 3) + 20)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 164)] * kernel_shared[((ry_outer_inner * 3) + 56)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 165)] * kernel_shared[((ry_outer_inner * 3) + 56)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 166)] * kernel_shared[((ry_outer_inner * 3) + 56)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 167)] * kernel_shared[((ry_outer_inner * 3) + 56)]));
          conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 168)] * kernel_shared[((ry_outer_inner * 3) + 56)]));
          conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 169)] * kernel_shared[((ry_outer_inner * 3) + 56)]));
          conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 170)] * kernel_shared[((ry_outer_inner * 3) + 56)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 245)] * kernel_shared[((ry_outer_inner * 3) + 29)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 246)] * kernel_shared[((ry_outer_inner * 3) + 29)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 247)] * kernel_shared[((ry_outer_inner * 3) + 29)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 248)] * kernel_shared[((ry_outer_inner * 3) + 29)]));
          conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 249)] * kernel_shared[((ry_outer_inner * 3) + 29)]));
          conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 250)] * kernel_shared[((ry_outer_inner * 3) + 29)]));
          conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 251)] * kernel_shared[((ry_outer_inner * 3) + 29)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 245)] * kernel_shared[((ry_outer_inner * 3) + 65)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 246)] * kernel_shared[((ry_outer_inner * 3) + 65)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 247)] * kernel_shared[((ry_outer_inner * 3) + 65)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 248)] * kernel_shared[((ry_outer_inner * 3) + 65)]));
          conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 249)] * kernel_shared[((ry_outer_inner * 3) + 65)]));
          conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 250)] * kernel_shared[((ry_outer_inner * 3) + 65)]));
          conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 251)] * kernel_shared[((ry_outer_inner * 3) + 65)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 2)] * kernel_shared[((ry_outer_inner * 3) + 74)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 3)] * kernel_shared[((ry_outer_inner * 3) + 74)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 4)] * kernel_shared[((ry_outer_inner * 3) + 74)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 5)] * kernel_shared[((ry_outer_inner * 3) + 74)]));
          conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 6)] * kernel_shared[((ry_outer_inner * 3) + 74)]));
          conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 7)] * kernel_shared[((ry_outer_inner * 3) + 74)]));
          conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 8)] * kernel_shared[((ry_outer_inner * 3) + 74)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 2)] * kernel_shared[((ry_outer_inner * 3) + 110)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 3)] * kernel_shared[((ry_outer_inner * 3) + 110)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 4)] * kernel_shared[((ry_outer_inner * 3) + 110)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 5)] * kernel_shared[((ry_outer_inner * 3) + 110)]));
          conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 6)] * kernel_shared[((ry_outer_inner * 3) + 110)]));
          conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 7)] * kernel_shared[((ry_outer_inner * 3) + 110)]));
          conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 8)] * kernel_shared[((ry_outer_inner * 3) + 110)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 83)] * kernel_shared[((ry_outer_inner * 3) + 83)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 84)] * kernel_shared[((ry_outer_inner * 3) + 83)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 85)] * kernel_shared[((ry_outer_inner * 3) + 83)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 86)] * kernel_shared[((ry_outer_inner * 3) + 83)]));
          conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 87)] * kernel_shared[((ry_outer_inner * 3) + 83)]));
          conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 88)] * kernel_shared[((ry_outer_inner * 3) + 83)]));
          conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 89)] * kernel_shared[((ry_outer_inner * 3) + 83)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 83)] * kernel_shared[((ry_outer_inner * 3) + 119)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 84)] * kernel_shared[((ry_outer_inner * 3) + 119)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 85)] * kernel_shared[((ry_outer_inner * 3) + 119)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 86)] * kernel_shared[((ry_outer_inner * 3) + 119)]));
          conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 87)] * kernel_shared[((ry_outer_inner * 3) + 119)]));
          conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 88)] * kernel_shared[((ry_outer_inner * 3) + 119)]));
          conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 89)] * kernel_shared[((ry_outer_inner * 3) + 119)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 164)] * kernel_shared[((ry_outer_inner * 3) + 92)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 165)] * kernel_shared[((ry_outer_inner * 3) + 92)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 166)] * kernel_shared[((ry_outer_inner * 3) + 92)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 167)] * kernel_shared[((ry_outer_inner * 3) + 92)]));
          conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 168)] * kernel_shared[((ry_outer_inner * 3) + 92)]));
          conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 169)] * kernel_shared[((ry_outer_inner * 3) + 92)]));
          conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 170)] * kernel_shared[((ry_outer_inner * 3) + 92)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 164)] * kernel_shared[((ry_outer_inner * 3) + 128)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 165)] * kernel_shared[((ry_outer_inner * 3) + 128)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 166)] * kernel_shared[((ry_outer_inner * 3) + 128)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 167)] * kernel_shared[((ry_outer_inner * 3) + 128)]));
          conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 168)] * kernel_shared[((ry_outer_inner * 3) + 128)]));
          conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 169)] * kernel_shared[((ry_outer_inner * 3) + 128)]));
          conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 170)] * kernel_shared[((ry_outer_inner * 3) + 128)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 245)] * kernel_shared[((ry_outer_inner * 3) + 101)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 246)] * kernel_shared[((ry_outer_inner * 3) + 101)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 247)] * kernel_shared[((ry_outer_inner * 3) + 101)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 248)] * kernel_shared[((ry_outer_inner * 3) + 101)]));
          conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 249)] * kernel_shared[((ry_outer_inner * 3) + 101)]));
          conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 250)] * kernel_shared[((ry_outer_inner * 3) + 101)]));
          conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 251)] * kernel_shared[((ry_outer_inner * 3) + 101)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 245)] * kernel_shared[((ry_outer_inner * 3) + 137)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 246)] * kernel_shared[((ry_outer_inner * 3) + 137)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 247)] * kernel_shared[((ry_outer_inner * 3) + 137)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 248)] * kernel_shared[((ry_outer_inner * 3) + 137)]));
          conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 249)] * kernel_shared[((ry_outer_inner * 3) + 137)]));
          conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 250)] * kernel_shared[((ry_outer_inner * 3) + 137)]));
          conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((((int)threadIdx.x) * 9) + (ry_outer_inner * 9)) + 251)] * kernel_shared[((ry_outer_inner * 3) + 137)]));
        }
      }
      for (int i1_inner = 0; i1_inner < 4; ++i1_inner) {
        compute[(((((int)blockIdx.x) * 196) + (i1_inner * 49)) + (((int)threadIdx.x) * 7))] = max((conv2d_nchw[i1_inner] + bias[((((int)blockIdx.x) * 4) + i1_inner)]), 0.000000e+00f);
        compute[((((((int)blockIdx.x) * 196) + (i1_inner * 49)) + (((int)threadIdx.x) * 7)) + 1)] = max((conv2d_nchw[(i1_inner + 4)] + bias[((((int)blockIdx.x) * 4) + i1_inner)]), 0.000000e+00f);
        compute[((((((int)blockIdx.x) * 196) + (i1_inner * 49)) + (((int)threadIdx.x) * 7)) + 2)] = max((conv2d_nchw[(i1_inner + 8)] + bias[((((int)blockIdx.x) * 4) + i1_inner)]), 0.000000e+00f);
        compute[((((((int)blockIdx.x) * 196) + (i1_inner * 49)) + (((int)threadIdx.x) * 7)) + 3)] = max((conv2d_nchw[(i1_inner + 12)] + bias[((((int)blockIdx.x) * 4) + i1_inner)]), 0.000000e+00f);
        compute[((((((int)blockIdx.x) * 196) + (i1_inner * 49)) + (((int)threadIdx.x) * 7)) + 4)] = max((conv2d_nchw[(i1_inner + 16)] + bias[((((int)blockIdx.x) * 4) + i1_inner)]), 0.000000e+00f);
        compute[((((((int)blockIdx.x) * 196) + (i1_inner * 49)) + (((int)threadIdx.x) * 7)) + 5)] = max((conv2d_nchw[(i1_inner + 20)] + bias[((((int)blockIdx.x) * 4) + i1_inner)]), 0.000000e+00f);
        compute[((((((int)blockIdx.x) * 196) + (i1_inner * 49)) + (((int)threadIdx.x) * 7)) + 6)] = max((conv2d_nchw[(i1_inner + 24)] + bias[((((int)blockIdx.x) * 4) + i1_inner)]), 0.000000e+00f);
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 190-194

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 194-216

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.7/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  20.435 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
