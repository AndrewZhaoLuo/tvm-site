.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.


.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none






We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute}
      preflattened_buffer_map = {data_1: data_3: Buffer(data_2, float32, [1, 512, 7, 7], []), kernel_1: kernel_3: Buffer(kernel_2, float32, [512, 512, 3, 3], []), bias_1: bias_3: Buffer(bias_2, float32, [1, 512, 1, 1], []), compute_1: compute_3: Buffer(compute_2, float32, [1, 512, 7, 7], [])} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 16;
      allocate(conv2d_nchw: Pointer(local float32), float32, [8]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [324]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [1152]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [4], [], scope="local", align=8)[0] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[6] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[7] = 0f32
        for (rc.outer.outer: int32, 0, 128) {
          let cse_var_1: int32 = (rc.outer.outer*36)
           {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
            pad_temp.shared_1: Buffer(pad_temp.shared, float32, [324], [], scope="shared")[threadIdx.x_1] = @tir.if_then_else(((((9 <= floormod(threadIdx.x_1, 81)) && (floormod(threadIdx.x_1, 81) < 72)) && (1 <= floormod(threadIdx.x_1, 9))) && (floormod(threadIdx.x_1, 9) < 8)), data[(((((rc.outer.outer*196) + (floordiv(threadIdx.x_1, 81)*49)) + (floordiv(floormod(threadIdx.x_1, 81), 9)*7)) + floormod(threadIdx.x_1, 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
            if @tir.likely((threadIdx.x_1 < 128), dtype=bool) {
              pad_temp.shared_1[(threadIdx.x_1 + 196)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 196), 81)) && (floormod((threadIdx.x_1 + 34), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 7), 9))) && (floormod((threadIdx.x_1 + 7), 9) < 8)), data[(((((rc.outer.outer*196) + (floordiv((threadIdx.x_1 + 196), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 196), 81), 9)*7)) + floormod((threadIdx.x_1 + 7), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
            kernel.shared_1: Buffer(kernel.shared, float32, [1152], [], scope="shared")[threadIdx.x_2] = kernel[((((blockIdx.x*147456) + (floordiv(threadIdx.x_2, 36)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
            kernel.shared_1[(threadIdx.x_2 + 196)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 4) + 49), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
            kernel.shared_1[(threadIdx.x_2 + 392)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 4) + 98), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
            kernel.shared_1[(threadIdx.x_2 + 588)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 4) + 147), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 12), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
            kernel.shared_1[(threadIdx.x_2 + 784)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 4) + 196), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 28), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
            if @tir.likely((threadIdx.x_2 < 172), dtype=bool) {
              kernel.shared_1[(threadIdx.x_2 + 980)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 4) + 245), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 36))]
            }
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[(floordiv(threadIdx.x, 49)*72)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 288)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 576)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 864)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 1)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 289)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 577)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 865)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 2)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 290)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 578)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 866)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 3)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 291)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 579)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 867)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 4)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 292)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 580)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 868)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 5)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 293)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 581)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 869)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 6)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 294)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 582)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 870)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 7)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 295)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 583)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 871)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 8)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 296)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 584)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 872)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 36)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 324)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 612)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 900)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 37)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 325)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 613)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 901)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 38)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 326)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 614)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 902)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 39)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 327)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 615)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 903)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 40)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 328)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 616)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 904)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 41)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 329)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 617)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 905)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 42)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 330)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 618)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 906)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 43)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 331)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 619)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 907)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 44)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 332)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 620)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 908)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 9)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 297)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 585)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 873)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 10)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 298)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 586)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 874)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 11)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 299)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 587)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 875)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 12)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 300)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 588)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 876)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 13)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 301)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 589)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 877)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 14)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 302)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 590)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 878)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 15)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 303)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 591)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 879)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 16)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 304)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 592)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 880)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 17)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 305)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 593)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 881)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 45)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 333)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 621)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 909)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 46)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 334)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 622)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 910)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 47)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 335)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 623)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 911)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 48)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 336)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 624)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 912)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 49)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 337)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 625)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 913)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 50)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 338)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 626)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 914)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 51)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 339)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 627)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 915)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 52)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 340)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 628)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 916)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 53)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 341)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 629)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 917)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 162)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 18)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 162)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 306)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 162)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 594)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 162)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 882)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 163)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 19)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 163)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 307)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 163)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 595)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 163)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 883)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 164)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 20)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 164)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 308)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 164)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 596)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 164)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 884)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 171)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 21)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 171)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 309)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 171)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 597)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 171)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 885)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 172)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 22)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 172)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 310)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 172)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 598)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 172)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 886)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 173)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 23)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 173)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 311)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 173)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 599)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 173)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 887)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 180)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 24)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 180)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 312)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 180)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 600)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 180)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 888)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 181)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 25)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 181)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 313)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 181)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 601)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 181)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 889)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 182)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 26)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 182)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 314)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 182)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 602)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 182)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 890)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 162)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 54)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 162)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 342)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 162)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 630)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 162)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 918)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 163)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 55)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 163)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 343)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 163)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 631)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 163)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 919)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 164)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 56)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 164)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 344)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 164)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 632)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 164)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 920)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 171)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 57)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 171)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 345)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 171)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 633)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 171)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 921)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 172)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 58)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 172)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 346)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 172)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 634)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 172)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 922)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 173)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 59)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 173)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 347)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 173)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 635)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 173)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 923)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 180)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 60)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 180)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 348)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 180)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 636)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 180)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 924)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 181)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 61)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 181)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 349)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 181)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 637)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 181)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 925)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 182)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 62)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 182)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 350)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 182)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 638)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 182)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 926)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 243)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 27)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 243)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 315)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 243)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 603)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 243)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 891)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 244)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 28)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 244)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 316)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 244)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 604)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 244)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 892)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 29)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 317)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 605)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 893)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 252)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 30)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 252)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 318)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 252)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 606)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 252)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 894)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 253)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 31)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 253)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 319)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 253)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 607)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 253)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 895)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 32)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 320)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 608)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 896)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 261)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 33)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 261)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 321)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 261)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 609)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 261)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 897)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 262)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 34)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 262)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 322)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 262)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 610)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 262)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 898)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 263)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 35)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 263)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 323)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 263)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 611)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 263)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 899)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 243)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 63)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 243)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 351)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 243)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 639)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 243)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 927)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 244)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 64)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 244)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 352)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 244)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 640)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 244)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 928)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 65)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 353)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 641)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 929)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 252)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 66)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 252)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 354)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 252)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 642)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 252)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 930)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 253)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 67)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 253)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 355)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 253)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 643)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 253)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 931)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 68)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 356)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 644)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 932)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 261)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 69)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 261)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 357)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 261)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 645)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 261)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 933)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 262)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 70)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 262)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 358)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 262)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 646)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 262)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 934)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 263)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 71)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 263)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 359)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 263)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 647)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(floormod(threadIdx.x, 49), 7)*9) + floormod(threadIdx.x, 7)) + 263)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*72) + 935)]))
          }
        }
        for (i1.inner: int32, 0, 2) {
          compute[((((blockIdx.x*1568) + (floordiv(threadIdx.x, 49)*98)) + (i1.inner*49)) + floormod(threadIdx.x, 49))] = max((conv2d_nchw_1[i1.inner] + bias[(((blockIdx.x*32) + (floordiv(threadIdx.x, 49)*2)) + i1.inner)]), 0f32)
          compute[(((((blockIdx.x*1568) + (floordiv(threadIdx.x, 49)*98)) + (i1.inner*49)) + floormod(threadIdx.x, 49)) + 392)] = max((conv2d_nchw_1[(i1.inner + 2)] + bias[((((blockIdx.x*32) + (floordiv(threadIdx.x, 49)*2)) + i1.inner) + 8)]), 0f32)
          compute[(((((blockIdx.x*1568) + (floordiv(threadIdx.x, 49)*98)) + (i1.inner*49)) + floormod(threadIdx.x, 49)) + 784)] = max((conv2d_nchw_1[(i1.inner + 4)] + bias[((((blockIdx.x*32) + (floordiv(threadIdx.x, 49)*2)) + i1.inner) + 16)]), 0f32)
          compute[(((((blockIdx.x*1568) + (floordiv(threadIdx.x, 49)*98)) + (i1.inner*49)) + floormod(threadIdx.x, 49)) + 1176)] = max((conv2d_nchw_1[(i1.inner + 6)] + bias[((((blockIdx.x*32) + (floordiv(threadIdx.x, 49)*2)) + i1.inner) + 24)]), 0f32)
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.333 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.


.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=2)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=4)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=4)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=1)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=4)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=3)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=3)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=2)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=4)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=4)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=196)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=196)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(196) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[8];
      __shared__ float pad_temp_shared[324];
      __shared__ float kernel_shared[1152];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[7] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 128; ++rc_outer_outer) {
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = (((((9 <= (((int)threadIdx.x) % 81)) && ((((int)threadIdx.x) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 9))) && ((((int)threadIdx.x) % 9) < 8)) ? data[(((((rc_outer_outer * 196) + ((((int)threadIdx.x) / 81) * 49)) + (((((int)threadIdx.x) % 81) / 9) * 7)) + (((int)threadIdx.x) % 9)) - 8)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 128) {
          pad_temp_shared[(((int)threadIdx.x) + 196)] = (((((9 <= ((((int)threadIdx.x) + 34) % 81)) && (((((int)threadIdx.x) + 34) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 7) % 9))) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 196) / 81) * 49)) + ((((((int)threadIdx.x) + 34) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 7) % 9)) - 8)] : 0.000000e+00f);
        }
        kernel_shared[((int)threadIdx.x)] = kernel[((((((int)blockIdx.x) * 147456) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36))];
        kernel_shared[(((int)threadIdx.x) + 196)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 196) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 16) % 36))];
        kernel_shared[(((int)threadIdx.x) + 392)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 392) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 32) % 36))];
        kernel_shared[(((int)threadIdx.x) + 588)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 588) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 12) % 36))];
        kernel_shared[(((int)threadIdx.x) + 784)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 784) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 28) % 36))];
        if (((int)threadIdx.x) < 172) {
          kernel_shared[(((int)threadIdx.x) + 980)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 980) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 8) % 36))];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[((((int)threadIdx.x) / 49) * 72)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 288)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 576)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 864)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 1)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 289)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 577)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 865)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 2)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 290)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 578)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 866)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 3)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 291)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 579)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 867)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 4)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 292)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 580)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 868)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 5)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 293)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 581)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 869)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 6)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 294)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 582)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 870)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 7)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 295)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 583)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 871)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 8)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 296)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 584)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 872)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 36)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 324)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 612)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 900)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 37)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 325)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 613)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 901)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 38)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 326)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 614)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 902)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 39)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 327)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 615)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 903)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 40)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 328)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 616)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 904)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 41)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 329)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 617)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 905)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 42)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 330)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 618)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 906)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 43)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 331)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 619)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 907)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 44)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 332)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 620)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 908)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 9)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 297)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 585)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 873)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 10)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 298)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 586)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 874)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 11)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 299)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 587)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 875)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 12)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 300)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 588)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 876)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 13)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 301)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 589)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 877)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 14)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 302)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 590)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 878)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 15)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 303)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 591)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 879)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 16)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 304)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 592)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 880)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 17)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 305)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 593)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 881)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 45)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 333)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 621)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 909)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 46)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 334)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 622)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 910)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 47)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 335)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 623)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 911)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 48)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 336)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 624)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 912)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 49)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 337)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 625)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 913)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 50)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 338)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 626)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 914)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 51)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 339)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 627)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 915)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 52)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 340)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 628)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 916)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 53)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 341)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 629)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 917)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 162)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 18)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 162)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 306)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 162)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 594)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 162)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 882)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 163)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 19)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 163)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 307)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 163)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 595)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 163)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 883)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 164)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 20)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 164)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 308)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 164)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 596)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 164)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 884)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 171)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 21)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 171)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 309)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 171)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 597)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 171)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 885)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 172)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 22)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 172)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 310)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 172)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 598)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 172)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 886)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 173)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 23)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 173)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 311)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 173)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 599)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 173)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 887)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 180)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 24)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 180)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 312)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 180)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 600)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 180)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 888)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 181)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 25)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 181)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 313)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 181)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 601)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 181)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 889)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 182)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 26)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 182)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 314)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 182)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 602)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 182)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 890)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 162)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 54)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 162)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 342)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 162)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 630)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 162)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 918)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 163)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 55)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 163)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 343)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 163)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 631)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 163)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 919)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 164)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 56)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 164)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 344)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 164)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 632)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 164)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 920)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 171)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 57)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 171)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 345)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 171)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 633)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 171)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 921)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 172)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 58)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 172)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 346)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 172)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 634)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 172)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 922)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 173)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 59)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 173)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 347)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 173)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 635)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 173)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 923)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 180)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 60)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 180)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 348)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 180)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 636)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 180)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 924)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 181)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 61)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 181)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 349)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 181)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 637)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 181)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 925)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 182)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 62)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 182)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 350)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 182)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 638)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 182)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 926)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 243)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 27)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 243)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 315)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 243)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 603)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 243)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 891)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 244)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 28)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 244)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 316)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 244)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 604)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 244)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 892)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 29)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 317)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 605)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 893)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 252)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 30)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 252)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 318)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 252)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 606)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 252)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 894)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 253)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 31)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 253)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 319)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 253)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 607)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 253)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 895)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 254)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 32)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 254)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 320)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 254)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 608)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 254)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 896)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 261)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 33)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 261)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 321)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 261)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 609)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 261)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 897)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 262)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 34)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 262)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 322)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 262)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 610)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 262)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 898)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 263)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 35)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 263)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 323)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 263)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 611)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 263)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 899)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 243)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 63)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 243)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 351)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 243)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 639)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 243)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 927)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 244)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 64)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 244)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 352)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 244)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 640)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 244)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 928)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 65)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 353)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 641)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 929)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 252)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 66)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 252)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 354)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 252)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 642)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 252)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 930)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 253)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 67)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 253)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 355)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 253)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 643)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 253)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 931)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 254)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 68)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 254)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 356)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 254)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 644)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 254)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 932)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 261)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 69)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 261)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 357)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 261)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 645)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 261)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 933)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 262)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 70)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 262)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 358)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 262)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 646)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 262)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 934)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 263)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 71)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 263)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 359)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 263)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 647)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((((int)threadIdx.x) % 49) / 7) * 9) + (((int)threadIdx.x) % 7)) + 263)] * kernel_shared[(((((int)threadIdx.x) / 49) * 72) + 935)]));
      }
      for (int i1_inner = 0; i1_inner < 2; ++i1_inner) {
        compute[((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 49) * 98)) + (i1_inner * 49)) + (((int)threadIdx.x) % 49))] = max((conv2d_nchw[i1_inner] + bias[(((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 49) * 2)) + i1_inner)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 49) * 98)) + (i1_inner * 49)) + (((int)threadIdx.x) % 49)) + 392)] = max((conv2d_nchw[(i1_inner + 2)] + bias[((((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 49) * 2)) + i1_inner) + 8)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 49) * 98)) + (i1_inner * 49)) + (((int)threadIdx.x) % 49)) + 784)] = max((conv2d_nchw[(i1_inner + 4)] + bias[((((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 49) * 2)) + i1_inner) + 16)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 49) * 98)) + (i1_inner * 49)) + (((int)threadIdx.x) % 49)) + 1176)] = max((conv2d_nchw[(i1_inner + 6)] + bias[((((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 49) * 2)) + i1_inner) + 24)]), 0.000000e+00f);
      }
    }





A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.7/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  33.693 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
