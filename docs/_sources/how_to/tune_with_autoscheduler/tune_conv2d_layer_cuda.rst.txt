
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: default



    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 54-59

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 59-71

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 72-75

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 75-88

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 89-106

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 106-116

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 117-123

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 123-132

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 133-136

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 136-140

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute}
      preflattened_buffer_map = {data_1: data_3: Buffer(data_2, float32, [1, 512, 7, 7], []), kernel_1: kernel_3: Buffer(kernel_2, float32, [512, 512, 3, 3], []), bias_1: bias_3: Buffer(bias_2, float32, [1, 512, 1, 1], []), compute_1: compute_3: Buffer(compute_2, float32, [1, 512, 7, 7], [])} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 32;
      allocate(conv2d_nchw: Pointer(local float32), float32, [2]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [6272]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [2048]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [2], [], scope="local", align=8)[0] = 0f32
        conv2d_nchw_1[1] = 0f32
        for (rc.outer.outer: int32, 0, 4) {
          for (ry.outer.outer: int32, 0, 3) {
            for (rx.outer.outer: int32, 0, 3) {
              let cse_var_2: int32 = (rc.outer.outer*1152)
              let cse_var_1: int32 = (ry.outer.outer*3)
               {
                attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1: Buffer(pad_temp.shared, float32, [6272], [], scope="shared")[threadIdx.x_1] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) - 8)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1[(threadIdx.x_1 + 392)] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) + 384)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1[(threadIdx.x_1 + 784)] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) + 776)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1[(threadIdx.x_1 + 1176)] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) + 1168)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1[(threadIdx.x_1 + 1568)] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) + 1560)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1[(threadIdx.x_1 + 1960)] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) + 1952)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1[(threadIdx.x_1 + 2352)] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) + 2344)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1[(threadIdx.x_1 + 2744)] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) + 2736)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1[(threadIdx.x_1 + 3136)] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) + 3128)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1[(threadIdx.x_1 + 3528)] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) + 3520)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1[(threadIdx.x_1 + 3920)] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) + 3912)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1[(threadIdx.x_1 + 4312)] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) + 4304)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1[(threadIdx.x_1 + 4704)] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) + 4696)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1[(threadIdx.x_1 + 5096)] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) + 5088)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1[(threadIdx.x_1 + 5488)] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) + 5480)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                pad_temp.shared_1[(threadIdx.x_1 + 5880)] = @tir.if_then_else(((((1 <= (floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer)) && ((floordiv(floormod(threadIdx.x_1, 49), 7) + ry.outer.outer) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((rc.outer.outer*6272) + (ry.outer.outer*7)) + threadIdx.x_1) + rx.outer.outer) + 5872)], 0f32, dtype=float32)
                attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                kernel.shared_1: Buffer(kernel.shared, float32, [2048], [], scope="shared")[threadIdx.x_2] = kernel[((((((blockIdx.x*73728) + (floordiv(threadIdx.x_2, 128)*4608)) + cse_var_2) + (floormod(threadIdx.x_2, 128)*9)) + cse_var_1) + rx.outer.outer)]
                attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                kernel.shared_1[(threadIdx.x_2 + 392)] = kernel[((((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 392), 128)*4608)) + cse_var_2) + (floormod((threadIdx.x_2 + 8), 128)*9)) + cse_var_1) + rx.outer.outer)]
                attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                kernel.shared_1[(threadIdx.x_2 + 784)] = kernel[((((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 784), 128)*4608)) + cse_var_2) + (floormod((threadIdx.x_2 + 16), 128)*9)) + cse_var_1) + rx.outer.outer)]
                attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                kernel.shared_1[(threadIdx.x_2 + 1176)] = kernel[((((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 1176), 128)*4608)) + cse_var_2) + (floormod((threadIdx.x_2 + 24), 128)*9)) + cse_var_1) + rx.outer.outer)]
                attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                kernel.shared_1[(threadIdx.x_2 + 1568)] = kernel[((((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 1568), 128)*4608)) + cse_var_2) + (floormod((threadIdx.x_2 + 32), 128)*9)) + cse_var_1) + rx.outer.outer)]
                attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 392;
                if @tir.likely((threadIdx.x_2 < 88), dtype=bool) {
                  kernel.shared_1[(threadIdx.x_2 + 1960)] = kernel[(((((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 1960), 128)*4608)) + cse_var_2) + (threadIdx.x_2*9)) + cse_var_1) + rx.outer.outer) + 360)]
                }
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[floormod(threadIdx.x, 49)]*kernel.shared_1[(floordiv(threadIdx.x, 49)*256)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 1)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 2)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 3)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 196)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 4)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 5)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 294)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 6)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 343)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 7)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 392)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 8)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 441)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 9)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 490)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 10)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 539)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 11)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 588)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 12)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 637)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 13)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 686)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 14)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 735)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 15)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[floormod(threadIdx.x, 49)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 128)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 129)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 130)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 131)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 196)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 132)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 133)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 294)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 134)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 343)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 135)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 392)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 136)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 441)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 137)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 490)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 138)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 539)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 139)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 588)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 140)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 637)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 141)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 686)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 142)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 735)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 143)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 784)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 16)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 833)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 17)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 882)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 18)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 931)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 19)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 980)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 20)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1029)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 21)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1078)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 22)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1127)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 23)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1176)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 24)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1225)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 25)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1274)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 26)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1323)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 27)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1372)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 28)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1421)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 29)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1470)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 30)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1519)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 31)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 784)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 144)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 833)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 145)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 882)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 146)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 931)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 147)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 980)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 148)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1029)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 149)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1078)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 150)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1127)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 151)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1176)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 152)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1225)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 153)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1274)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 154)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1323)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 155)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1372)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 156)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1421)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 157)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1470)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 158)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1519)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 159)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1568)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 32)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1617)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 33)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1666)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 34)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1715)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 35)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1764)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 36)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1813)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 37)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1862)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 38)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1911)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 39)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1960)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 40)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2009)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 41)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2058)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 42)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2107)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 43)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2156)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 44)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2205)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 45)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2254)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 46)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2303)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 47)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1568)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 160)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1617)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 161)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1666)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 162)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1715)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 163)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1764)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 164)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1813)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 165)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1862)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 166)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1911)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 167)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1960)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 168)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2009)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 169)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2058)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 170)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2107)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 171)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2156)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 172)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2205)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 173)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2254)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 174)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2303)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 175)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2352)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 48)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2401)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 49)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2450)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 50)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2499)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 51)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2548)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 52)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2597)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 53)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2646)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 54)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2695)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 55)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2744)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 56)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2793)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 57)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2842)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 58)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2891)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 59)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2940)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 60)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2989)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 61)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3038)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 62)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3087)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 63)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2352)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 176)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2401)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 177)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2450)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 178)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2499)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 179)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2548)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 180)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2597)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 181)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2646)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 182)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2695)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 183)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2744)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 184)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2793)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 185)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2842)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 186)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2891)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 187)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2940)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 188)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 2989)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 189)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3038)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 190)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3087)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 191)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3136)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 64)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3185)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 65)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3234)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 66)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3283)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 67)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3332)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 68)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3381)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 69)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3430)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 70)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3479)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 71)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3528)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 72)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3577)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 73)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3626)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 74)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3675)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 75)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3724)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 76)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3773)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 77)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3822)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 78)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3871)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 79)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3136)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 192)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3185)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 193)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3234)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 194)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3283)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 195)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3332)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 196)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3381)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 197)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3430)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 198)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3479)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 199)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3528)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 200)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3577)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 201)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3626)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 202)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3675)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 203)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3724)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 204)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3773)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 205)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3822)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 206)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3871)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 207)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3920)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 80)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3969)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 81)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4018)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 82)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4067)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 83)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4116)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 84)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4165)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 85)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4214)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 86)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4263)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 87)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4312)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 88)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4361)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 89)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4410)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 90)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4459)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 91)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4508)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 92)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4557)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 93)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4606)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 94)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4655)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 95)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3920)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 208)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 3969)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 209)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4018)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 210)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4067)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 211)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4116)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 212)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4165)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 213)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4214)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 214)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4263)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 215)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4312)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 216)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4361)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 217)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4410)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 218)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4459)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 219)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4508)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 220)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4557)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 221)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4606)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 222)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4655)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 223)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4704)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 96)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4753)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 97)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4802)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 98)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4851)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 99)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4900)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 100)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4949)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 101)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4998)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 102)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5047)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 103)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5096)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 104)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5145)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 105)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5194)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 106)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5243)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 107)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5292)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 108)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5341)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 109)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5390)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 110)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5439)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 111)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4704)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 224)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4753)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 225)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4802)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 226)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4851)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 227)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4900)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 228)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4949)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 229)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 4998)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 230)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5047)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 231)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5096)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 232)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5145)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 233)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5194)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 234)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5243)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 235)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5292)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 236)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5341)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 237)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5390)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 238)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5439)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 239)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5488)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 112)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5537)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 113)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5586)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 114)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5635)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 115)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5684)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 116)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5733)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 117)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5782)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 118)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5831)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 119)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5880)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 120)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5929)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 121)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5978)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 122)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6027)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 123)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6076)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 124)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6125)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 125)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6174)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 126)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6223)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 127)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5488)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 240)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5537)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 241)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5586)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 242)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5635)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 243)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5684)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 244)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5733)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 245)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5782)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 246)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5831)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 247)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5880)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 248)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5929)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 249)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 5978)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 250)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6027)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 251)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6076)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 252)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6125)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 253)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6174)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 254)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 6223)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*256) + 255)]))
              }
            }
          }
        }
        for (i1.inner: int32, 0, 2) {
          compute[((((blockIdx.x*784) + (floordiv(threadIdx.x, 49)*98)) + (i1.inner*49)) + floormod(threadIdx.x, 49))] = max((conv2d_nchw_1[i1.inner] + bias[(((blockIdx.x*16) + (floordiv(threadIdx.x, 49)*2)) + i1.inner)]), 0f32)
        }
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 141-144

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 144-171

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.387 ms




.. GENERATED FROM PYTHON SOURCE LINES 172-177

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 179-182

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=2)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=8)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=16)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=8)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=2)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=8)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=392)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=392)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(392) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[2];
      __shared__ float pad_temp_shared[6272];
      __shared__ float kernel_shared[2048];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 4; ++rc_outer_outer) {
        for (int ry_outer_outer = 0; ry_outer_outer < 3; ++ry_outer_outer) {
          for (int rx_outer_outer = 0; rx_outer_outer < 3; ++rx_outer_outer) {
            __syncthreads();
            pad_temp_shared[((int)threadIdx.x)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) - 8)] : 0.000000e+00f);
            pad_temp_shared[(((int)threadIdx.x) + 392)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) + 384)] : 0.000000e+00f);
            pad_temp_shared[(((int)threadIdx.x) + 784)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) + 776)] : 0.000000e+00f);
            pad_temp_shared[(((int)threadIdx.x) + 1176)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) + 1168)] : 0.000000e+00f);
            pad_temp_shared[(((int)threadIdx.x) + 1568)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) + 1560)] : 0.000000e+00f);
            pad_temp_shared[(((int)threadIdx.x) + 1960)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) + 1952)] : 0.000000e+00f);
            pad_temp_shared[(((int)threadIdx.x) + 2352)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) + 2344)] : 0.000000e+00f);
            pad_temp_shared[(((int)threadIdx.x) + 2744)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) + 2736)] : 0.000000e+00f);
            pad_temp_shared[(((int)threadIdx.x) + 3136)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) + 3128)] : 0.000000e+00f);
            pad_temp_shared[(((int)threadIdx.x) + 3528)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) + 3520)] : 0.000000e+00f);
            pad_temp_shared[(((int)threadIdx.x) + 3920)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) + 3912)] : 0.000000e+00f);
            pad_temp_shared[(((int)threadIdx.x) + 4312)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) + 4304)] : 0.000000e+00f);
            pad_temp_shared[(((int)threadIdx.x) + 4704)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) + 4696)] : 0.000000e+00f);
            pad_temp_shared[(((int)threadIdx.x) + 5096)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) + 5088)] : 0.000000e+00f);
            pad_temp_shared[(((int)threadIdx.x) + 5488)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) + 5480)] : 0.000000e+00f);
            pad_temp_shared[(((int)threadIdx.x) + 5880)] = (((((1 <= (((((int)threadIdx.x) % 49) / 7) + ry_outer_outer)) && ((((((int)threadIdx.x) % 49) / 7) + ry_outer_outer) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 6272) + (ry_outer_outer * 7)) + ((int)threadIdx.x)) + rx_outer_outer) + 5872)] : 0.000000e+00f);
            kernel_shared[((int)threadIdx.x)] = kernel[((((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) >> 7) * 4608)) + (rc_outer_outer * 1152)) + ((((int)threadIdx.x) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            kernel_shared[(((int)threadIdx.x) + 392)] = kernel[((((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 392) >> 7) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 8) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            kernel_shared[(((int)threadIdx.x) + 784)] = kernel[((((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 784) >> 7) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 16) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            kernel_shared[(((int)threadIdx.x) + 1176)] = kernel[((((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 1176) >> 7) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 24) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            kernel_shared[(((int)threadIdx.x) + 1568)] = kernel[((((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 1568) >> 7) * 4608)) + (rc_outer_outer * 1152)) + (((((int)threadIdx.x) + 32) & 127) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer)];
            if (((int)threadIdx.x) < 88) {
              kernel_shared[(((int)threadIdx.x) + 1960)] = kernel[(((((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 1960) >> 7) * 4608)) + (rc_outer_outer * 1152)) + (((int)threadIdx.x) * 9)) + (ry_outer_outer * 3)) + rx_outer_outer) + 360)];
            }
            __syncthreads();
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[((((int)threadIdx.x) / 49) * 256)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 1)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 98)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 2)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 147)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 3)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 4)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 5)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 294)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 6)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 343)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 7)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 8)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 9)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 490)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 10)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 539)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 11)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 588)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 12)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 13)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 686)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 14)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 735)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 15)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 128)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 129)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 98)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 130)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 147)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 131)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 132)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 133)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 294)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 134)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 343)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 135)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 136)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 137)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 490)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 138)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 539)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 139)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 588)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 140)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 141)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 686)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 142)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 735)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 143)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 784)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 16)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 17)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 18)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 931)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 19)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 980)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 20)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1029)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 21)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 22)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1127)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 23)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1176)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 24)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1225)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 25)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 26)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 27)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1372)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 28)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1421)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 29)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1470)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 30)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 31)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 784)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 144)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 145)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 146)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 931)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 147)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 980)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 148)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1029)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 149)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 150)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1127)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 151)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1176)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 152)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1225)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 153)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 154)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 155)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1372)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 156)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1421)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 157)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1470)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 158)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 159)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1568)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 32)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1617)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 33)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1666)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 34)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1715)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 35)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1764)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 36)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1813)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 37)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1862)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 38)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1911)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 39)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1960)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 40)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2009)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 41)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2058)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 42)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2107)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 43)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2156)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 44)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2205)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 45)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2254)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 46)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2303)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 47)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1568)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 160)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1617)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 161)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1666)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 162)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1715)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 163)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1764)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 164)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1813)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 165)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1862)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 166)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1911)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 167)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1960)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 168)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2009)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 169)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2058)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 170)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2107)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 171)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2156)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 172)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2205)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 173)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2254)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 174)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2303)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 175)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2352)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 48)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2401)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 49)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2450)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 50)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2499)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 51)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2548)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 52)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2597)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 53)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2646)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 54)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2695)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 55)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2744)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 56)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2793)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 57)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2842)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 58)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2891)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 59)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2940)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 60)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2989)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 61)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3038)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 62)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3087)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 63)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2352)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 176)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2401)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 177)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2450)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 178)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2499)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 179)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2548)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 180)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2597)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 181)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2646)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 182)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2695)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 183)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2744)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 184)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2793)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 185)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2842)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 186)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2891)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 187)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2940)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 188)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 2989)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 189)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3038)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 190)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3087)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 191)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3136)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 64)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3185)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 65)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3234)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 66)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3283)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 67)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3332)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 68)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3381)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 69)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3430)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 70)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3479)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 71)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3528)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 72)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3577)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 73)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3626)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 74)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3675)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 75)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3724)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 76)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3773)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 77)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3822)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 78)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3871)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 79)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3136)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 192)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3185)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 193)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3234)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 194)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3283)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 195)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3332)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 196)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3381)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 197)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3430)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 198)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3479)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 199)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3528)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 200)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3577)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 201)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3626)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 202)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3675)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 203)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3724)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 204)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3773)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 205)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3822)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 206)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3871)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 207)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3920)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 80)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3969)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 81)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4018)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 82)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4067)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 83)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4116)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 84)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4165)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 85)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4214)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 86)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4263)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 87)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4312)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 88)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4361)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 89)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4410)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 90)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4459)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 91)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4508)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 92)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4557)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 93)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4606)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 94)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4655)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 95)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3920)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 208)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 3969)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 209)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4018)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 210)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4067)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 211)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4116)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 212)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4165)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 213)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4214)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 214)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4263)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 215)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4312)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 216)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4361)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 217)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4410)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 218)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4459)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 219)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4508)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 220)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4557)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 221)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4606)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 222)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4655)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 223)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4704)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 96)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4753)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 97)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4802)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 98)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4851)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 99)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4900)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 100)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4949)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 101)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4998)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 102)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5047)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 103)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5096)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 104)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5145)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 105)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5194)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 106)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5243)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 107)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5292)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 108)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5341)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 109)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5390)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 110)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5439)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 111)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4704)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 224)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4753)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 225)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4802)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 226)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4851)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 227)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4900)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 228)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4949)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 229)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 4998)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 230)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5047)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 231)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5096)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 232)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5145)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 233)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5194)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 234)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5243)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 235)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5292)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 236)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5341)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 237)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5390)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 238)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5439)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 239)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5488)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 112)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5537)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 113)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5586)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 114)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5635)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 115)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5684)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 116)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5733)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 117)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5782)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 118)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5831)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 119)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5880)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 120)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5929)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 121)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5978)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 122)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6027)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 123)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6076)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 124)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6125)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 125)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6174)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 126)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6223)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 127)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5488)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 240)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5537)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 241)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5586)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 242)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5635)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 243)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5684)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 244)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5733)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 245)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5782)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 246)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5831)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 247)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5880)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 248)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5929)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 249)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 5978)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 250)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6027)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 251)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6076)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 252)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6125)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 253)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6174)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 254)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 6223)] * kernel_shared[(((((int)threadIdx.x) / 49) * 256) + 255)]));
          }
        }
      }
      for (int i1_inner = 0; i1_inner < 2; ++i1_inner) {
        compute[((((((int)blockIdx.x) * 784) + ((((int)threadIdx.x) / 49) * 98)) + (i1_inner * 49)) + (((int)threadIdx.x) % 49))] = max((conv2d_nchw[i1_inner] + bias[(((((int)blockIdx.x) * 16) + ((((int)threadIdx.x) / 49) * 2)) + i1_inner)]), 0.000000e+00f);
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 190-194

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 194-216

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /venv/apache-tvm-py3.7/lib/python3.7/site-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  24.400 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
