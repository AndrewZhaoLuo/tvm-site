
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: default



    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 54-59

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 59-71

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 72-75

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 75-88

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 89-106

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 106-116

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 117-123

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 123-132

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 133-136

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 136-140

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute}
      preflattened_buffer_map = {data_1: data_3: Buffer(data_2, float32, [1, 512, 7, 7], []), kernel_1: kernel_3: Buffer(kernel_2, float32, [512, 512, 3, 3], []), bias_1: bias_3: Buffer(bias_2, float32, [1, 512, 1, 1], []), compute_1: compute_3: Buffer(compute_2, float32, [1, 512, 7, 7], [])} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 64;
      allocate(conv2d_nchw: Pointer(local float32), float32, [8]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [5184]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [4608]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [16], [], scope="local", align=16)[0] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[6] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[7] = 0f32
        for (rc.outer.outer: int32, 0, 8) {
          let cse_var_2: int32 = (rc.outer.outer*3136)
          let cse_var_1: int32 = (rc.outer.outer*576)
           {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1: Buffer(pad_temp.shared, float32, [5184], [], scope="shared")[(threadIdx.x_1*12)] = @tir.if_then_else((((3 <= floormod((threadIdx.x_1*4), 27)) && (floormod((threadIdx.x_1*12), 81) < 72)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv((threadIdx.x_1*4), 27)*49)) + (floordiv(floormod((threadIdx.x_1*4), 27), 3)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1)] = @tir.if_then_else(((3 <= floormod((threadIdx.x_1*4), 27)) && (floormod(((threadIdx.x_1*12) + 1), 81) < 72)), data[((((cse_var_2 + (floordiv((threadIdx.x_1*4), 27)*49)) + (floordiv(floormod((threadIdx.x_1*4), 27), 3)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2)] = @tir.if_then_else((((3 <= floormod((threadIdx.x_1*4), 27)) && (floormod(((threadIdx.x_1*12) + 2), 81) < 72)) && (floormod(threadIdx.x_1, 3) < 2)), data[((((cse_var_2 + (floordiv((threadIdx.x_1*4), 27)*49)) + (floordiv(floormod((threadIdx.x_1*4), 27), 3)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 6)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 3)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 1), 27)) && (floormod(((threadIdx.x_1*12) + 3), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 1), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 4)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 1), 27)) && (floormod(((threadIdx.x_1*12) + 4), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 1), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 5)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 1), 27)) && (floormod(((threadIdx.x_1*12) + 5), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 1), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 6)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 2), 27)) && (floormod(((threadIdx.x_1*12) + 6), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 2), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 2), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 7)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 2), 27)) && (floormod(((threadIdx.x_1*12) + 7), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 2), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 2), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 8)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 2), 27)) && (floormod(((threadIdx.x_1*12) + 8), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 2), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 2), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 9)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 9), 81) < 72)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 3), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 10)] = @tir.if_then_else(((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 10), 81) < 72)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 3), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 11)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 11), 81) < 72)) && (floormod(threadIdx.x_1, 3) < 2)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 3), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 6)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*12) + 588)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 7), 27)) && (floormod(((threadIdx.x_1*12) + 21), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 196), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 7), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 589)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 7), 27)) && (floormod(((threadIdx.x_1*12) + 22), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 196), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 7), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 590)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 7), 27)) && (floormod(((threadIdx.x_1*12) + 23), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 196), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 7), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 591)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 8), 27)) && (floormod(((threadIdx.x_1*12) + 24), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 197), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 8), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 592)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 8), 27)) && (floormod(((threadIdx.x_1*12) + 25), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 197), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 8), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 593)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 8), 27)) && (floormod(((threadIdx.x_1*12) + 26), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 197), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 8), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 594)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 3), 9)) && (floormod(((threadIdx.x_1*12) + 27), 81) < 72)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 198), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 3), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 595)] = @tir.if_then_else(((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 3), 9)) && (floormod(((threadIdx.x_1*12) + 28), 81) < 72)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 198), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 3), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 596)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 3), 9)) && (floormod(((threadIdx.x_1*12) + 29), 81) < 72)) && (floormod(threadIdx.x_1, 3) < 2)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 198), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 3), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 6)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 597)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 196), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 30), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 199), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 196), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 598)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 196), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 31), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 199), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 196), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 599)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 196), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 32), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 199), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 196), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*12) + 1176)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 14), 27)) && (floormod(((threadIdx.x_1*12) + 42), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 392), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 14), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1177)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 14), 27)) && (floormod(((threadIdx.x_1*12) + 43), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 392), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 14), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1178)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 14), 27)) && (floormod(((threadIdx.x_1*12) + 44), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 392), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 14), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1179)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 5), 9)) && (floormod(((threadIdx.x_1*12) + 45), 81) < 72)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 393), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 5), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1180)] = @tir.if_then_else(((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 5), 9)) && (floormod(((threadIdx.x_1*12) + 46), 81) < 72)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 393), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 5), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1181)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 5), 9)) && (floormod(((threadIdx.x_1*12) + 47), 81) < 72)) && (floormod(threadIdx.x_1, 3) < 2)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 393), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 5), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 6)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1182)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 16), 27)) && (floormod(((threadIdx.x_1*12) + 48), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 394), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 16), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1183)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 16), 27)) && (floormod(((threadIdx.x_1*12) + 49), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 394), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 16), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1184)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 16), 27)) && (floormod(((threadIdx.x_1*12) + 50), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 394), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 16), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1185)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 392), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 51), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 395), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 392), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1186)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 392), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 52), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 395), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 392), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1187)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 392), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 53), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 395), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 392), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*12) + 1764)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 7), 9)) && (floormod(((threadIdx.x_1*12) + 63), 81) < 72)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 588), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 7), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1765)] = @tir.if_then_else(((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 7), 9)) && (floormod(((threadIdx.x_1*12) + 64), 81) < 72)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 588), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 7), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1766)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 7), 9)) && (floormod(((threadIdx.x_1*12) + 65), 81) < 72)) && (floormod(threadIdx.x_1, 3) < 2)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 588), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 7), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 6)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1767)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 22), 27)) && (floormod(((threadIdx.x_1*12) + 66), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 589), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 22), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1768)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 22), 27)) && (floormod(((threadIdx.x_1*12) + 67), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 589), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 22), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1769)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 22), 27)) && (floormod(((threadIdx.x_1*12) + 68), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 589), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 22), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1770)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 23), 27)) && (floormod(((threadIdx.x_1*12) + 69), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 590), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 23), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1771)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 23), 27)) && (floormod(((threadIdx.x_1*12) + 70), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 590), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 23), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1772)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 23), 27)) && (floormod(((threadIdx.x_1*12) + 71), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 590), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 23), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1773)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 8), 9)) && (floormod(((threadIdx.x_1*12) + 72), 81) < 72)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 591), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 8), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1774)] = @tir.if_then_else(((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 8), 9)) && (floormod(((threadIdx.x_1*12) + 73), 81) < 72)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 591), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 8), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 1775)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 8), 9)) && (floormod(((threadIdx.x_1*12) + 74), 81) < 72)) && (floormod(threadIdx.x_1, 3) < 2)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 591), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 8), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 6)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*12) + 2352)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 1), 27)) && (floormod(((threadIdx.x_1*12) + 3), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 784), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 1), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2353)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 1), 27)) && (floormod(((threadIdx.x_1*12) + 4), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 784), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 1), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2354)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 1), 27)) && (floormod(((threadIdx.x_1*12) + 5), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 784), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 1), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2355)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 2), 27)) && (floormod(((threadIdx.x_1*12) + 6), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 785), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 2), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2356)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 2), 27)) && (floormod(((threadIdx.x_1*12) + 7), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 785), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 2), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2357)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 2), 27)) && (floormod(((threadIdx.x_1*12) + 8), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 785), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 2), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2358)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 9), 81) < 72)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 786), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2359)] = @tir.if_then_else(((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 10), 81) < 72)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 786), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2360)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 11), 81) < 72)) && (floormod(threadIdx.x_1, 3) < 2)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 786), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 6)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2361)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 784), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 12), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 787), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 784), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2362)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 784), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 13), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 787), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 784), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2363)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 784), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 14), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 787), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 784), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*12) + 2940)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 8), 27)) && (floormod(((threadIdx.x_1*12) + 24), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 980), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 8), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2941)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 8), 27)) && (floormod(((threadIdx.x_1*12) + 25), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 980), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 8), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2942)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 8), 27)) && (floormod(((threadIdx.x_1*12) + 26), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 980), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 8), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2943)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 3), 9)) && (floormod(((threadIdx.x_1*12) + 27), 81) < 72)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 981), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 3), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2944)] = @tir.if_then_else(((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 3), 9)) && (floormod(((threadIdx.x_1*12) + 28), 81) < 72)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 981), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 3), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2945)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 3), 9)) && (floormod(((threadIdx.x_1*12) + 29), 81) < 72)) && (floormod(threadIdx.x_1, 3) < 2)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 981), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 3), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 6)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2946)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 10), 27)) && (floormod(((threadIdx.x_1*12) + 30), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 982), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 10), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2947)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 10), 27)) && (floormod(((threadIdx.x_1*12) + 31), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 982), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 10), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2948)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 10), 27)) && (floormod(((threadIdx.x_1*12) + 32), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 982), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 10), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2949)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 980), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 33), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 983), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 980), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2950)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 980), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 34), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 983), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 980), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 2951)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 980), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 35), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 983), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 980), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*12) + 3528)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 5), 9)) && (floormod(((threadIdx.x_1*12) + 45), 81) < 72)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1176), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 5), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 3529)] = @tir.if_then_else(((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 5), 9)) && (floormod(((threadIdx.x_1*12) + 46), 81) < 72)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1176), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 5), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 3530)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 5), 9)) && (floormod(((threadIdx.x_1*12) + 47), 81) < 72)) && (floormod(threadIdx.x_1, 3) < 2)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1176), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 5), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 6)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 3531)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 16), 27)) && (floormod(((threadIdx.x_1*12) + 48), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1177), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 16), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 3532)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 16), 27)) && (floormod(((threadIdx.x_1*12) + 49), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1177), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 16), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 3533)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 16), 27)) && (floormod(((threadIdx.x_1*12) + 50), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1177), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 16), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 3534)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 17), 27)) && (floormod(((threadIdx.x_1*12) + 51), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1178), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 17), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 3535)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 17), 27)) && (floormod(((threadIdx.x_1*12) + 52), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1178), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 17), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 3536)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 17), 27)) && (floormod(((threadIdx.x_1*12) + 53), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1178), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 17), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 3537)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 6), 9)) && (floormod(((threadIdx.x_1*12) + 54), 81) < 72)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1179), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 6), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 3538)] = @tir.if_then_else(((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 6), 9)) && (floormod(((threadIdx.x_1*12) + 55), 81) < 72)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1179), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 6), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 3539)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 6), 9)) && (floormod(((threadIdx.x_1*12) + 56), 81) < 72)) && (floormod(threadIdx.x_1, 3) < 2)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1179), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 6), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 6)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              pad_temp.shared_1[((threadIdx.x_1*12) + 4116)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 22), 27)) && (floormod(((threadIdx.x_1*12) + 66), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1372), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 22), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 4117)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 22), 27)) && (floormod(((threadIdx.x_1*12) + 67), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1372), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 22), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 4118)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 22), 27)) && (floormod(((threadIdx.x_1*12) + 68), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1372), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 22), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 4119)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 23), 27)) && (floormod(((threadIdx.x_1*12) + 69), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1373), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 23), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 4120)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 23), 27)) && (floormod(((threadIdx.x_1*12) + 70), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1373), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 23), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 4121)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 23), 27)) && (floormod(((threadIdx.x_1*12) + 71), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1373), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 23), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 4122)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 8), 9)) && (floormod(((threadIdx.x_1*12) + 72), 81) < 72)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1374), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 8), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 4123)] = @tir.if_then_else(((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 8), 9)) && (floormod(((threadIdx.x_1*12) + 73), 81) < 72)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1374), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 8), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 4124)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 8), 9)) && (floormod(((threadIdx.x_1*12) + 74), 81) < 72)) && (floormod(threadIdx.x_1, 3) < 2)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1374), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 8), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 6)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 4125)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 1372), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 75), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1375), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 1372), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 4126)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 1372), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 76), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1375), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 1372), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*12) + 4127)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 1372), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 77), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1375), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 1372), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              if @tir.likely((threadIdx.x_1 < 40), dtype=bool) {
                pad_temp.shared_1[((threadIdx.x_1*12) + 4704)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 2), 27)) && (floormod(((threadIdx.x_1*12) + 6), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1568), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 2), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              }
              if @tir.likely((threadIdx.x_1 < 40), dtype=bool) {
                pad_temp.shared_1[((threadIdx.x_1*12) + 4705)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 2), 27)) && (floormod(((threadIdx.x_1*12) + 7), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1568), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 2), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              }
              if @tir.likely((threadIdx.x_1 < 40), dtype=bool) {
                pad_temp.shared_1[((threadIdx.x_1*12) + 4706)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 2), 27)) && (floormod(((threadIdx.x_1*12) + 8), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1568), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 2), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
              }
              if @tir.likely((threadIdx.x_1 < 40), dtype=bool) {
                pad_temp.shared_1[((threadIdx.x_1*12) + 4707)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 9), 81) < 72)) && (1 <= floormod(threadIdx.x_1, 3))), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1569), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 8)], 0f32, dtype=float32)
              }
              if @tir.likely((threadIdx.x_1 < 40), dtype=bool) {
                pad_temp.shared_1[((threadIdx.x_1*12) + 4708)] = @tir.if_then_else(((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 10), 81) < 72)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1569), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 7)], 0f32, dtype=float32)
              }
              if @tir.likely((threadIdx.x_1 < 40), dtype=bool) {
                pad_temp.shared_1[((threadIdx.x_1*12) + 4709)] = @tir.if_then_else((((1 <= floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 11), 81) < 72)) && (floormod(threadIdx.x_1, 3) < 2)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1569), 27)*49)) + (floormod((floordiv((threadIdx.x_1*4), 3) + 1), 9)*7)) + (floormod(threadIdx.x_1, 3)*3)) - 6)], 0f32, dtype=float32)
              }
              if @tir.likely((threadIdx.x_1 < 40), dtype=bool) {
                pad_temp.shared_1[((threadIdx.x_1*12) + 4710)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 4), 27)) && (floormod(((threadIdx.x_1*12) + 12), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 3), 9))) && (floormod(((threadIdx.x_1*3) + 3), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1570), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 4), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 3), 9)) - 8)], 0f32, dtype=float32)
              }
              if @tir.likely((threadIdx.x_1 < 40), dtype=bool) {
                pad_temp.shared_1[((threadIdx.x_1*12) + 4711)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 4), 27)) && (floormod(((threadIdx.x_1*12) + 13), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 4), 9))) && (floormod(((threadIdx.x_1*3) + 4), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1570), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 4), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 4), 9)) - 8)], 0f32, dtype=float32)
              }
              if @tir.likely((threadIdx.x_1 < 40), dtype=bool) {
                pad_temp.shared_1[((threadIdx.x_1*12) + 4712)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*4) + 4), 27)) && (floormod(((threadIdx.x_1*12) + 14), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 5), 9))) && (floormod(((threadIdx.x_1*3) + 5), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1570), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 4), 27), 3)*7)) + floormod(((threadIdx.x_1*3) + 5), 9)) - 8)], 0f32, dtype=float32)
              }
              if @tir.likely((threadIdx.x_1 < 40), dtype=bool) {
                pad_temp.shared_1[((threadIdx.x_1*12) + 4713)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 1568), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 15), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 6), 9))) && (floormod(((threadIdx.x_1*3) + 6), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1571), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 1568), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 6), 9)) - 8)], 0f32, dtype=float32)
              }
              if @tir.likely((threadIdx.x_1 < 40), dtype=bool) {
                pad_temp.shared_1[((threadIdx.x_1*12) + 4714)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 1568), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 16), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 7), 9))) && (floormod(((threadIdx.x_1*3) + 7), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1571), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 1568), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 7), 9)) - 8)], 0f32, dtype=float32)
              }
              if @tir.likely((threadIdx.x_1 < 40), dtype=bool) {
                pad_temp.shared_1[((threadIdx.x_1*12) + 4715)] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*4) + 1568), 3) + 1), 9)) && (floormod(((threadIdx.x_1*12) + 17), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*3) + 8), 9))) && (floormod(((threadIdx.x_1*3) + 8), 9) < 8)), data[((((cse_var_2 + (floordiv(((threadIdx.x_1*4) + 1571), 27)*49)) + (floormod((floordiv(((threadIdx.x_1*4) + 1568), 3) + 1), 9)*7)) + floormod(((threadIdx.x_1*3) + 8), 9)) - 8)], 0f32, dtype=float32)
              }
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1: Buffer(kernel.shared, float32, [4608], [], scope="shared")[(threadIdx.x_2*3)] = kernel[(((blockIdx.x*36864) + cse_var_1) + (threadIdx.x_2*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 1)] = kernel[((((blockIdx.x*36864) + cse_var_1) + (threadIdx.x_2*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 2)] = kernel[((((blockIdx.x*36864) + cse_var_1) + (threadIdx.x_2*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 147)] = kernel[((((blockIdx.x*36864) + cse_var_1) + (threadIdx.x_2*3)) + 147)]
              kernel.shared_1[((threadIdx.x_2*3) + 148)] = kernel[((((blockIdx.x*36864) + cse_var_1) + (threadIdx.x_2*3)) + 148)]
              kernel.shared_1[((threadIdx.x_2*3) + 149)] = kernel[((((blockIdx.x*36864) + cse_var_1) + (threadIdx.x_2*3)) + 149)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 294)] = kernel[((((blockIdx.x*36864) + cse_var_1) + (threadIdx.x_2*3)) + 294)]
              kernel.shared_1[((threadIdx.x_2*3) + 295)] = kernel[((((blockIdx.x*36864) + cse_var_1) + (threadIdx.x_2*3)) + 295)]
              kernel.shared_1[((threadIdx.x_2*3) + 296)] = kernel[((((blockIdx.x*36864) + cse_var_1) + (threadIdx.x_2*3)) + 296)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 441)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 147), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 147), 192)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 442)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 147), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 147), 192)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 443)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 147), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 147), 192)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 588)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 196), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 4)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 589)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 196), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 4)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 590)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 196), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 4)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 735)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 245), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 53)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 736)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 245), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 53)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 737)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 245), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 53)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 882)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 294), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 102)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 883)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 294), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 102)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 884)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 294), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 102)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 1029)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 343), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 151), 192)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 1030)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 343), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 151), 192)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 1031)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 343), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 151), 192)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 1176)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 392), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 8)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 1177)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 392), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 8)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 1178)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 392), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 8)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 1323)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 441), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 57)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 1324)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 441), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 57)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 1325)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 441), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 57)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 1470)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 490), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 106)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 1471)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 490), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 106)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 1472)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 490), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 106)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 1617)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 539), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 155), 192)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 1618)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 539), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 155), 192)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 1619)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 539), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 155), 192)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 1764)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 588), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 12)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 1765)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 588), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 12)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 1766)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 588), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 12)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 1911)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 637), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 61)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 1912)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 637), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 61)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 1913)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 637), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 61)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 2058)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 686), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 110)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 2059)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 686), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 110)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 2060)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 686), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 110)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 2205)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 735), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 159), 192)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 2206)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 735), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 159), 192)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 2207)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 735), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 159), 192)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 2352)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 784), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 16)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 2353)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 784), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 16)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 2354)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 784), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 16)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 2499)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 833), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 65)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 2500)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 833), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 65)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 2501)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 833), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 65)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 2646)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 882), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 114)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 2647)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 882), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 114)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 2648)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 882), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 114)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 2793)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 931), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 163), 192)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 2794)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 931), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 163), 192)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 2795)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 931), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 163), 192)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 2940)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 980), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 20)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 2941)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 980), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 20)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 2942)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 980), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 20)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 3087)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1029), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 69)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 3088)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1029), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 69)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 3089)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1029), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 69)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 3234)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1078), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 118)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 3235)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1078), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 118)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 3236)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1078), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 118)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 3381)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1127), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 167), 192)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 3382)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1127), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 167), 192)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 3383)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1127), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 167), 192)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 3528)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1176), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 24)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 3529)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1176), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 24)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 3530)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1176), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 24)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 3675)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1225), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 73)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 3676)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1225), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 73)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 3677)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1225), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 73)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 3822)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1274), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 122)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 3823)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1274), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 122)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 3824)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1274), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 122)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 3969)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1323), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 171), 192)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 3970)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1323), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 171), 192)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 3971)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1323), 192)*4608)) + cse_var_1) + (floormod((threadIdx.x_2 + 171), 192)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 4116)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1372), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 28)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 4117)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1372), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 28)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 4118)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1372), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 28)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 4263)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1421), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 77)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 4264)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1421), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 77)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 4265)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1421), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 77)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*3) + 4410)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1470), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 126)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 4411)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1470), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 126)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 4412)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1470), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 126)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            if @tir.likely((threadIdx.x_2 < 17), dtype=bool) {
              kernel.shared_1[((threadIdx.x_2*3) + 4557)] = kernel[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1519), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 175)*3))]
              kernel.shared_1[((threadIdx.x_2*3) + 4558)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1519), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 175)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*3) + 4559)] = kernel[(((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1519), 192)*4608)) + cse_var_1) + ((threadIdx.x_2 + 175)*3)) + 2)]
            }
            for (rc.outer.inner: int32, 0, 64) {
              let cse_var_3: int32 = (rc.outer.inner*9)
               {
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[cse_var_3]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 2304)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 576)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 2880)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 1)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 2305)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 577)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 2881)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 2)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 2306)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 578)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 2882)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 1152)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 3456)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 1728)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 4032)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 1153)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 3457)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 1729)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 4033)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 1154)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 3458)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 1730)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 4034)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 3)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 2307)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 579)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 2883)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 4)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 2308)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 580)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 2884)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 5)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 2309)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 581)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 2885)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 1155)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 3459)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 1731)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 4035)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 1156)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 3460)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 1732)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 4036)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 1157)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 3461)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 1733)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 4037)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 6)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 2310)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 582)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 2886)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 7)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 2311)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 583)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 2887)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 8)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 2312)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 584)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 2888)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 1158)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 3462)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 1734)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 4038)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 1159)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 3463)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 1735)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 4039)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 1160)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 3464)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 1736)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*81) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 4040)]))
              }
            }
          }
        }
        for (i1.inner: int32, 0, 4) {
          compute[(((blockIdx.x*392) + (i1.inner*49)) + threadIdx.x)] = max((conv2d_nchw_1[i1.inner] + bias[((blockIdx.x*8) + i1.inner)]), 0f32)
          compute[((((blockIdx.x*392) + (i1.inner*49)) + threadIdx.x) + 196)] = max((conv2d_nchw_1[(i1.inner + 4)] + bias[(((blockIdx.x*8) + i1.inner) + 4)]), 0f32)
        }
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 141-144

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 144-171

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.326 ms




.. GENERATED FROM PYTHON SOURCE LINES 172-177

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 179-182

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=2)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=2)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=2)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=1)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=64)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=3)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=3)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=4)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=1)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=2)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=3)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=49)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=12)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=49)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 1024)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(49) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[8];
      __shared__ float pad_temp_shared[5184];
      __shared__ float kernel_shared[4608];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[7] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 8; ++rc_outer_outer) {
        __syncthreads();
        pad_temp_shared[(((int)threadIdx.x) * 12)] = ((((3 <= ((((int)threadIdx.x) * 4) % 27)) && (((((int)threadIdx.x) * 12) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 3136) + (((((int)threadIdx.x) * 4) / 27) * 49)) + ((((((int)threadIdx.x) * 4) % 27) / 3) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1)] = (((3 <= ((((int)threadIdx.x) * 4) % 27)) && ((((((int)threadIdx.x) * 12) + 1) % 81) < 72)) ? data[(((((rc_outer_outer * 3136) + (((((int)threadIdx.x) * 4) / 27) * 49)) + ((((((int)threadIdx.x) * 4) % 27) / 3) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2)] = ((((3 <= ((((int)threadIdx.x) * 4) % 27)) && ((((((int)threadIdx.x) * 12) + 2) % 81) < 72)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 3136) + (((((int)threadIdx.x) * 4) / 27) * 49)) + ((((((int)threadIdx.x) * 4) % 27) / 3) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 3)] = (((((3 <= (((((int)threadIdx.x) * 4) + 1) % 27)) && ((((((int)threadIdx.x) * 12) + 3) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 1) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 4)] = (((((3 <= (((((int)threadIdx.x) * 4) + 1) % 27)) && ((((((int)threadIdx.x) * 12) + 4) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 1) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 5)] = (((((3 <= (((((int)threadIdx.x) * 4) + 1) % 27)) && ((((((int)threadIdx.x) * 12) + 5) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 1) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 6)] = (((((3 <= (((((int)threadIdx.x) * 4) + 2) % 27)) && ((((((int)threadIdx.x) * 12) + 6) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 2) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 2) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 7)] = (((((3 <= (((((int)threadIdx.x) * 4) + 2) % 27)) && ((((((int)threadIdx.x) * 12) + 7) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 2) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 2) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 8)] = (((((3 <= (((((int)threadIdx.x) * 4) + 2) % 27)) && ((((((int)threadIdx.x) * 12) + 8) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 2) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 2) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 9)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 9) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 3) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 1) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 10)] = (((1 <= ((((((int)threadIdx.x) * 4) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 10) % 81) < 72)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 3) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 1) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 11)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 11) % 81) < 72)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 3) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 1) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 588)] = (((((3 <= (((((int)threadIdx.x) * 4) + 7) % 27)) && ((((((int)threadIdx.x) * 12) + 21) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 196) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 7) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 589)] = (((((3 <= (((((int)threadIdx.x) * 4) + 7) % 27)) && ((((((int)threadIdx.x) * 12) + 22) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 196) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 7) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 590)] = (((((3 <= (((((int)threadIdx.x) * 4) + 7) % 27)) && ((((((int)threadIdx.x) * 12) + 23) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 196) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 7) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 591)] = (((((3 <= (((((int)threadIdx.x) * 4) + 8) % 27)) && ((((((int)threadIdx.x) * 12) + 24) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 197) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 8) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 592)] = (((((3 <= (((((int)threadIdx.x) * 4) + 8) % 27)) && ((((((int)threadIdx.x) * 12) + 25) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 197) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 8) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 593)] = (((((3 <= (((((int)threadIdx.x) * 4) + 8) % 27)) && ((((((int)threadIdx.x) * 12) + 26) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 197) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 8) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 594)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 3) % 9)) && ((((((int)threadIdx.x) * 12) + 27) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 198) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 3) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 595)] = (((1 <= ((((((int)threadIdx.x) * 4) / 3) + 3) % 9)) && ((((((int)threadIdx.x) * 12) + 28) % 81) < 72)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 198) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 3) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 596)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 3) % 9)) && ((((((int)threadIdx.x) * 12) + 29) % 81) < 72)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 198) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 3) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 597)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 196) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 30) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 199) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 196) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 598)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 196) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 31) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 199) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 196) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 599)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 196) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 32) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 199) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 196) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1176)] = (((((3 <= (((((int)threadIdx.x) * 4) + 14) % 27)) && ((((((int)threadIdx.x) * 12) + 42) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 392) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 14) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1177)] = (((((3 <= (((((int)threadIdx.x) * 4) + 14) % 27)) && ((((((int)threadIdx.x) * 12) + 43) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 392) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 14) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1178)] = (((((3 <= (((((int)threadIdx.x) * 4) + 14) % 27)) && ((((((int)threadIdx.x) * 12) + 44) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 392) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 14) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1179)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 5) % 9)) && ((((((int)threadIdx.x) * 12) + 45) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 393) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 5) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1180)] = (((1 <= ((((((int)threadIdx.x) * 4) / 3) + 5) % 9)) && ((((((int)threadIdx.x) * 12) + 46) % 81) < 72)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 393) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 5) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1181)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 5) % 9)) && ((((((int)threadIdx.x) * 12) + 47) % 81) < 72)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 393) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 5) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1182)] = (((((3 <= (((((int)threadIdx.x) * 4) + 16) % 27)) && ((((((int)threadIdx.x) * 12) + 48) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 394) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 16) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1183)] = (((((3 <= (((((int)threadIdx.x) * 4) + 16) % 27)) && ((((((int)threadIdx.x) * 12) + 49) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 394) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 16) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1184)] = (((((3 <= (((((int)threadIdx.x) * 4) + 16) % 27)) && ((((((int)threadIdx.x) * 12) + 50) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 394) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 16) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1185)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 392) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 51) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 395) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 392) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1186)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 392) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 52) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 395) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 392) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1187)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 392) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 53) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 395) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 392) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1764)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 7) % 9)) && ((((((int)threadIdx.x) * 12) + 63) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 588) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 7) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1765)] = (((1 <= ((((((int)threadIdx.x) * 4) / 3) + 7) % 9)) && ((((((int)threadIdx.x) * 12) + 64) % 81) < 72)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 588) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 7) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1766)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 7) % 9)) && ((((((int)threadIdx.x) * 12) + 65) % 81) < 72)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 588) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 7) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1767)] = (((((3 <= (((((int)threadIdx.x) * 4) + 22) % 27)) && ((((((int)threadIdx.x) * 12) + 66) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 589) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 22) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1768)] = (((((3 <= (((((int)threadIdx.x) * 4) + 22) % 27)) && ((((((int)threadIdx.x) * 12) + 67) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 589) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 22) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1769)] = (((((3 <= (((((int)threadIdx.x) * 4) + 22) % 27)) && ((((((int)threadIdx.x) * 12) + 68) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 589) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 22) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1770)] = (((((3 <= (((((int)threadIdx.x) * 4) + 23) % 27)) && ((((((int)threadIdx.x) * 12) + 69) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 590) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 23) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1771)] = (((((3 <= (((((int)threadIdx.x) * 4) + 23) % 27)) && ((((((int)threadIdx.x) * 12) + 70) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 590) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 23) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1772)] = (((((3 <= (((((int)threadIdx.x) * 4) + 23) % 27)) && ((((((int)threadIdx.x) * 12) + 71) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 590) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 23) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1773)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 8) % 9)) && ((((((int)threadIdx.x) * 12) + 72) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 591) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 8) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1774)] = (((1 <= ((((((int)threadIdx.x) * 4) / 3) + 8) % 9)) && ((((((int)threadIdx.x) * 12) + 73) % 81) < 72)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 591) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 8) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 1775)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 8) % 9)) && ((((((int)threadIdx.x) * 12) + 74) % 81) < 72)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 591) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 8) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2352)] = (((((3 <= (((((int)threadIdx.x) * 4) + 1) % 27)) && ((((((int)threadIdx.x) * 12) + 3) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 784) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 1) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2353)] = (((((3 <= (((((int)threadIdx.x) * 4) + 1) % 27)) && ((((((int)threadIdx.x) * 12) + 4) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 784) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 1) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2354)] = (((((3 <= (((((int)threadIdx.x) * 4) + 1) % 27)) && ((((((int)threadIdx.x) * 12) + 5) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 784) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 1) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2355)] = (((((3 <= (((((int)threadIdx.x) * 4) + 2) % 27)) && ((((((int)threadIdx.x) * 12) + 6) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 785) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 2) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2356)] = (((((3 <= (((((int)threadIdx.x) * 4) + 2) % 27)) && ((((((int)threadIdx.x) * 12) + 7) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 785) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 2) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2357)] = (((((3 <= (((((int)threadIdx.x) * 4) + 2) % 27)) && ((((((int)threadIdx.x) * 12) + 8) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 785) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 2) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2358)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 9) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 786) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 1) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2359)] = (((1 <= ((((((int)threadIdx.x) * 4) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 10) % 81) < 72)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 786) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 1) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2360)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 11) % 81) < 72)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 786) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 1) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2361)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 784) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 12) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 787) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 784) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2362)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 784) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 13) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 787) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 784) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2363)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 784) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 14) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 787) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 784) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2940)] = (((((3 <= (((((int)threadIdx.x) * 4) + 8) % 27)) && ((((((int)threadIdx.x) * 12) + 24) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 980) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 8) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2941)] = (((((3 <= (((((int)threadIdx.x) * 4) + 8) % 27)) && ((((((int)threadIdx.x) * 12) + 25) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 980) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 8) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2942)] = (((((3 <= (((((int)threadIdx.x) * 4) + 8) % 27)) && ((((((int)threadIdx.x) * 12) + 26) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 980) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 8) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2943)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 3) % 9)) && ((((((int)threadIdx.x) * 12) + 27) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 981) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 3) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2944)] = (((1 <= ((((((int)threadIdx.x) * 4) / 3) + 3) % 9)) && ((((((int)threadIdx.x) * 12) + 28) % 81) < 72)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 981) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 3) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2945)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 3) % 9)) && ((((((int)threadIdx.x) * 12) + 29) % 81) < 72)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 981) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 3) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2946)] = (((((3 <= (((((int)threadIdx.x) * 4) + 10) % 27)) && ((((((int)threadIdx.x) * 12) + 30) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 982) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 10) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2947)] = (((((3 <= (((((int)threadIdx.x) * 4) + 10) % 27)) && ((((((int)threadIdx.x) * 12) + 31) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 982) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 10) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2948)] = (((((3 <= (((((int)threadIdx.x) * 4) + 10) % 27)) && ((((((int)threadIdx.x) * 12) + 32) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 982) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 10) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2949)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 980) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 33) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 983) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 980) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2950)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 980) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 34) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 983) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 980) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 2951)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 980) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 35) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 983) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 980) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 3528)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 5) % 9)) && ((((((int)threadIdx.x) * 12) + 45) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1176) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 5) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 3529)] = (((1 <= ((((((int)threadIdx.x) * 4) / 3) + 5) % 9)) && ((((((int)threadIdx.x) * 12) + 46) % 81) < 72)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1176) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 5) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 3530)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 5) % 9)) && ((((((int)threadIdx.x) * 12) + 47) % 81) < 72)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1176) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 5) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 3531)] = (((((3 <= (((((int)threadIdx.x) * 4) + 16) % 27)) && ((((((int)threadIdx.x) * 12) + 48) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1177) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 16) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 3532)] = (((((3 <= (((((int)threadIdx.x) * 4) + 16) % 27)) && ((((((int)threadIdx.x) * 12) + 49) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1177) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 16) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 3533)] = (((((3 <= (((((int)threadIdx.x) * 4) + 16) % 27)) && ((((((int)threadIdx.x) * 12) + 50) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1177) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 16) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 3534)] = (((((3 <= (((((int)threadIdx.x) * 4) + 17) % 27)) && ((((((int)threadIdx.x) * 12) + 51) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1178) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 17) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 3535)] = (((((3 <= (((((int)threadIdx.x) * 4) + 17) % 27)) && ((((((int)threadIdx.x) * 12) + 52) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1178) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 17) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 3536)] = (((((3 <= (((((int)threadIdx.x) * 4) + 17) % 27)) && ((((((int)threadIdx.x) * 12) + 53) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1178) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 17) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 3537)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 6) % 9)) && ((((((int)threadIdx.x) * 12) + 54) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1179) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 6) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 3538)] = (((1 <= ((((((int)threadIdx.x) * 4) / 3) + 6) % 9)) && ((((((int)threadIdx.x) * 12) + 55) % 81) < 72)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1179) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 6) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 3539)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 6) % 9)) && ((((((int)threadIdx.x) * 12) + 56) % 81) < 72)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1179) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 6) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 4116)] = (((((3 <= (((((int)threadIdx.x) * 4) + 22) % 27)) && ((((((int)threadIdx.x) * 12) + 66) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1372) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 22) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 4117)] = (((((3 <= (((((int)threadIdx.x) * 4) + 22) % 27)) && ((((((int)threadIdx.x) * 12) + 67) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1372) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 22) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 4118)] = (((((3 <= (((((int)threadIdx.x) * 4) + 22) % 27)) && ((((((int)threadIdx.x) * 12) + 68) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1372) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 22) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 4119)] = (((((3 <= (((((int)threadIdx.x) * 4) + 23) % 27)) && ((((((int)threadIdx.x) * 12) + 69) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1373) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 23) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 4120)] = (((((3 <= (((((int)threadIdx.x) * 4) + 23) % 27)) && ((((((int)threadIdx.x) * 12) + 70) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1373) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 23) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 4121)] = (((((3 <= (((((int)threadIdx.x) * 4) + 23) % 27)) && ((((((int)threadIdx.x) * 12) + 71) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1373) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 23) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 4122)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 8) % 9)) && ((((((int)threadIdx.x) * 12) + 72) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1374) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 8) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 4123)] = (((1 <= ((((((int)threadIdx.x) * 4) / 3) + 8) % 9)) && ((((((int)threadIdx.x) * 12) + 73) % 81) < 72)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1374) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 8) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 4124)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 8) % 9)) && ((((((int)threadIdx.x) * 12) + 74) % 81) < 72)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1374) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 8) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 4125)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 1372) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 75) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1375) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 1372) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 4126)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 1372) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 76) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1375) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 1372) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 12) + 4127)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 1372) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 77) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1375) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 1372) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 40) {
          pad_temp_shared[((((int)threadIdx.x) * 12) + 4704)] = (((((3 <= (((((int)threadIdx.x) * 4) + 2) % 27)) && ((((((int)threadIdx.x) * 12) + 6) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1568) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 2) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        }
        if (((int)threadIdx.x) < 40) {
          pad_temp_shared[((((int)threadIdx.x) * 12) + 4705)] = (((((3 <= (((((int)threadIdx.x) * 4) + 2) % 27)) && ((((((int)threadIdx.x) * 12) + 7) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1568) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 2) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        }
        if (((int)threadIdx.x) < 40) {
          pad_temp_shared[((((int)threadIdx.x) * 12) + 4706)] = (((((3 <= (((((int)threadIdx.x) * 4) + 2) % 27)) && ((((((int)threadIdx.x) * 12) + 8) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1568) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 2) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        }
        if (((int)threadIdx.x) < 40) {
          pad_temp_shared[((((int)threadIdx.x) * 12) + 4707)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 9) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 3))) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1569) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 1) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 8)] : 0.000000e+00f);
        }
        if (((int)threadIdx.x) < 40) {
          pad_temp_shared[((((int)threadIdx.x) * 12) + 4708)] = (((1 <= ((((((int)threadIdx.x) * 4) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 10) % 81) < 72)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1569) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 1) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 7)] : 0.000000e+00f);
        }
        if (((int)threadIdx.x) < 40) {
          pad_temp_shared[((((int)threadIdx.x) * 12) + 4709)] = ((((1 <= ((((((int)threadIdx.x) * 4) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 11) % 81) < 72)) && ((((int)threadIdx.x) % 3) < 2)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1569) / 27) * 49)) + (((((((int)threadIdx.x) * 4) / 3) + 1) % 9) * 7)) + ((((int)threadIdx.x) % 3) * 3)) - 6)] : 0.000000e+00f);
        }
        if (((int)threadIdx.x) < 40) {
          pad_temp_shared[((((int)threadIdx.x) * 12) + 4710)] = (((((3 <= (((((int)threadIdx.x) * 4) + 4) % 27)) && ((((((int)threadIdx.x) * 12) + 12) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 3) % 9))) && ((((((int)threadIdx.x) * 3) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1570) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 4) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 3) % 9)) - 8)] : 0.000000e+00f);
        }
        if (((int)threadIdx.x) < 40) {
          pad_temp_shared[((((int)threadIdx.x) * 12) + 4711)] = (((((3 <= (((((int)threadIdx.x) * 4) + 4) % 27)) && ((((((int)threadIdx.x) * 12) + 13) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 4) % 9))) && ((((((int)threadIdx.x) * 3) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1570) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 4) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 4) % 9)) - 8)] : 0.000000e+00f);
        }
        if (((int)threadIdx.x) < 40) {
          pad_temp_shared[((((int)threadIdx.x) * 12) + 4712)] = (((((3 <= (((((int)threadIdx.x) * 4) + 4) % 27)) && ((((((int)threadIdx.x) * 12) + 14) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 5) % 9))) && ((((((int)threadIdx.x) * 3) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1570) / 27) * 49)) + (((((((int)threadIdx.x) * 4) + 4) % 27) / 3) * 7)) + (((((int)threadIdx.x) * 3) + 5) % 9)) - 8)] : 0.000000e+00f);
        }
        if (((int)threadIdx.x) < 40) {
          pad_temp_shared[((((int)threadIdx.x) * 12) + 4713)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 1568) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 15) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 6) % 9))) && ((((((int)threadIdx.x) * 3) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1571) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 1568) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 6) % 9)) - 8)] : 0.000000e+00f);
        }
        if (((int)threadIdx.x) < 40) {
          pad_temp_shared[((((int)threadIdx.x) * 12) + 4714)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 1568) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 16) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 7) % 9))) && ((((((int)threadIdx.x) * 3) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1571) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 1568) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 7) % 9)) - 8)] : 0.000000e+00f);
        }
        if (((int)threadIdx.x) < 40) {
          pad_temp_shared[((((int)threadIdx.x) * 12) + 4715)] = (((((1 <= (((((((int)threadIdx.x) * 4) + 1568) / 3) + 1) % 9)) && ((((((int)threadIdx.x) * 12) + 17) % 81) < 72)) && (1 <= (((((int)threadIdx.x) * 3) + 8) % 9))) && ((((((int)threadIdx.x) * 3) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 4) + 1571) / 27) * 49)) + ((((((((int)threadIdx.x) * 4) + 1568) / 3) + 1) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 8) % 9)) - 8)] : 0.000000e+00f);
        }
        kernel_shared[(((int)threadIdx.x) * 3)] = kernel[(((((int)blockIdx.x) * 36864) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3))];
        kernel_shared[((((int)threadIdx.x) * 3) + 1)] = kernel[((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2)] = kernel[((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 3) + 147)] = kernel[((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 147)];
        kernel_shared[((((int)threadIdx.x) * 3) + 148)] = kernel[((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 148)];
        kernel_shared[((((int)threadIdx.x) * 3) + 149)] = kernel[((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 149)];
        kernel_shared[((((int)threadIdx.x) * 3) + 294)] = kernel[((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 294)];
        kernel_shared[((((int)threadIdx.x) * 3) + 295)] = kernel[((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 295)];
        kernel_shared[((((int)threadIdx.x) * 3) + 296)] = kernel[((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 296)];
        kernel_shared[((((int)threadIdx.x) * 3) + 441)] = kernel[((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 147) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 147) % 192) * 3))];
        kernel_shared[((((int)threadIdx.x) * 3) + 442)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 147) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 147) % 192) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 3) + 443)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 147) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 147) % 192) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 3) + 588)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 196) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 12)];
        kernel_shared[((((int)threadIdx.x) * 3) + 589)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 196) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 13)];
        kernel_shared[((((int)threadIdx.x) * 3) + 590)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 196) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 14)];
        kernel_shared[((((int)threadIdx.x) * 3) + 735)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 245) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 159)];
        kernel_shared[((((int)threadIdx.x) * 3) + 736)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 245) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 160)];
        kernel_shared[((((int)threadIdx.x) * 3) + 737)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 245) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 161)];
        kernel_shared[((((int)threadIdx.x) * 3) + 882)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 294) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 306)];
        kernel_shared[((((int)threadIdx.x) * 3) + 883)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 294) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 307)];
        kernel_shared[((((int)threadIdx.x) * 3) + 884)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 294) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 308)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1029)] = kernel[((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 343) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 151) % 192) * 3))];
        kernel_shared[((((int)threadIdx.x) * 3) + 1030)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 343) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 151) % 192) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1031)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 343) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 151) % 192) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1176)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 392) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 24)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1177)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 392) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 25)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1178)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 392) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 26)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1323)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 441) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 171)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1324)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 441) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 172)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1325)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 441) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 173)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1470)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 490) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 318)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1471)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 490) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 319)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1472)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 490) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 320)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1617)] = kernel[((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 539) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 155) % 192) * 3))];
        kernel_shared[((((int)threadIdx.x) * 3) + 1618)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 539) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 155) % 192) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1619)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 539) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 155) % 192) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1764)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 588) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 36)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1765)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 588) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 37)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1766)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 588) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 38)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1911)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 637) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 183)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1912)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 637) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 184)];
        kernel_shared[((((int)threadIdx.x) * 3) + 1913)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 637) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 185)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2058)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 686) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 330)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2059)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 686) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 331)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2060)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 686) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 332)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2205)] = kernel[((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 735) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 159) % 192) * 3))];
        kernel_shared[((((int)threadIdx.x) * 3) + 2206)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 735) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 159) % 192) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2207)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 735) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 159) % 192) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2352)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 784) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 48)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2353)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 784) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 49)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2354)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 784) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 50)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2499)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 833) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 195)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2500)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 833) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 196)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2501)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 833) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 197)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2646)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 882) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 342)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2647)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 882) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 343)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2648)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 882) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 344)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2793)] = kernel[((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 931) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 163) % 192) * 3))];
        kernel_shared[((((int)threadIdx.x) * 3) + 2794)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 931) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 163) % 192) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2795)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 931) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 163) % 192) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2940)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 980) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 60)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2941)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 980) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 61)];
        kernel_shared[((((int)threadIdx.x) * 3) + 2942)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 980) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 62)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3087)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1029) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 207)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3088)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1029) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 208)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3089)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1029) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 209)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3234)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1078) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 354)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3235)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1078) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 355)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3236)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1078) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 356)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3381)] = kernel[((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1127) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 167) % 192) * 3))];
        kernel_shared[((((int)threadIdx.x) * 3) + 3382)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1127) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 167) % 192) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3383)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1127) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 167) % 192) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3528)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1176) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 72)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3529)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1176) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 73)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3530)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1176) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 74)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3675)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1225) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 219)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3676)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1225) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 220)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3677)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1225) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 221)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3822)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1274) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 366)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3823)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1274) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 367)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3824)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1274) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 368)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3969)] = kernel[((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1323) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 171) % 192) * 3))];
        kernel_shared[((((int)threadIdx.x) * 3) + 3970)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1323) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 171) % 192) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 3) + 3971)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1323) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 171) % 192) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 3) + 4116)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1372) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 84)];
        kernel_shared[((((int)threadIdx.x) * 3) + 4117)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1372) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 85)];
        kernel_shared[((((int)threadIdx.x) * 3) + 4118)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1372) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 86)];
        kernel_shared[((((int)threadIdx.x) * 3) + 4263)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1421) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 231)];
        kernel_shared[((((int)threadIdx.x) * 3) + 4264)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1421) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 232)];
        kernel_shared[((((int)threadIdx.x) * 3) + 4265)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1421) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 233)];
        kernel_shared[((((int)threadIdx.x) * 3) + 4410)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1470) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 378)];
        kernel_shared[((((int)threadIdx.x) * 3) + 4411)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1470) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 379)];
        kernel_shared[((((int)threadIdx.x) * 3) + 4412)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1470) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 380)];
        if (((int)threadIdx.x) < 17) {
          kernel_shared[((((int)threadIdx.x) * 3) + 4557)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1519) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 525)];
          kernel_shared[((((int)threadIdx.x) * 3) + 4558)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1519) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 526)];
          kernel_shared[((((int)threadIdx.x) * 3) + 4559)] = kernel[(((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1519) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + 527)];
        }
        __syncthreads();
        for (int rc_outer_inner = 0; rc_outer_inner < 64; ++rc_outer_inner) {
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[(rc_outer_inner * 9)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 9) + 2304)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 9) + 576)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 9) + 2880)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 9) + 1)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 9) + 2305)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 9) + 577)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 9) + 2881)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 9) + 2)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 9) + 2306)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 9) + 578)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 9) + 2882)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 9) + 1152)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 9) + 3456)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 9) + 1728)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 9) + 4032)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 9) + 1153)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 9) + 3457)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 9) + 1729)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 9) + 4033)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 9) + 1154)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 9) + 3458)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 9) + 1730)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 9) + 4034)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 9) + 3)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 9) + 2307)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 9) + 579)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 9) + 2883)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 9) + 4)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 9) + 2308)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 9) + 580)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 9) + 2884)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 9) + 5)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 9) + 2309)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 9) + 581)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 9) + 2885)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 9) + 1155)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 9) + 3459)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 9) + 1731)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 9) + 4035)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 9) + 1156)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 9) + 3460)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 9) + 1732)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 9) + 4036)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 9) + 1157)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 9) + 3461)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 9) + 1733)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 9) + 4037)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 9) + 6)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 9) + 2310)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 9) + 582)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 9) + 2886)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 9) + 7)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 9) + 2311)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 9) + 583)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 9) + 2887)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 9) + 8)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 9) + 2312)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 9) + 584)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 9) + 2888)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 9) + 1158)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 9) + 3462)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 9) + 1734)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 9) + 4038)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 9) + 1159)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 9) + 3463)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 9) + 1735)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 9) + 4039)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 9) + 1160)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 9) + 3464)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 9) + 1736)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 81) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 9) + 4040)]));
        }
      }
      for (int i1_inner = 0; i1_inner < 4; ++i1_inner) {
        compute[(((((int)blockIdx.x) * 392) + (i1_inner * 49)) + ((int)threadIdx.x))] = max((conv2d_nchw[i1_inner] + bias[((((int)blockIdx.x) * 8) + i1_inner)]), 0.000000e+00f);
        compute[((((((int)blockIdx.x) * 392) + (i1_inner * 49)) + ((int)threadIdx.x)) + 196)] = max((conv2d_nchw[(i1_inner + 4)] + bias[(((((int)blockIdx.x) * 8) + i1_inner) + 4)]), 0.000000e+00f);
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 190-194

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 194-216

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /venv/apache-tvm-py3.7/lib/python3.7/site-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  33.216 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
