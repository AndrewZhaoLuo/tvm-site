
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-47

.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 48-53

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 53-65

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 66-69

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 69-82

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 83-100

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 100-110

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 111-117

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 117-126

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 127-130

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 130-134

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute}
      preflattened_buffer_map = {data_1: data_3: Buffer(data_2, float32, [1, 512, 7, 7], []), kernel_1: kernel_3: Buffer(kernel_2, float32, [512, 512, 3, 3], []), bias_1: bias_3: Buffer(bias_2, float32, [1, 512, 1, 1], []), compute_1: compute_3: Buffer(compute_2, float32, [1, 512, 7, 7], [])} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 112;
      allocate(conv2d_nchw: Pointer(local float32), float32, [7]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [432]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [4608]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [7], [], scope="local", align=16)[0] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[6] = 0f32
        for (rc.outer.outer: int32, 0, 32) {
          let cse_var_2: int32 = (rc.outer.outer*784)
          let cse_var_1: int32 = (rc.outer.outer*144)
           {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
              pad_temp.shared_1: Buffer(pad_temp.shared, float32, [432], [], scope="shared")[(threadIdx.x_1*3)] = @tir.if_then_else((((1 <= floormod(threadIdx.x_1, 9)) && (floormod(threadIdx.x_1, 9) < 8)) && (1 <= floormod(blockIdx.x, 7))), data[((((cse_var_2 + (floordiv(threadIdx.x_1, 9)*49)) + (floormod(threadIdx.x_1, 9)*7)) + floormod(blockIdx.x, 7)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 1)] = @tir.if_then_else(((1 <= floormod(threadIdx.x_1, 9)) && (floormod(threadIdx.x_1, 9) < 8)), data[((((cse_var_2 + (floordiv(threadIdx.x_1, 9)*49)) + (floormod(threadIdx.x_1, 9)*7)) + floormod(blockIdx.x, 7)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 2)] = @tir.if_then_else((((1 <= floormod(threadIdx.x_1, 9)) && (floormod(threadIdx.x_1, 9) < 8)) && (floormod(blockIdx.x, 7) < 6)), data[((((cse_var_2 + (floordiv(threadIdx.x_1, 9)*49)) + (floormod(threadIdx.x_1, 9)*7)) + floormod(blockIdx.x, 7)) - 6)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 96)] = @tir.if_then_else((((1 <= floormod((threadIdx.x_1 + 5), 9)) && (floormod((threadIdx.x_1 + 5), 9) < 8)) && (1 <= floormod(blockIdx.x, 7))), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 32), 9)*49)) + (floormod((threadIdx.x_1 + 5), 9)*7)) + floormod(blockIdx.x, 7)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 97)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 5), 9)) && (floormod((threadIdx.x_1 + 5), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 32), 9)*49)) + (floormod((threadIdx.x_1 + 5), 9)*7)) + floormod(blockIdx.x, 7)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 98)] = @tir.if_then_else((((1 <= floormod((threadIdx.x_1 + 5), 9)) && (floormod((threadIdx.x_1 + 5), 9) < 8)) && (floormod(blockIdx.x, 7) < 6)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 32), 9)*49)) + (floormod((threadIdx.x_1 + 5), 9)*7)) + floormod(blockIdx.x, 7)) - 6)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 192)] = @tir.if_then_else((((1 <= floormod((threadIdx.x_1 + 1), 9)) && (floormod((threadIdx.x_1 + 1), 9) < 8)) && (1 <= floormod(blockIdx.x, 7))), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 64), 9)*49)) + (floormod((threadIdx.x_1 + 1), 9)*7)) + floormod(blockIdx.x, 7)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 193)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 1), 9)) && (floormod((threadIdx.x_1 + 1), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 64), 9)*49)) + (floormod((threadIdx.x_1 + 1), 9)*7)) + floormod(blockIdx.x, 7)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 194)] = @tir.if_then_else((((1 <= floormod((threadIdx.x_1 + 1), 9)) && (floormod((threadIdx.x_1 + 1), 9) < 8)) && (floormod(blockIdx.x, 7) < 6)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 64), 9)*49)) + (floormod((threadIdx.x_1 + 1), 9)*7)) + floormod(blockIdx.x, 7)) - 6)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
              pad_temp.shared_1[((threadIdx.x_1*3) + 288)] = @tir.if_then_else((((1 <= floormod((threadIdx.x_1 + 6), 9)) && (floormod((threadIdx.x_1 + 6), 9) < 8)) && (1 <= floormod(blockIdx.x, 7))), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 96), 9)*49)) + (floormod((threadIdx.x_1 + 6), 9)*7)) + floormod(blockIdx.x, 7)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 289)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 6), 9)) && (floormod((threadIdx.x_1 + 6), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 96), 9)*49)) + (floormod((threadIdx.x_1 + 6), 9)*7)) + floormod(blockIdx.x, 7)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 290)] = @tir.if_then_else((((1 <= floormod((threadIdx.x_1 + 6), 9)) && (floormod((threadIdx.x_1 + 6), 9) < 8)) && (floormod(blockIdx.x, 7) < 6)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 96), 9)*49)) + (floormod((threadIdx.x_1 + 6), 9)*7)) + floormod(blockIdx.x, 7)) - 6)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            if @tir.likely((threadIdx.x_1 < 16), dtype=bool) {
              pad_temp.shared_1[((threadIdx.x_1*3) + 384)] = @tir.if_then_else((((1 <= floormod((threadIdx.x_1 + 2), 9)) && (floormod((threadIdx.x_1 + 2), 9) < 8)) && (1 <= floormod(blockIdx.x, 7))), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 128), 9)*49)) + (floormod((threadIdx.x_1 + 2), 9)*7)) + floormod(blockIdx.x, 7)) - 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 385)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 2), 9)) && (floormod((threadIdx.x_1 + 2), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 128), 9)*49)) + (floormod((threadIdx.x_1 + 2), 9)*7)) + floormod(blockIdx.x, 7)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*3) + 386)] = @tir.if_then_else((((1 <= floormod((threadIdx.x_1 + 2), 9)) && (floormod((threadIdx.x_1 + 2), 9) < 8)) && (floormod(blockIdx.x, 7) < 6)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 128), 9)*49)) + (floormod((threadIdx.x_1 + 2), 9)*7)) + floormod(blockIdx.x, 7)) - 6)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1: Buffer(kernel.shared, float32, [4608], [], scope="shared")[threadIdx.x_2] = kernel[(((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + threadIdx.x_2)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 32)] = kernel[((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv((threadIdx.x_2 + 32), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 64)] = kernel[((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv((threadIdx.x_2 + 64), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 96)] = kernel[((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 32)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 128)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 8), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 128), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 160)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 10), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 160), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 192)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 12), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 224)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 14), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 224), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 256)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 16), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 256), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 288)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv(threadIdx.x_2, 3)*3)) + floormod(threadIdx.x_2, 3)) + 9216)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 320)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 20), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 320), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 352)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 22), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 352), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 384)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 24), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 32), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 416)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 26), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 416), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 448)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 28), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 448), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 480)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 30), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 512)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 32), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 512), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 544)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 34), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 544), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 576)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv(threadIdx.x_2, 3)*3)) + floormod(threadIdx.x_2, 3)) + 18432)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 608)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 38), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 608), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 640)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 40), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 640), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 672)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 42), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 32), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 704)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 44), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 704), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 736)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 46), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 736), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 768)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 48), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 800)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 50), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 800), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 832)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 52), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 832), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 864)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv(threadIdx.x_2, 3)*3)) + floormod(threadIdx.x_2, 3)) + 27648)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 896)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 56), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 896), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 928)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 58), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 928), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 960)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 60), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 32), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 992)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 62), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 992), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1024)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 64), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1024), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1056)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 66), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1088)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 68), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1088), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1120)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 70), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1120), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1152)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv(threadIdx.x_2, 3)*3)) + floormod(threadIdx.x_2, 3)) + 36864)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1184)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 74), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1184), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1216)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 76), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1216), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1248)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 78), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 32), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1280)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 80), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1280), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1312)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 82), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1312), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1344)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 84), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1376)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 86), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1376), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1408)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 88), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1408), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1440)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv(threadIdx.x_2, 3)*3)) + floormod(threadIdx.x_2, 3)) + 46080)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1472)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 92), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1472), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1504)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 94), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1504), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1536)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 96), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 32), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1568)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 98), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1568), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1600)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 100), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1600), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1632)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 102), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1664)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 104), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1664), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1696)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 106), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1696), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1728)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv(threadIdx.x_2, 3)*3)) + floormod(threadIdx.x_2, 3)) + 55296)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1760)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 110), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1760), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1792)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 112), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1792), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1824)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 114), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 32), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1856)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 116), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1856), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1888)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 118), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1888), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1920)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 120), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1952)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 122), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1952), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 1984)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 124), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 1984), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2016)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv(threadIdx.x_2, 3)*3)) + floormod(threadIdx.x_2, 3)) + 64512)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2048)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 128), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2048), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2080)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 130), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2080), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2112)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 132), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 32), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2144)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 134), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2144), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2176)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 136), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2176), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2208)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 138), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2240)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 140), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2240), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2272)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 142), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2272), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2304)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv(threadIdx.x_2, 3)*3)) + floormod(threadIdx.x_2, 3)) + 73728)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2336)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 146), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2336), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2368)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 148), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2368), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2400)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 150), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 32), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2432)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 152), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2432), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2464)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 154), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2464), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2496)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 156), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2528)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 158), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2528), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2560)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 160), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2560), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2592)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv(threadIdx.x_2, 3)*3)) + floormod(threadIdx.x_2, 3)) + 82944)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2624)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 164), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2624), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2656)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 166), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2656), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2688)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 168), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 32), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2720)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 170), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2720), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2752)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 172), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2752), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2784)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 174), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2816)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 176), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2816), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2848)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 178), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2848), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2880)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv(threadIdx.x_2, 3)*3)) + floormod(threadIdx.x_2, 3)) + 92160)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2912)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 182), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2912), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2944)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 184), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 2944), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 2976)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 186), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 32), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3008)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 188), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3008), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3040)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 190), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3040), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3072)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 192), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3104)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 194), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3104), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3136)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 196), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3136), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3168)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv(threadIdx.x_2, 3)*3)) + floormod(threadIdx.x_2, 3)) + 101376)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3200)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 200), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3200), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3232)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 202), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3232), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3264)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 204), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 32), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3296)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 206), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3296), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3328)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 208), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3328), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3360)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 210), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3392)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 212), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3392), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3424)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 214), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3424), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3456)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv(threadIdx.x_2, 3)*3)) + floormod(threadIdx.x_2, 3)) + 110592)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3488)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 218), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3488), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3520)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 220), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3520), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3552)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 222), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 32), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3584)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 224), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3584), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3616)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 226), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3616), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3648)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 228), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3680)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 230), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3680), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3712)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 232), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3712), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3744)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv(threadIdx.x_2, 3)*3)) + floormod(threadIdx.x_2, 3)) + 119808)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3776)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 236), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3776), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3808)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 238), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3808), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3840)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 240), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 32), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3872)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 242), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3872), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3904)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 244), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3904), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3936)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 246), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 3968)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 248), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3968), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4000)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 250), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 4000), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4032)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv(threadIdx.x_2, 3)*3)) + floormod(threadIdx.x_2, 3)) + 129024)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4064)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 254), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 4064), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4096)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 256), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 4096), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4128)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 258), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 32), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4160)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 260), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 4160), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4192)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 262), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 4192), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4224)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 264), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4256)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 266), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 4256), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4288)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 268), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 4288), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4320)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + cse_var_1) + (floordiv(threadIdx.x_2, 3)*3)) + floormod(threadIdx.x_2, 3)) + 138240)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4352)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 272), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 4352), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4384)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 274), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 4384), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4416)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 276), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 32), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4448)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 278), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 4448), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4480)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 280), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 4480), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4512)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 282), 9)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 16), 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4544)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 284), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 4544), 144), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
            kernel.shared_1[(threadIdx.x_2 + 4576)] = kernel[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv((floordiv(threadIdx.x_2, 16) + 286), 9)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 4576), 144), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            for (ry.outer.inner: int32, 0, 3) {
              let cse_var_3: int32 = (ry.outer.inner*3)
               {
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_3]*kernel.shared_1[((threadIdx.x*144) + cse_var_3)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 3)]*kernel.shared_1[((threadIdx.x*144) + cse_var_3)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 6)]*kernel.shared_1[((threadIdx.x*144) + cse_var_3)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 9)]*kernel.shared_1[((threadIdx.x*144) + cse_var_3)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 12)]*kernel.shared_1[((threadIdx.x*144) + cse_var_3)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 15)]*kernel.shared_1[((threadIdx.x*144) + cse_var_3)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 18)]*kernel.shared_1[((threadIdx.x*144) + cse_var_3)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 27)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 9)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 30)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 9)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 33)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 9)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 36)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 9)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 39)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 9)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 42)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 9)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 45)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 9)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 54)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 18)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 57)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 18)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 60)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 18)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 63)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 18)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 66)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 18)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 69)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 18)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 72)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 18)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 81)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 27)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 84)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 27)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 87)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 27)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 90)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 27)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 93)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 27)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 96)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 27)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 99)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 27)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 108)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 36)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 111)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 36)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 114)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 36)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 117)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 36)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 120)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 36)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 123)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 36)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 126)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 36)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 135)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 45)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 138)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 45)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 141)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 45)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 144)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 45)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 147)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 45)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 150)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 45)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 153)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 45)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 162)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 54)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 165)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 54)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 168)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 54)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 171)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 54)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 174)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 54)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 177)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 54)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 180)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 54)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 189)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 63)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 192)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 63)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 195)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 63)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 198)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 63)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 201)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 63)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 204)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 63)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 207)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 63)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 216)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 72)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 219)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 72)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 222)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 72)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 225)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 72)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 228)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 72)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 231)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 72)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 234)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 72)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 243)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 81)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 246)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 81)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 249)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 81)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 252)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 81)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 255)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 81)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 258)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 81)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 261)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 81)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 270)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 90)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 273)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 90)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 276)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 90)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 279)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 90)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 282)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 90)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 285)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 90)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 288)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 90)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 297)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 99)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 300)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 99)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 303)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 99)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 306)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 99)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 309)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 99)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 312)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 99)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 315)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 99)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 324)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 108)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 327)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 108)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 330)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 108)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 333)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 108)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 336)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 108)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 339)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 108)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 342)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 108)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 351)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 117)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 354)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 117)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 357)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 117)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 360)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 117)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 363)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 117)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 366)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 117)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 369)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 117)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 378)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 126)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 381)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 126)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 384)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 126)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 387)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 126)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 390)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 126)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 393)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 126)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 396)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 126)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 405)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 135)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 408)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 135)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 411)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 135)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 414)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 135)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 417)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 135)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 420)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 135)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 423)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 135)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 1)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 1)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 4)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 1)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 7)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 1)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 10)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 1)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 13)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 1)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 16)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 1)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 19)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 1)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 28)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 10)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 31)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 10)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 34)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 10)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 37)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 10)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 40)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 10)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 43)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 10)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 46)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 10)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 55)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 19)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 58)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 19)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 61)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 19)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 64)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 19)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 67)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 19)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 70)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 19)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 73)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 19)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 82)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 28)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 85)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 28)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 88)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 28)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 91)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 28)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 94)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 28)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 97)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 28)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 100)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 28)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 109)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 37)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 112)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 37)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 115)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 37)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 118)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 37)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 121)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 37)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 124)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 37)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 127)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 37)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 136)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 46)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 139)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 46)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 142)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 46)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 145)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 46)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 148)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 46)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 151)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 46)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 154)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 46)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 163)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 55)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 166)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 55)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 169)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 55)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 172)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 55)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 175)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 55)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 178)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 55)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 181)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 55)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 190)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 64)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 193)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 64)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 196)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 64)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 199)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 64)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 202)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 64)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 205)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 64)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 208)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 64)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 217)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 73)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 220)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 73)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 223)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 73)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 226)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 73)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 229)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 73)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 232)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 73)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 235)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 73)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 244)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 82)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 247)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 82)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 250)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 82)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 253)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 82)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 256)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 82)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 259)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 82)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 262)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 82)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 271)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 91)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 274)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 91)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 277)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 91)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 280)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 91)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 283)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 91)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 286)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 91)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 289)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 91)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 298)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 100)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 301)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 100)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 304)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 100)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 307)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 100)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 310)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 100)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 313)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 100)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 316)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 100)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 325)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 109)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 328)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 109)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 331)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 109)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 334)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 109)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 337)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 109)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 340)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 109)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 343)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 109)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 352)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 118)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 355)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 118)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 358)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 118)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 361)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 118)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 364)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 118)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 367)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 118)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 370)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 118)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 379)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 127)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 382)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 127)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 385)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 127)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 388)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 127)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 391)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 127)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 394)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 127)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 397)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 127)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 406)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 136)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 409)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 136)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 412)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 136)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 415)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 136)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 418)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 136)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 421)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 136)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 424)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 136)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 2)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 2)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 5)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 2)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 8)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 2)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 11)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 2)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 14)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 2)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 17)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 2)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 20)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 2)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 29)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 11)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 32)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 11)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 35)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 11)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 38)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 11)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 41)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 11)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 44)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 11)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 47)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 11)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 56)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 20)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 59)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 20)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 62)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 20)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 65)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 20)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 68)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 20)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 71)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 20)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 74)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 20)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 83)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 29)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 86)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 29)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 89)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 29)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 92)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 29)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 95)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 29)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 98)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 29)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 101)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 29)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 110)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 38)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 113)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 38)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 116)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 38)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 119)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 38)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 122)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 38)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 125)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 38)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 128)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 38)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 137)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 47)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 140)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 47)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 143)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 47)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 146)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 47)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 149)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 47)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 152)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 47)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 155)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 47)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 164)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 56)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 167)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 56)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 170)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 56)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 173)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 56)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 176)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 56)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 179)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 56)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 182)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 56)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 191)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 65)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 194)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 65)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 197)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 65)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 200)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 65)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 203)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 65)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 206)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 65)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 209)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 65)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 218)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 74)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 221)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 74)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 224)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 74)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 227)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 74)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 230)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 74)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 233)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 74)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 236)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 74)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 245)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 83)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 248)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 83)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 251)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 83)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 254)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 83)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 257)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 83)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 260)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 83)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 263)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 83)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 272)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 92)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 275)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 92)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 278)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 92)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 281)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 92)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 284)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 92)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 287)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 92)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 290)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 92)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 299)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 101)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 302)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 101)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 305)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 101)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 308)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 101)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 311)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 101)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 314)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 101)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 317)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 101)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 326)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 110)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 329)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 110)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 332)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 110)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 335)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 110)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 338)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 110)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 341)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 110)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 344)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 110)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 353)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 119)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 356)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 119)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 359)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 119)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 362)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 119)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 365)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 119)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 368)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 119)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 371)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 119)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 380)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 128)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 383)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 128)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 386)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 128)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 389)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 128)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 392)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 128)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 395)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 128)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 398)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 128)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_3 + 407)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 137)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(cse_var_3 + 410)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 137)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(cse_var_3 + 413)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 137)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(cse_var_3 + 416)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 137)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(cse_var_3 + 419)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 137)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(cse_var_3 + 422)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 137)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_3 + 425)]*kernel.shared_1[(((threadIdx.x*144) + cse_var_3) + 137)]))
              }
            }
          }
        }
        for (i2.inner: int32, 0, 7) {
          compute[((((floordiv(blockIdx.x, 7)*1568) + (threadIdx.x*49)) + (i2.inner*7)) + floormod(blockIdx.x, 7))] = max((conv2d_nchw_1[i2.inner] + bias[((floordiv(blockIdx.x, 7)*32) + threadIdx.x)]), 0f32)
        }
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 135-138

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 138-165

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.419 ms




.. GENERATED FROM PYTHON SOURCE LINES 166-171

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 173-176

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 176-183

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=32)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=7)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=16)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=1)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=3)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=3)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=32)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=7)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=32)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=3)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=32)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(32) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[7];
      __shared__ float pad_temp_shared[432];
      __shared__ float kernel_shared[4608];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 32; ++rc_outer_outer) {
        __syncthreads();
        pad_temp_shared[(((int)threadIdx.x) * 3)] = ((((1 <= (((int)threadIdx.x) % 9)) && ((((int)threadIdx.x) % 9) < 8)) && (1 <= (((int)blockIdx.x) % 7))) ? data[(((((rc_outer_outer * 784) + ((((int)threadIdx.x) / 9) * 49)) + ((((int)threadIdx.x) % 9) * 7)) + (((int)blockIdx.x) % 7)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 1)] = (((1 <= (((int)threadIdx.x) % 9)) && ((((int)threadIdx.x) % 9) < 8)) ? data[(((((rc_outer_outer * 784) + ((((int)threadIdx.x) / 9) * 49)) + ((((int)threadIdx.x) % 9) * 7)) + (((int)blockIdx.x) % 7)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 2)] = ((((1 <= (((int)threadIdx.x) % 9)) && ((((int)threadIdx.x) % 9) < 8)) && ((((int)blockIdx.x) % 7) < 6)) ? data[(((((rc_outer_outer * 784) + ((((int)threadIdx.x) / 9) * 49)) + ((((int)threadIdx.x) % 9) * 7)) + (((int)blockIdx.x) % 7)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 96)] = ((((1 <= ((((int)threadIdx.x) + 5) % 9)) && (((((int)threadIdx.x) + 5) % 9) < 8)) && (1 <= (((int)blockIdx.x) % 7))) ? data[(((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 32) / 9) * 49)) + (((((int)threadIdx.x) + 5) % 9) * 7)) + (((int)blockIdx.x) % 7)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 97)] = (((1 <= ((((int)threadIdx.x) + 5) % 9)) && (((((int)threadIdx.x) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 32) / 9) * 49)) + (((((int)threadIdx.x) + 5) % 9) * 7)) + (((int)blockIdx.x) % 7)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 98)] = ((((1 <= ((((int)threadIdx.x) + 5) % 9)) && (((((int)threadIdx.x) + 5) % 9) < 8)) && ((((int)blockIdx.x) % 7) < 6)) ? data[(((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 32) / 9) * 49)) + (((((int)threadIdx.x) + 5) % 9) * 7)) + (((int)blockIdx.x) % 7)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 192)] = ((((1 <= ((((int)threadIdx.x) + 1) % 9)) && (((((int)threadIdx.x) + 1) % 9) < 8)) && (1 <= (((int)blockIdx.x) % 7))) ? data[(((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 64) / 9) * 49)) + (((((int)threadIdx.x) + 1) % 9) * 7)) + (((int)blockIdx.x) % 7)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 193)] = (((1 <= ((((int)threadIdx.x) + 1) % 9)) && (((((int)threadIdx.x) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 64) / 9) * 49)) + (((((int)threadIdx.x) + 1) % 9) * 7)) + (((int)blockIdx.x) % 7)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 194)] = ((((1 <= ((((int)threadIdx.x) + 1) % 9)) && (((((int)threadIdx.x) + 1) % 9) < 8)) && ((((int)blockIdx.x) % 7) < 6)) ? data[(((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 64) / 9) * 49)) + (((((int)threadIdx.x) + 1) % 9) * 7)) + (((int)blockIdx.x) % 7)) - 6)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 288)] = ((((1 <= ((((int)threadIdx.x) + 6) % 9)) && (((((int)threadIdx.x) + 6) % 9) < 8)) && (1 <= (((int)blockIdx.x) % 7))) ? data[(((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 96) / 9) * 49)) + (((((int)threadIdx.x) + 6) % 9) * 7)) + (((int)blockIdx.x) % 7)) - 8)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 289)] = (((1 <= ((((int)threadIdx.x) + 6) % 9)) && (((((int)threadIdx.x) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 96) / 9) * 49)) + (((((int)threadIdx.x) + 6) % 9) * 7)) + (((int)blockIdx.x) % 7)) - 7)] : 0.000000e+00f);
        pad_temp_shared[((((int)threadIdx.x) * 3) + 290)] = ((((1 <= ((((int)threadIdx.x) + 6) % 9)) && (((((int)threadIdx.x) + 6) % 9) < 8)) && ((((int)blockIdx.x) % 7) < 6)) ? data[(((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 96) / 9) * 49)) + (((((int)threadIdx.x) + 6) % 9) * 7)) + (((int)blockIdx.x) % 7)) - 6)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 16) {
          pad_temp_shared[((((int)threadIdx.x) * 3) + 384)] = ((((1 <= ((((int)threadIdx.x) + 2) % 9)) && (((((int)threadIdx.x) + 2) % 9) < 8)) && (1 <= (((int)blockIdx.x) % 7))) ? data[(((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 128) / 9) * 49)) + (((((int)threadIdx.x) + 2) % 9) * 7)) + (((int)blockIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 385)] = (((1 <= ((((int)threadIdx.x) + 2) % 9)) && (((((int)threadIdx.x) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 128) / 9) * 49)) + (((((int)threadIdx.x) + 2) % 9) * 7)) + (((int)blockIdx.x) % 7)) - 7)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 386)] = ((((1 <= ((((int)threadIdx.x) + 2) % 9)) && (((((int)threadIdx.x) + 2) % 9) < 8)) && ((((int)blockIdx.x) % 7) < 6)) ? data[(((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 128) / 9) * 49)) + (((((int)threadIdx.x) + 2) % 9) * 7)) + (((int)blockIdx.x) % 7)) - 6)] : 0.000000e+00f);
        }
        kernel_shared[((int)threadIdx.x)] = kernel[((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x))];
        kernel_shared[(((int)threadIdx.x) + 32)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 64)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 64) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 96)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 96)];
        kernel_shared[(((int)threadIdx.x) + 128)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 128) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 160)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 160) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 192)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 192) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 224)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 224) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 256)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 256) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 288)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 9216)];
        kernel_shared[(((int)threadIdx.x) + 320)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 320) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 352)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 352) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 64) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 384)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 384) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 32) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 416)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 416) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 448)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 448) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 480)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 480) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 512)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 512) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 544)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 544) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 576)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 18432)];
        kernel_shared[(((int)threadIdx.x) + 608)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 608) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 640)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 640) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 64) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 672)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 672) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 32) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 704)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 704) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 736)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 736) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 768)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 768) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 800)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 800) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 832)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 832) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 864)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 27648)];
        kernel_shared[(((int)threadIdx.x) + 896)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 896) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 928)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 928) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 64) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 960)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 960) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 32) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 992)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 992) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1024)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1024) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1056)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1056) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1088)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1088) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1120)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1120) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1152)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 36864)];
        kernel_shared[(((int)threadIdx.x) + 1184)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1184) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1216)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1216) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 64) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1248)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1248) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 32) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1280)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1280) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1312)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1312) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1344)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1344) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1376)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1376) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1408)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1408) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1440)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 46080)];
        kernel_shared[(((int)threadIdx.x) + 1472)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1472) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1504)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1504) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 64) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1536)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1536) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 32) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1568)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1568) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1600)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1600) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1632)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1632) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1664)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1664) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1696)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1696) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1728)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 55296)];
        kernel_shared[(((int)threadIdx.x) + 1760)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1760) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1792)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1792) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 64) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1824)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1824) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 32) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1856)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1856) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1888)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1888) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1920)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1920) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1952)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1952) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1984)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1984) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2016)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 64512)];
        kernel_shared[(((int)threadIdx.x) + 2048)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2048) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2080)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2080) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 64) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2112)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2112) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 32) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2144)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2144) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2176)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2176) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2208)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2208) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2240)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2240) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2272)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2272) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2304)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 73728)];
        kernel_shared[(((int)threadIdx.x) + 2336)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2336) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2368)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2368) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 64) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2400)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2400) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 32) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2432)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2432) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2464)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2464) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2496)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2496) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2528)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2528) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2560)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2560) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2592)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 82944)];
        kernel_shared[(((int)threadIdx.x) + 2624)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2624) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2656)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2656) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 64) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2688)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2688) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 32) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2720)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2720) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2752)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2752) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2784)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2784) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2816)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2816) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2848)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2848) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2880)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 92160)];
        kernel_shared[(((int)threadIdx.x) + 2912)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2912) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2944)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2944) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 64) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2976)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 2976) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 32) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3008)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3008) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3040)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3040) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3072)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3072) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3104)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3104) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3136)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3136) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3168)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 101376)];
        kernel_shared[(((int)threadIdx.x) + 3200)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3200) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3232)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3232) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 64) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3264)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3264) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 32) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3296)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3296) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3328)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3328) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3360)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3360) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3392)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3392) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3424)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3424) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3456)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 110592)];
        kernel_shared[(((int)threadIdx.x) + 3488)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3488) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3520)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3520) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 64) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3552)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3552) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 32) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3584)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3584) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3616)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3616) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3648)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3648) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3680)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3680) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3712)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3712) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3744)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 119808)];
        kernel_shared[(((int)threadIdx.x) + 3776)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3776) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3808)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3808) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 64) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3840)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3840) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 32) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3872)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3872) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3904)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3904) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3936)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3936) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3968)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 3968) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4000)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4000) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4032)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 129024)];
        kernel_shared[(((int)threadIdx.x) + 4064)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4064) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4096)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4096) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 64) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4128)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4128) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 32) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4160)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4160) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4192)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4192) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4224)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4224) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4256)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4256) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4288)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4288) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4320)] = kernel[(((((((int)blockIdx.x) / 7) * 147456) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 138240)];
        kernel_shared[(((int)threadIdx.x) + 4352)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4352) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4384)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4384) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 64) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4416)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4416) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 32) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4448)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4448) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 128) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4480)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4480) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4512)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4512) / 144) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) / 3) + 16) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4544)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4544) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 80) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4576)] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 4576) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 112) % 144) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        __syncthreads();
        for (int ry_outer_inner = 0; ry_outer_inner < 3; ++ry_outer_inner) {
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(ry_outer_inner * 3)] * kernel_shared[((((int)threadIdx.x) * 144) + (ry_outer_inner * 3))]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 3)] * kernel_shared[((((int)threadIdx.x) * 144) + (ry_outer_inner * 3))]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 6)] * kernel_shared[((((int)threadIdx.x) * 144) + (ry_outer_inner * 3))]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 9)] * kernel_shared[((((int)threadIdx.x) * 144) + (ry_outer_inner * 3))]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 12)] * kernel_shared[((((int)threadIdx.x) * 144) + (ry_outer_inner * 3))]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 15)] * kernel_shared[((((int)threadIdx.x) * 144) + (ry_outer_inner * 3))]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 18)] * kernel_shared[((((int)threadIdx.x) * 144) + (ry_outer_inner * 3))]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 27)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 9)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 30)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 9)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 33)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 9)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 36)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 9)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 39)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 9)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 42)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 9)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 45)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 9)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 54)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 18)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 57)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 18)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 60)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 18)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 63)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 18)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 66)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 18)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 69)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 18)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 72)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 18)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 81)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 27)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 84)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 27)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 87)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 27)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 90)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 27)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 93)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 27)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 96)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 27)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 99)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 27)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 108)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 36)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 111)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 36)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 114)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 36)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 117)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 36)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 120)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 36)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 123)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 36)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 126)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 36)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 135)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 45)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 138)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 45)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 141)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 45)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 144)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 45)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 147)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 45)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 150)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 45)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 153)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 45)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 162)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 54)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 165)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 54)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 168)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 54)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 171)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 54)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 174)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 54)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 177)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 54)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 180)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 54)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 189)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 63)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 192)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 63)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 195)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 63)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 198)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 63)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 201)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 63)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 204)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 63)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 207)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 63)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 216)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 72)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 219)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 72)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 222)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 72)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 225)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 72)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 228)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 72)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 231)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 72)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 234)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 72)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 243)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 81)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 246)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 81)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 249)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 81)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 252)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 81)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 255)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 81)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 258)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 81)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 261)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 81)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 270)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 90)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 273)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 90)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 276)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 90)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 279)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 90)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 282)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 90)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 285)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 90)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 288)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 90)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 297)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 99)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 300)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 99)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 303)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 99)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 306)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 99)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 309)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 99)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 312)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 99)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 315)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 99)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 324)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 108)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 327)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 108)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 330)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 108)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 333)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 108)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 336)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 108)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 339)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 108)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 342)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 108)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 351)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 117)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 354)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 117)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 357)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 117)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 360)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 117)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 363)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 117)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 366)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 117)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 369)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 117)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 378)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 126)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 381)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 126)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 384)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 126)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 387)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 126)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 390)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 126)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 393)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 126)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 396)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 126)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 405)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 135)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 408)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 135)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 411)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 135)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 414)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 135)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 417)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 135)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 420)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 135)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 423)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 135)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 1)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 1)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 4)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 1)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 7)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 1)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 10)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 1)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 13)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 1)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 16)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 1)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 19)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 1)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 28)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 10)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 31)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 10)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 34)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 10)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 37)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 10)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 40)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 10)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 43)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 10)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 46)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 10)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 55)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 19)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 58)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 19)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 61)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 19)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 64)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 19)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 67)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 19)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 70)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 19)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 73)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 19)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 82)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 28)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 85)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 28)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 88)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 28)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 91)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 28)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 94)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 28)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 97)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 28)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 100)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 28)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 109)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 37)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 112)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 37)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 115)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 37)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 118)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 37)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 121)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 37)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 124)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 37)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 127)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 37)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 136)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 46)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 139)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 46)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 142)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 46)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 145)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 46)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 148)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 46)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 151)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 46)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 154)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 46)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 163)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 55)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 166)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 55)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 169)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 55)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 172)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 55)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 175)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 55)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 178)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 55)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 181)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 55)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 190)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 64)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 193)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 64)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 196)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 64)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 199)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 64)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 202)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 64)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 205)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 64)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 208)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 64)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 217)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 73)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 220)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 73)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 223)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 73)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 226)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 73)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 229)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 73)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 232)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 73)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 235)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 73)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 244)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 82)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 247)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 82)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 250)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 82)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 253)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 82)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 256)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 82)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 259)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 82)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 262)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 82)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 271)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 91)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 274)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 91)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 277)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 91)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 280)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 91)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 283)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 91)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 286)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 91)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 289)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 91)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 298)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 100)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 301)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 100)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 304)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 100)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 307)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 100)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 310)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 100)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 313)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 100)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 316)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 100)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 325)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 109)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 328)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 109)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 331)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 109)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 334)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 109)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 337)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 109)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 340)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 109)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 343)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 109)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 352)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 118)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 355)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 118)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 358)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 118)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 361)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 118)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 364)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 118)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 367)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 118)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 370)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 118)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 379)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 127)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 382)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 127)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 385)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 127)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 388)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 127)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 391)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 127)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 394)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 127)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 397)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 127)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 406)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 136)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 409)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 136)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 412)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 136)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 415)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 136)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 418)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 136)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 421)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 136)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 424)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 136)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 2)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 2)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 5)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 2)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 8)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 2)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 11)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 2)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 14)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 2)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 17)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 2)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 20)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 2)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 29)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 11)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 32)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 11)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 35)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 11)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 38)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 11)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 41)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 11)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 44)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 11)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 47)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 11)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 56)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 20)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 59)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 20)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 62)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 20)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 65)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 20)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 68)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 20)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 71)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 20)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 74)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 20)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 83)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 29)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 86)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 29)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 89)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 29)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 92)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 29)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 95)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 29)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 98)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 29)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 101)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 29)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 110)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 38)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 113)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 38)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 116)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 38)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 119)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 38)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 122)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 38)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 125)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 38)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 128)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 38)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 137)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 47)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 140)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 47)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 143)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 47)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 146)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 47)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 149)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 47)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 152)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 47)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 155)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 47)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 164)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 56)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 167)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 56)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 170)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 56)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 173)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 56)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 176)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 56)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 179)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 56)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 182)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 56)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 191)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 65)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 194)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 65)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 197)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 65)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 200)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 65)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 203)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 65)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 206)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 65)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 209)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 65)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 218)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 74)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 221)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 74)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 224)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 74)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 227)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 74)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 230)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 74)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 233)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 74)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 236)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 74)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 245)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 83)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 248)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 83)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 251)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 83)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 254)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 83)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 257)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 83)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 260)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 83)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 263)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 83)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 272)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 92)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 275)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 92)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 278)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 92)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 281)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 92)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 284)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 92)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 287)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 92)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 290)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 92)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 299)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 101)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 302)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 101)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 305)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 101)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 308)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 101)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 311)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 101)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 314)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 101)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 317)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 101)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 326)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 110)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 329)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 110)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 332)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 110)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 335)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 110)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 338)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 110)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 341)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 110)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 344)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 110)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 353)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 119)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 356)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 119)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 359)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 119)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 362)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 119)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 365)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 119)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 368)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 119)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 371)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 119)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 380)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 128)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 383)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 128)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 386)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 128)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 389)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 128)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 392)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 128)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 395)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 128)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 398)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 128)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((ry_outer_inner * 3) + 407)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 137)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((ry_outer_inner * 3) + 410)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 137)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((ry_outer_inner * 3) + 413)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 137)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((ry_outer_inner * 3) + 416)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 137)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((ry_outer_inner * 3) + 419)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 137)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((ry_outer_inner * 3) + 422)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 137)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((ry_outer_inner * 3) + 425)] * kernel_shared[(((((int)threadIdx.x) * 144) + (ry_outer_inner * 3)) + 137)]));
        }
      }
      for (int i2_inner = 0; i2_inner < 7; ++i2_inner) {
        compute[(((((((int)blockIdx.x) / 7) * 1568) + (((int)threadIdx.x) * 49)) + (i2_inner * 7)) + (((int)blockIdx.x) % 7))] = max((conv2d_nchw[i2_inner] + bias[(((((int)blockIdx.x) / 7) * 32) + ((int)threadIdx.x))]), 0.000000e+00f);
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 184-188

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 188-210

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.7/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  44.424 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
