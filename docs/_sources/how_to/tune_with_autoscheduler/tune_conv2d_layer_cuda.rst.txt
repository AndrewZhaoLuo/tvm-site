
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: default



    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 54-59

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 59-71

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 72-75

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 75-88

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 89-106

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 106-116

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 117-123

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 123-132

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 133-136

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 136-140

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute}
      preflattened_buffer_map = {data_1: data_3: Buffer(data_2, float32, [1, 512, 7, 7], []), kernel_1: kernel_3: Buffer(kernel_2, float32, [512, 512, 3, 3], []), bias_1: bias_3: Buffer(bias_2, float32, [1, 512, 1, 1], []), compute_1: compute_3: Buffer(compute_2, float32, [1, 512, 7, 7], [])} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 32;
      allocate(conv2d_nchw: Pointer(local float32), float32, [16]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [648]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [1152]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [16], [], scope="local", align=64)[0] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[6] = 0f32
        conv2d_nchw_1[7] = 0f32
        conv2d_nchw_1[8] = 0f32
        conv2d_nchw_1[9] = 0f32
        conv2d_nchw_1[10] = 0f32
        conv2d_nchw_1[11] = 0f32
        conv2d_nchw_1[12] = 0f32
        conv2d_nchw_1[13] = 0f32
        conv2d_nchw_1[14] = 0f32
        conv2d_nchw_1[15] = 0f32
        for (rc.outer.outer: int32, 0, 64) {
          let cse_var_2: int32 = (rc.outer.outer*392)
          let cse_var_1: int32 = (rc.outer.outer*72)
           {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1: Buffer(pad_temp.shared, float32, [648], [], scope="shared")[threadIdx.x_1] = @tir.if_then_else((((9 <= threadIdx.x_1) && (1 <= floormod(threadIdx.x_1, 9))) && (floormod(threadIdx.x_1, 9) < 8)), data[(((cse_var_2 + (floordiv(threadIdx.x_1, 9)*7)) + floormod(threadIdx.x_1, 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1[(threadIdx.x_1 + 49)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 49), 81)) && (floormod((threadIdx.x_1 + 49), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 4), 9))) && (floormod((threadIdx.x_1 + 4), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 49), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 49), 81), 9)*7)) + floormod((threadIdx.x_1 + 4), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1[(threadIdx.x_1 + 98)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 8), 9)) && (floormod((threadIdx.x_1 + 8), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 98), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 17), 81), 9)*7)) + floormod((threadIdx.x_1 + 8), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1[(threadIdx.x_1 + 147)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 66), 81)) && (floormod((threadIdx.x_1 + 66), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 3), 9))) && (floormod((threadIdx.x_1 + 3), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 147), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 66), 81), 9)*7)) + floormod((threadIdx.x_1 + 3), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1[(threadIdx.x_1 + 196)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 34), 81)) && (floormod((threadIdx.x_1 + 34), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 7), 9))) && (floormod((threadIdx.x_1 + 7), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 196), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 34), 81), 9)*7)) + floormod((threadIdx.x_1 + 7), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1[(threadIdx.x_1 + 245)] = @tir.if_then_else((((9 <= floormod((threadIdx.x_1 + 2), 81)) && (1 <= floormod((threadIdx.x_1 + 2), 9))) && (floormod((threadIdx.x_1 + 2), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 245), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 2), 81), 9)*7)) + floormod((threadIdx.x_1 + 2), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1[(threadIdx.x_1 + 294)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 51), 81)) && (floormod((threadIdx.x_1 + 51), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 6), 9))) && (floormod((threadIdx.x_1 + 6), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 294), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 51), 81), 9)*7)) + floormod((threadIdx.x_1 + 6), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1[(threadIdx.x_1 + 343)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 1), 9)) && (floormod((threadIdx.x_1 + 1), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 343), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 19), 81), 9)*7)) + floormod((threadIdx.x_1 + 1), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1[(threadIdx.x_1 + 392)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 68), 81)) && (floormod((threadIdx.x_1 + 68), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 5), 9))) && (floormod((threadIdx.x_1 + 5), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 392), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 68), 81), 9)*7)) + floormod((threadIdx.x_1 + 5), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1[(threadIdx.x_1 + 441)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 9) + 4), 9)) && (floormod((threadIdx.x_1 + 36), 81) < 72)) && (1 <= floormod(threadIdx.x_1, 9))) && (floormod(threadIdx.x_1, 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 441), 81)*49)) + (floormod((floordiv(threadIdx.x_1, 9) + 4), 9)*7)) + floormod(threadIdx.x_1, 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1[(threadIdx.x_1 + 490)] = @tir.if_then_else((((9 <= floormod((threadIdx.x_1 + 4), 81)) && (1 <= floormod((threadIdx.x_1 + 4), 9))) && (floormod((threadIdx.x_1 + 4), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 490), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 4), 81), 9)*7)) + floormod((threadIdx.x_1 + 4), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1[(threadIdx.x_1 + 539)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 53), 81)) && (floormod((threadIdx.x_1 + 53), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 8), 9))) && (floormod((threadIdx.x_1 + 8), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 539), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 53), 81), 9)*7)) + floormod((threadIdx.x_1 + 8), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1[(threadIdx.x_1 + 588)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 3), 9)) && (floormod((threadIdx.x_1 + 3), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 588), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 21), 81), 9)*7)) + floormod((threadIdx.x_1 + 3), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            if @tir.likely((threadIdx.x_1 < 11), dtype=bool) {
              pad_temp.shared_1[(threadIdx.x_1 + 637)] = @tir.if_then_else((((threadIdx.x_1 < 2) && (1 <= floormod((threadIdx.x_1 + 7), 9))) && (floormod((threadIdx.x_1 + 7), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 637), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 70), 81), 9)*7)) + (threadIdx.x_1 + 7)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1: Buffer(kernel.shared, float32, [1152], [], scope="shared")[(threadIdx.x_2*8)] = kernel[(((((blockIdx.x*73728) + (floordiv(threadIdx.x_2, 9)*4608)) + cse_var_1) + (floordiv((floormod(threadIdx.x_2, 9)*8), 3)*3)) + floormod((threadIdx.x_2*2), 3))]
              kernel.shared_1[((threadIdx.x_2*8) + 1)] = kernel[(((((blockIdx.x*73728) + (floordiv(threadIdx.x_2, 9)*4608)) + cse_var_1) + (floordiv(((floormod(threadIdx.x_2, 9)*8) + 1), 3)*3)) + floormod(((threadIdx.x_2*2) + 1), 3))]
              kernel.shared_1[((threadIdx.x_2*8) + 2)] = kernel[(((((blockIdx.x*73728) + (floordiv(threadIdx.x_2, 9)*4608)) + cse_var_1) + (floordiv(((floormod(threadIdx.x_2, 9)*8) + 2), 3)*3)) + floormod(((threadIdx.x_2*2) + 2), 3))]
              kernel.shared_1[((threadIdx.x_2*8) + 3)] = kernel[(((((blockIdx.x*73728) + (floordiv(threadIdx.x_2, 9)*4608)) + cse_var_1) + (floormod((floordiv((threadIdx.x_2*8), 3) + 1), 24)*3)) + floormod((threadIdx.x_2*2), 3))]
              kernel.shared_1[((threadIdx.x_2*8) + 4)] = kernel[(((((blockIdx.x*73728) + (floordiv(threadIdx.x_2, 9)*4608)) + cse_var_1) + (floordiv(((floormod(threadIdx.x_2, 9)*8) + 4), 3)*3)) + floormod(((threadIdx.x_2*2) + 1), 3))]
              kernel.shared_1[((threadIdx.x_2*8) + 5)] = kernel[(((((blockIdx.x*73728) + (floordiv(threadIdx.x_2, 9)*4608)) + cse_var_1) + (floordiv(((floormod(threadIdx.x_2, 9)*8) + 5), 3)*3)) + floormod(((threadIdx.x_2*2) + 2), 3))]
              kernel.shared_1[((threadIdx.x_2*8) + 6)] = kernel[(((((blockIdx.x*73728) + (floordiv(threadIdx.x_2, 9)*4608)) + cse_var_1) + (floormod((floordiv((threadIdx.x_2*8), 3) + 2), 24)*3)) + floormod((threadIdx.x_2*2), 3))]
              kernel.shared_1[((threadIdx.x_2*8) + 7)] = kernel[(((((blockIdx.x*73728) + (floordiv(threadIdx.x_2, 9)*4608)) + cse_var_1) + (floordiv(((floormod(threadIdx.x_2, 9)*8) + 7), 3)*3)) + floormod(((threadIdx.x_2*2) + 1), 3))]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared_1[((threadIdx.x_2*8) + 392)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 49), 9)*4608)) + cse_var_1) + (floordiv(floormod(((threadIdx.x_2*8) + 32), 72), 3)*3)) + floormod(((threadIdx.x_2*2) + 2), 3))]
              kernel.shared_1[((threadIdx.x_2*8) + 393)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 49), 9)*4608)) + cse_var_1) + (floormod((floordiv((threadIdx.x_2*8), 3) + 11), 24)*3)) + floormod((threadIdx.x_2*2), 3))]
              kernel.shared_1[((threadIdx.x_2*8) + 394)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 49), 9)*4608)) + cse_var_1) + (floordiv(floormod(((threadIdx.x_2*8) + 34), 72), 3)*3)) + floormod(((threadIdx.x_2*2) + 1), 3))]
              kernel.shared_1[((threadIdx.x_2*8) + 395)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 49), 9)*4608)) + cse_var_1) + (floormod((floordiv(((threadIdx.x_2*8) + 392), 3) + 1), 24)*3)) + floormod(((threadIdx.x_2*2) + 2), 3))]
              kernel.shared_1[((threadIdx.x_2*8) + 396)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 49), 9)*4608)) + cse_var_1) + (floormod((floordiv((threadIdx.x_2*8), 3) + 12), 24)*3)) + floormod((threadIdx.x_2*2), 3))]
              kernel.shared_1[((threadIdx.x_2*8) + 397)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 49), 9)*4608)) + cse_var_1) + (floordiv(floormod(((threadIdx.x_2*8) + 37), 72), 3)*3)) + floormod(((threadIdx.x_2*2) + 1), 3))]
              kernel.shared_1[((threadIdx.x_2*8) + 398)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 49), 9)*4608)) + cse_var_1) + (floormod((floordiv(((threadIdx.x_2*8) + 392), 3) + 2), 24)*3)) + floormod(((threadIdx.x_2*2) + 2), 3))]
              kernel.shared_1[((threadIdx.x_2*8) + 399)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 49), 9)*4608)) + cse_var_1) + (floormod((floordiv((threadIdx.x_2*8), 3) + 13), 24)*3)) + floormod((threadIdx.x_2*2), 3))]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              if @tir.likely((threadIdx.x_2 < 46), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*8) + 784)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 98), 9)*4608)) + cse_var_1) + (floordiv(floormod(((threadIdx.x_2*8) + 64), 72), 3)*3)) + floormod(((threadIdx.x_2*2) + 1), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 46), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*8) + 785)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 98), 9)*4608)) + cse_var_1) + (floordiv(floormod(((threadIdx.x_2*8) + 65), 72), 3)*3)) + floormod(((threadIdx.x_2*2) + 2), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 46), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*8) + 786)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 98), 9)*4608)) + cse_var_1) + (floormod((floordiv((threadIdx.x_2*8), 3) + 22), 24)*3)) + floormod((threadIdx.x_2*2), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 46), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*8) + 787)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 98), 9)*4608)) + cse_var_1) + (floormod((floordiv(((threadIdx.x_2*8) + 784), 3) + 1), 24)*3)) + floormod(((threadIdx.x_2*2) + 1), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 46), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*8) + 788)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 98), 9)*4608)) + cse_var_1) + (floordiv(floormod(((threadIdx.x_2*8) + 68), 72), 3)*3)) + floormod(((threadIdx.x_2*2) + 2), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 46), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*8) + 789)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 98), 9)*4608)) + cse_var_1) + (floormod((floordiv((threadIdx.x_2*8), 3) + 23), 24)*3)) + floormod((threadIdx.x_2*2), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 46), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*8) + 790)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 98), 9)*4608)) + cse_var_1) + (floormod((floordiv(((threadIdx.x_2*8) + 784), 3) + 2), 24)*3)) + floormod(((threadIdx.x_2*2) + 1), 3))]
              }
              if @tir.likely((threadIdx.x_2 < 46), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*8) + 791)] = kernel[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 98), 9)*4608)) + cse_var_1) + (floordiv(floormod(((threadIdx.x_2*8) + 71), 72), 3)*3)) + floormod(((threadIdx.x_2*2) + 2), 3))]
              }
            }
            for (rc.outer.inner: int32, 0, 4) {
              let cse_var_3: int32 = (rc.outer.inner*18)
               {
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[cse_var_3]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 1)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 2)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 3)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 4)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 5)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 6)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 7)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 8)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 9)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 10)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 11)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 12)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 13)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 14)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 15)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 16)]))
                conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 17)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 72)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 73)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 74)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 75)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 76)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 77)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 78)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 79)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 80)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 81)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 82)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 83)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 84)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 85)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 86)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 87)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 88)]))
                conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 89)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 144)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 145)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 146)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 147)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 148)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 149)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 150)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 151)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 152)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 153)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 154)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 155)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 156)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 157)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 158)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 159)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 160)]))
                conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 161)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 216)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 217)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 218)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 219)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 220)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 221)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 222)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 223)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 224)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 225)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 226)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 227)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 228)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 229)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 230)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 231)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 232)]))
                conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 233)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 288)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 289)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 290)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 291)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 292)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 293)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 294)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 295)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 296)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 297)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 298)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 299)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 300)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 301)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 302)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 303)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 304)]))
                conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 305)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 360)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 361)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 362)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 363)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 364)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 365)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 366)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 367)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 368)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 369)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 370)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 371)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 372)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 373)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 374)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 375)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 376)]))
                conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 377)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 432)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 433)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 434)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 435)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 436)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 437)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 438)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 439)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 440)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 441)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 442)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 443)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 444)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 445)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 446)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 447)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 448)]))
                conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 449)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 504)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 505)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 506)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 507)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 508)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 509)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 510)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 511)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 512)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 513)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 514)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 515)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 516)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 517)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 518)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 519)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 520)]))
                conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 521)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 576)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 577)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 578)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 579)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 580)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 581)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 582)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 583)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 584)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 585)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 586)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 587)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 588)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 589)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 590)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 591)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 592)]))
                conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 593)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 648)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 649)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 650)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 651)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 652)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 653)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 654)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 655)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 656)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 657)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 658)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 659)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 660)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 661)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 662)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 663)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 664)]))
                conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 665)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 720)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 721)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 722)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 723)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 724)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 725)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 726)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 727)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 728)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 729)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 730)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 731)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 732)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 733)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 734)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 735)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 736)]))
                conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 737)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 792)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 793)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 794)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 795)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 796)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 797)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 798)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 799)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 800)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 801)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 802)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 803)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 804)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 805)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 806)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 807)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 808)]))
                conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 809)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 864)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 865)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 866)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 867)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 868)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 869)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 870)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 871)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 872)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 873)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 874)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 875)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 876)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 877)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 878)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 879)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 880)]))
                conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 881)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 936)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 937)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 938)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 939)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 940)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 941)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 942)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 943)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 944)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 945)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 946)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 947)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 948)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 949)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 950)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 951)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 952)]))
                conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 953)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 1008)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 1009)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 1010)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 1011)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 1012)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 1013)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 1014)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 1015)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 1016)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 1017)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 1018)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 1019)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 1020)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 1021)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 1022)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 1023)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 1024)]))
                conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 1025)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*kernel.shared_1[(cse_var_3 + 1080)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[(cse_var_3 + 1081)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[(cse_var_3 + 1082)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[(cse_var_3 + 1083)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[(cse_var_3 + 1084)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[(cse_var_3 + 1085)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[(cse_var_3 + 1086)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[(cse_var_3 + 1087)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[(cse_var_3 + 1088)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[(cse_var_3 + 1089)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[(cse_var_3 + 1090)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[(cse_var_3 + 1091)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[(cse_var_3 + 1092)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[(cse_var_3 + 1093)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[(cse_var_3 + 1094)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[(cse_var_3 + 1095)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[(cse_var_3 + 1096)]))
                conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[(cse_var_3 + 1097)]))
              }
            }
          }
        }
        for (i1.inner: int32, 0, 16) {
          compute[(((blockIdx.x*784) + (i1.inner*49)) + threadIdx.x)] = max((conv2d_nchw_1[i1.inner] + bias[((blockIdx.x*16) + i1.inner)]), 0f32)
        }
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 141-144

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 144-171

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.289 ms




.. GENERATED FROM PYTHON SOURCE LINES 172-177

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 179-182

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=16)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=2)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=4)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=3)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=3)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=16)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=1)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=8)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=49)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=49)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(49) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[16];
      __shared__ float pad_temp_shared[648];
      __shared__ float kernel_shared[1152];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      conv2d_nchw[7] = 0.000000e+00f;
      conv2d_nchw[8] = 0.000000e+00f;
      conv2d_nchw[9] = 0.000000e+00f;
      conv2d_nchw[10] = 0.000000e+00f;
      conv2d_nchw[11] = 0.000000e+00f;
      conv2d_nchw[12] = 0.000000e+00f;
      conv2d_nchw[13] = 0.000000e+00f;
      conv2d_nchw[14] = 0.000000e+00f;
      conv2d_nchw[15] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 64; ++rc_outer_outer) {
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = ((((9 <= ((int)threadIdx.x)) && (1 <= (((int)threadIdx.x) % 9))) && ((((int)threadIdx.x) % 9) < 8)) ? data[((((rc_outer_outer * 392) + ((((int)threadIdx.x) / 9) * 7)) + (((int)threadIdx.x) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 49)] = (((((9 <= ((((int)threadIdx.x) + 49) % 81)) && (((((int)threadIdx.x) + 49) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 4) % 9))) && (((((int)threadIdx.x) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 49) / 81) * 49)) + ((((((int)threadIdx.x) + 49) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 98)] = (((1 <= ((((int)threadIdx.x) + 8) % 9)) && (((((int)threadIdx.x) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 98) / 81) * 49)) + (((((int)threadIdx.x) + 17) / 9) * 7)) + ((((int)threadIdx.x) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 147)] = (((((9 <= ((((int)threadIdx.x) + 66) % 81)) && (((((int)threadIdx.x) + 66) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 3) % 9))) && (((((int)threadIdx.x) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 147) / 81) * 49)) + ((((((int)threadIdx.x) + 66) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 196)] = (((((9 <= ((((int)threadIdx.x) + 34) % 81)) && (((((int)threadIdx.x) + 34) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 7) % 9))) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 196) / 81) * 49)) + ((((((int)threadIdx.x) + 34) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 245)] = ((((7 <= ((int)threadIdx.x)) && (1 <= ((((int)threadIdx.x) + 2) % 9))) && (((((int)threadIdx.x) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 245) / 81) * 49)) + (((((int)threadIdx.x) + 2) / 9) * 7)) + ((((int)threadIdx.x) + 2) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 294)] = (((((9 <= ((((int)threadIdx.x) + 51) % 81)) && (((((int)threadIdx.x) + 51) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 6) % 9))) && (((((int)threadIdx.x) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 294) / 81) * 49)) + ((((((int)threadIdx.x) + 51) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 343)] = (((1 <= ((((int)threadIdx.x) + 1) % 9)) && (((((int)threadIdx.x) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 343) / 81) * 49)) + (((((int)threadIdx.x) + 19) / 9) * 7)) + ((((int)threadIdx.x) + 1) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 392)] = (((((9 <= ((((int)threadIdx.x) + 68) % 81)) && (((((int)threadIdx.x) + 68) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 5) % 9))) && (((((int)threadIdx.x) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 392) / 81) * 49)) + ((((((int)threadIdx.x) + 68) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 441)] = (((((1 <= (((((int)threadIdx.x) / 9) + 4) % 9)) && (((((int)threadIdx.x) + 36) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 9))) && ((((int)threadIdx.x) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 441) / 81) * 49)) + ((((((int)threadIdx.x) / 9) + 4) % 9) * 7)) + (((int)threadIdx.x) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 490)] = ((((5 <= ((int)threadIdx.x)) && (1 <= ((((int)threadIdx.x) + 4) % 9))) && (((((int)threadIdx.x) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 490) / 81) * 49)) + (((((int)threadIdx.x) + 4) / 9) * 7)) + ((((int)threadIdx.x) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 539)] = (((((9 <= ((((int)threadIdx.x) + 53) % 81)) && (((((int)threadIdx.x) + 53) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 8) % 9))) && (((((int)threadIdx.x) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 539) / 81) * 49)) + ((((((int)threadIdx.x) + 53) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 588)] = (((1 <= ((((int)threadIdx.x) + 3) % 9)) && (((((int)threadIdx.x) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 588) / 81) * 49)) + (((((int)threadIdx.x) + 21) / 9) * 7)) + ((((int)threadIdx.x) + 3) % 9)) - 8)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 11) {
          pad_temp_shared[(((int)threadIdx.x) + 637)] = ((((((int)threadIdx.x) < 2) && (1 <= ((((int)threadIdx.x) + 7) % 9))) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 637) / 81) * 49)) + (((((int)threadIdx.x) + 70) / 9) * 7)) + ((int)threadIdx.x)) - 1)] : 0.000000e+00f);
        }
        kernel_shared[(((int)threadIdx.x) * 8)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) / 9) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) % 9) * 8) / 3) * 3)) + ((((int)threadIdx.x) * 2) % 3))];
        kernel_shared[((((int)threadIdx.x) * 8) + 1)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) % 9) * 8) + 1) / 3) * 3)) + (((((int)threadIdx.x) * 2) + 1) % 3))];
        kernel_shared[((((int)threadIdx.x) * 8) + 2)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) % 9) * 8) + 2) / 3) * 3)) + (((((int)threadIdx.x) * 2) + 2) % 3))];
        kernel_shared[((((int)threadIdx.x) * 8) + 3)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 8) / 3) + 1) % 24) * 3)) + ((((int)threadIdx.x) * 2) % 3))];
        kernel_shared[((((int)threadIdx.x) * 8) + 4)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) % 9) * 8) + 4) / 3) * 3)) + (((((int)threadIdx.x) * 2) + 1) % 3))];
        kernel_shared[((((int)threadIdx.x) * 8) + 5)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) % 9) * 8) + 5) / 3) * 3)) + (((((int)threadIdx.x) * 2) + 2) % 3))];
        kernel_shared[((((int)threadIdx.x) * 8) + 6)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 8) / 3) + 2) % 24) * 3)) + ((((int)threadIdx.x) * 2) % 3))];
        kernel_shared[((((int)threadIdx.x) * 8) + 7)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) % 9) * 8) + 7) / 3) * 3)) + (((((int)threadIdx.x) * 2) + 1) % 3))];
        kernel_shared[((((int)threadIdx.x) * 8) + 392)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 49) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 8) + 32) % 72) / 3) * 3)) + (((((int)threadIdx.x) * 2) + 2) % 3))];
        kernel_shared[((((int)threadIdx.x) * 8) + 393)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 49) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 8) / 3) + 11) % 24) * 3)) + ((((int)threadIdx.x) * 2) % 3))];
        kernel_shared[((((int)threadIdx.x) * 8) + 394)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 49) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 8) + 34) % 72) / 3) * 3)) + (((((int)threadIdx.x) * 2) + 1) % 3))];
        kernel_shared[((((int)threadIdx.x) * 8) + 395)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 49) / 9) * 4608)) + (rc_outer_outer * 72)) + ((((((((int)threadIdx.x) * 8) + 392) / 3) + 1) % 24) * 3)) + (((((int)threadIdx.x) * 2) + 2) % 3))];
        kernel_shared[((((int)threadIdx.x) * 8) + 396)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 49) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 8) / 3) + 12) % 24) * 3)) + ((((int)threadIdx.x) * 2) % 3))];
        kernel_shared[((((int)threadIdx.x) * 8) + 397)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 49) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 8) + 37) % 72) / 3) * 3)) + (((((int)threadIdx.x) * 2) + 1) % 3))];
        kernel_shared[((((int)threadIdx.x) * 8) + 398)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 49) / 9) * 4608)) + (rc_outer_outer * 72)) + ((((((((int)threadIdx.x) * 8) + 392) / 3) + 2) % 24) * 3)) + (((((int)threadIdx.x) * 2) + 2) % 3))];
        kernel_shared[((((int)threadIdx.x) * 8) + 399)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 49) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 8) / 3) + 13) % 24) * 3)) + ((((int)threadIdx.x) * 2) % 3))];
        if (((int)threadIdx.x) < 46) {
          kernel_shared[((((int)threadIdx.x) * 8) + 784)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 98) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 8) + 64) % 72) / 3) * 3)) + (((((int)threadIdx.x) * 2) + 1) % 3))];
        }
        if (((int)threadIdx.x) < 46) {
          kernel_shared[((((int)threadIdx.x) * 8) + 785)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 98) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 8) + 65) % 72) / 3) * 3)) + (((((int)threadIdx.x) * 2) + 2) % 3))];
        }
        if (((int)threadIdx.x) < 46) {
          kernel_shared[((((int)threadIdx.x) * 8) + 786)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 98) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 8) / 3) + 22) % 24) * 3)) + ((((int)threadIdx.x) * 2) % 3))];
        }
        if (((int)threadIdx.x) < 46) {
          kernel_shared[((((int)threadIdx.x) * 8) + 787)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 98) / 9) * 4608)) + (rc_outer_outer * 72)) + ((((((((int)threadIdx.x) * 8) + 784) / 3) + 1) % 24) * 3)) + (((((int)threadIdx.x) * 2) + 1) % 3))];
        }
        if (((int)threadIdx.x) < 46) {
          kernel_shared[((((int)threadIdx.x) * 8) + 788)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 98) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 8) + 68) % 72) / 3) * 3)) + (((((int)threadIdx.x) * 2) + 2) % 3))];
        }
        if (((int)threadIdx.x) < 46) {
          kernel_shared[((((int)threadIdx.x) * 8) + 789)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 98) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 8) / 3) + 23) % 24) * 3)) + ((((int)threadIdx.x) * 2) % 3))];
        }
        if (((int)threadIdx.x) < 46) {
          kernel_shared[((((int)threadIdx.x) * 8) + 790)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 98) / 9) * 4608)) + (rc_outer_outer * 72)) + ((((((((int)threadIdx.x) * 8) + 784) / 3) + 2) % 24) * 3)) + (((((int)threadIdx.x) * 2) + 1) % 3))];
        }
        if (((int)threadIdx.x) < 46) {
          kernel_shared[((((int)threadIdx.x) * 8) + 791)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 98) / 9) * 4608)) + (rc_outer_outer * 72)) + (((((((int)threadIdx.x) * 8) + 71) % 72) / 3) * 3)) + (((((int)threadIdx.x) * 2) + 2) % 3))];
        }
        __syncthreads();
        for (int rc_outer_inner = 0; rc_outer_inner < 4; ++rc_outer_inner) {
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[(rc_outer_inner * 18)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 1)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 2)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 3)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 4)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 5)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 6)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 7)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 8)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 9)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 10)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 11)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 12)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 13)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 14)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 15)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 16)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 17)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + 72)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 73)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 74)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 75)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 76)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 77)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 78)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 79)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 80)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 81)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 82)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 83)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 84)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 85)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 86)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 87)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 88)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 89)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + 144)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 145)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 146)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 147)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 148)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 149)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 150)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 151)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 152)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 153)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 154)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 155)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 156)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 157)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 158)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 159)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 160)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 161)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + 216)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 217)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 218)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 219)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 220)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 221)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 222)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 223)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 224)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 225)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 226)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 227)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 228)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 229)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 230)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 231)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 232)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 233)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + 288)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 289)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 290)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 291)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 292)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 293)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 294)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 295)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 296)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 297)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 298)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 299)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 300)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 301)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 302)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 303)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 304)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 305)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + 360)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 361)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 362)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 363)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 364)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 365)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 366)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 367)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 368)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 369)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 370)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 371)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 372)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 373)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 374)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 375)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 376)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 377)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + 432)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 433)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 434)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 435)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 436)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 437)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 438)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 439)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 440)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 441)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 442)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 443)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 444)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 445)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 446)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 447)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 448)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 449)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + 504)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 505)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 506)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 507)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 508)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 509)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 510)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 511)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 512)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 513)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 514)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 515)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 516)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 517)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 518)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 519)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 520)]));
          conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 521)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + 576)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 577)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 578)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 579)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 580)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 581)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 582)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 583)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 584)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 585)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 586)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 587)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 588)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 589)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 590)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 591)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 592)]));
          conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 593)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + 648)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 649)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 650)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 651)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 652)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 653)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 654)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 655)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 656)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 657)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 658)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 659)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 660)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 661)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 662)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 663)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 664)]));
          conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 665)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + 720)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 721)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 722)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 723)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 724)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 725)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 726)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 727)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 728)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 729)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 730)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 731)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 732)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 733)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 734)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 735)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 736)]));
          conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 737)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + 792)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 793)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 794)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 795)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 796)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 797)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 798)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 799)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 800)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 801)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 802)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 803)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 804)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 805)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 806)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 807)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 808)]));
          conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 809)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + 864)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 865)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 866)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 867)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 868)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 869)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 870)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 871)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 872)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 873)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 874)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 875)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 876)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 877)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 878)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 879)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 880)]));
          conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 881)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + 936)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 937)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 938)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 939)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 940)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 941)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 942)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 943)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 944)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 945)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 946)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 947)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 948)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 949)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 950)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 951)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 952)]));
          conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 953)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + 1008)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 1009)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 1010)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 1011)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 1012)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 1013)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 1014)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 1015)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 1016)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 1017)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 1018)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 1019)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 1020)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 1021)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 1022)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 1023)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 1024)]));
          conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 1025)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((rc_outer_inner * 18) + 1080)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((rc_outer_inner * 18) + 1081)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((rc_outer_inner * 18) + 1082)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((rc_outer_inner * 18) + 1083)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[((rc_outer_inner * 18) + 1084)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[((rc_outer_inner * 18) + 1085)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((rc_outer_inner * 18) + 1086)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[((rc_outer_inner * 18) + 1087)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[((rc_outer_inner * 18) + 1088)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[((rc_outer_inner * 18) + 1089)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[((rc_outer_inner * 18) + 1090)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[((rc_outer_inner * 18) + 1091)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[((rc_outer_inner * 18) + 1092)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[((rc_outer_inner * 18) + 1093)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[((rc_outer_inner * 18) + 1094)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[((rc_outer_inner * 18) + 1095)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[((rc_outer_inner * 18) + 1096)]));
          conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((rc_outer_inner * 162) + ((((int)threadIdx.x) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[((rc_outer_inner * 18) + 1097)]));
        }
      }
      for (int i1_inner = 0; i1_inner < 16; ++i1_inner) {
        compute[(((((int)blockIdx.x) * 784) + (i1_inner * 49)) + ((int)threadIdx.x))] = max((conv2d_nchw[i1_inner] + bias[((((int)blockIdx.x) * 16) + i1_inner)]), 0.000000e+00f);
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 190-194

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 194-216

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.7/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  18.757 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
