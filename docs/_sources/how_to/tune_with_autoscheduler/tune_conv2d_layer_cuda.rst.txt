
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-47

.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 48-53

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 53-65

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 66-69

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 69-82

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 83-100

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 100-110

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 111-117

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 117-126

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 127-130

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 130-134

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute}
      preflattened_buffer_map = {data_1: data_3: Buffer(data_2, float32, [1, 512, 7, 7], []), kernel_1: kernel_3: Buffer(kernel_2, float32, [512, 512, 3, 3], []), bias_1: bias_3: Buffer(bias_2, float32, [1, 512, 1, 1], []), compute_1: compute_3: Buffer(compute_2, float32, [1, 512, 7, 7], [])} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 112;
      allocate(conv2d_nchw: Pointer(local float32), float32, [7]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [144]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [1536]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [7], [], scope="local", align=16)[0] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[6] = 0f32
        for (rc.outer.outer: int32, 0, 32) {
          for (ry.outer.outer: int32, 0, 3) {
            let cse_var_4: int32 = (rc.outer.outer*784)
            let cse_var_3: int32 = (ry.outer.outer*7)
            let cse_var_2: int32 = (rc.outer.outer*144)
            let cse_var_1: int32 = (ry.outer.outer*3)
             {
              attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              pad_temp.shared_1: Buffer(pad_temp.shared, float32, [144], [], scope="shared")[threadIdx.x_1] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod(blockIdx.x, 7))) && ((ry.outer.outer + floormod(blockIdx.x, 7)) < 8)) && (1 <= floormod(threadIdx.x_1, 9))) && (floormod(threadIdx.x_1, 9) < 8)), data[(((((cse_var_4 + (floordiv(threadIdx.x_1, 9)*49)) + cse_var_3) + (floormod(blockIdx.x, 7)*7)) + floormod(threadIdx.x_1, 9)) - 8)], 0f32, dtype=float32)
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              pad_temp.shared_1[(threadIdx.x_1 + 32)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod(blockIdx.x, 7))) && ((ry.outer.outer + floormod(blockIdx.x, 7)) < 8)) && (1 <= floormod((threadIdx.x_1 + 5), 9))) && (floormod((threadIdx.x_1 + 5), 9) < 8)), data[(((((cse_var_4 + (floordiv((threadIdx.x_1 + 32), 9)*49)) + cse_var_3) + (floormod(blockIdx.x, 7)*7)) + floormod((threadIdx.x_1 + 5), 9)) - 8)], 0f32, dtype=float32)
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              pad_temp.shared_1[(threadIdx.x_1 + 64)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod(blockIdx.x, 7))) && ((ry.outer.outer + floormod(blockIdx.x, 7)) < 8)) && (1 <= floormod((threadIdx.x_1 + 1), 9))) && (floormod((threadIdx.x_1 + 1), 9) < 8)), data[(((((cse_var_4 + (floordiv((threadIdx.x_1 + 64), 9)*49)) + cse_var_3) + (floormod(blockIdx.x, 7)*7)) + floormod((threadIdx.x_1 + 1), 9)) - 8)], 0f32, dtype=float32)
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              pad_temp.shared_1[(threadIdx.x_1 + 96)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod(blockIdx.x, 7))) && ((ry.outer.outer + floormod(blockIdx.x, 7)) < 8)) && (1 <= floormod((threadIdx.x_1 + 6), 9))) && (floormod((threadIdx.x_1 + 6), 9) < 8)), data[(((((cse_var_4 + (floordiv((threadIdx.x_1 + 96), 9)*49)) + cse_var_3) + (floormod(blockIdx.x, 7)*7)) + floormod((threadIdx.x_1 + 6), 9)) - 8)], 0f32, dtype=float32)
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              if @tir.likely((threadIdx.x_1 < 16), dtype=bool) {
                pad_temp.shared_1[(threadIdx.x_1 + 128)] = @tir.if_then_else(((((1 <= (ry.outer.outer + floormod(blockIdx.x, 7))) && ((ry.outer.outer + floormod(blockIdx.x, 7)) < 8)) && (1 <= floormod((threadIdx.x_1 + 2), 9))) && (floormod((threadIdx.x_1 + 2), 9) < 8)), data[(((((cse_var_4 + (floordiv((threadIdx.x_1 + 128), 9)*49)) + cse_var_3) + (floormod(blockIdx.x, 7)*7)) + floormod((threadIdx.x_1 + 2), 9)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              kernel.shared_1: Buffer(kernel.shared, float32, [1536], [], scope="shared")[ramp((threadIdx.x_2*4), 1, 4)] = kernel[(((broadcast((((floordiv(blockIdx.x, 7)*147456) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_2), 4) + (floormod(floordiv(ramp((threadIdx.x_2*4), 1, 4), broadcast(3, 4)), broadcast(16, 4))*broadcast(9, 4))) + broadcast(cse_var_1, 4)) + floormod(ramp(threadIdx.x_2, 1, 4), broadcast(3, 4)))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              kernel.shared_1[ramp(((threadIdx.x_2*4) + 128), 1, 4)] = kernel[(((broadcast((((floordiv(blockIdx.x, 7)*147456) + (floordiv(((threadIdx.x_2*4) + 128), 48)*4608)) + cse_var_2), 4) + (floormod(floordiv(ramp(((threadIdx.x_2*4) + 128), 1, 4), broadcast(3, 4)), broadcast(16, 4))*broadcast(9, 4))) + broadcast(cse_var_1, 4)) + floormod(ramp((threadIdx.x_2 + 32), 1, 4), broadcast(3, 4)))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              kernel.shared_1[ramp(((threadIdx.x_2*4) + 256), 1, 4)] = kernel[(((broadcast((((floordiv(blockIdx.x, 7)*147456) + (floordiv(((threadIdx.x_2*4) + 256), 48)*4608)) + cse_var_2), 4) + (floormod(floordiv(ramp(((threadIdx.x_2*4) + 256), 1, 4), broadcast(3, 4)), broadcast(16, 4))*broadcast(9, 4))) + broadcast(cse_var_1, 4)) + floormod(ramp((threadIdx.x_2 + 64), 1, 4), broadcast(3, 4)))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              kernel.shared_1[ramp(((threadIdx.x_2*4) + 384), 1, 4)] = kernel[(((broadcast(((((floordiv(blockIdx.x, 7)*147456) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_2) + 36864), 4) + (floormod(floordiv(ramp(((threadIdx.x_2*4) + 384), 1, 4), broadcast(3, 4)), broadcast(16, 4))*broadcast(9, 4))) + broadcast(cse_var_1, 4)) + floormod(ramp((threadIdx.x_2 + 96), 1, 4), broadcast(3, 4)))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              kernel.shared_1[ramp(((threadIdx.x_2*4) + 512), 1, 4)] = kernel[(((broadcast((((floordiv(blockIdx.x, 7)*147456) + (floordiv(((threadIdx.x_2*4) + 512), 48)*4608)) + cse_var_2), 4) + (floormod(floordiv(ramp(((threadIdx.x_2*4) + 512), 1, 4), broadcast(3, 4)), broadcast(16, 4))*broadcast(9, 4))) + broadcast(cse_var_1, 4)) + floormod(ramp((threadIdx.x_2 + 128), 1, 4), broadcast(3, 4)))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              kernel.shared_1[ramp(((threadIdx.x_2*4) + 640), 1, 4)] = kernel[(((broadcast((((floordiv(blockIdx.x, 7)*147456) + (floordiv(((threadIdx.x_2*4) + 640), 48)*4608)) + cse_var_2), 4) + (floormod(floordiv(ramp(((threadIdx.x_2*4) + 640), 1, 4), broadcast(3, 4)), broadcast(16, 4))*broadcast(9, 4))) + broadcast(cse_var_1, 4)) + floormod(ramp((threadIdx.x_2 + 160), 1, 4), broadcast(3, 4)))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              kernel.shared_1[ramp(((threadIdx.x_2*4) + 768), 1, 4)] = kernel[(((broadcast(((((floordiv(blockIdx.x, 7)*147456) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_2) + 73728), 4) + (floormod(floordiv(ramp(((threadIdx.x_2*4) + 768), 1, 4), broadcast(3, 4)), broadcast(16, 4))*broadcast(9, 4))) + broadcast(cse_var_1, 4)) + floormod(ramp((threadIdx.x_2 + 192), 1, 4), broadcast(3, 4)))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              kernel.shared_1[ramp(((threadIdx.x_2*4) + 896), 1, 4)] = kernel[(((broadcast((((floordiv(blockIdx.x, 7)*147456) + (floordiv(((threadIdx.x_2*4) + 896), 48)*4608)) + cse_var_2), 4) + (floormod(floordiv(ramp(((threadIdx.x_2*4) + 896), 1, 4), broadcast(3, 4)), broadcast(16, 4))*broadcast(9, 4))) + broadcast(cse_var_1, 4)) + floormod(ramp((threadIdx.x_2 + 224), 1, 4), broadcast(3, 4)))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              kernel.shared_1[ramp(((threadIdx.x_2*4) + 1024), 1, 4)] = kernel[(((broadcast((((floordiv(blockIdx.x, 7)*147456) + (floordiv(((threadIdx.x_2*4) + 1024), 48)*4608)) + cse_var_2), 4) + (floormod(floordiv(ramp(((threadIdx.x_2*4) + 1024), 1, 4), broadcast(3, 4)), broadcast(16, 4))*broadcast(9, 4))) + broadcast(cse_var_1, 4)) + floormod(ramp((threadIdx.x_2 + 256), 1, 4), broadcast(3, 4)))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              kernel.shared_1[ramp(((threadIdx.x_2*4) + 1152), 1, 4)] = kernel[(((broadcast(((((floordiv(blockIdx.x, 7)*147456) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_2) + 110592), 4) + (floormod(floordiv(ramp(((threadIdx.x_2*4) + 1152), 1, 4), broadcast(3, 4)), broadcast(16, 4))*broadcast(9, 4))) + broadcast(cse_var_1, 4)) + floormod(ramp((threadIdx.x_2 + 288), 1, 4), broadcast(3, 4)))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              kernel.shared_1[ramp(((threadIdx.x_2*4) + 1280), 1, 4)] = kernel[(((broadcast((((floordiv(blockIdx.x, 7)*147456) + (floordiv(((threadIdx.x_2*4) + 1280), 48)*4608)) + cse_var_2), 4) + (floormod(floordiv(ramp(((threadIdx.x_2*4) + 1280), 1, 4), broadcast(3, 4)), broadcast(16, 4))*broadcast(9, 4))) + broadcast(cse_var_1, 4)) + floormod(ramp((threadIdx.x_2 + 320), 1, 4), broadcast(3, 4)))]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
              kernel.shared_1[ramp(((threadIdx.x_2*4) + 1408), 1, 4)] = kernel[(((broadcast((((floordiv(blockIdx.x, 7)*147456) + (floordiv(((threadIdx.x_2*4) + 1408), 48)*4608)) + cse_var_2), 4) + (floormod(floordiv(ramp(((threadIdx.x_2*4) + 1408), 1, 4), broadcast(3, 4)), broadcast(16, 4))*broadcast(9, 4))) + broadcast(cse_var_1, 4)) + floormod(ramp((threadIdx.x_2 + 352), 1, 4), broadcast(3, 4)))]
              for (rc.outer.inner: int32, 0, 8) {
                let cse_var_19: int32 = (rc.outer.inner*18)
                let cse_var_18: int32 = (cse_var_19 + 7)
                let cse_var_17: int32 = (cse_var_19 + 6)
                let cse_var_16: int32 = (cse_var_19 + 5)
                let cse_var_15: int32 = (cse_var_19 + 4)
                let cse_var_14: int32 = (cse_var_19 + 3)
                let cse_var_13: int32 = (cse_var_19 + 2)
                let cse_var_12: int32 = (cse_var_19 + 16)
                let cse_var_11: int32 = (cse_var_19 + 15)
                let cse_var_10: int32 = (cse_var_19 + 14)
                let cse_var_9: int32 = (cse_var_19 + 13)
                let cse_var_8: int32 = (cse_var_19 + 12)
                let cse_var_7: int32 = (cse_var_19 + 11)
                let cse_var_6: int32 = (cse_var_19 + 10)
                let cse_var_5: int32 = (cse_var_19 + 1)
                 {
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_19]*kernel.shared_1[((threadIdx.x*48) + (rc.outer.inner*6))]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[cse_var_5]*kernel.shared_1[((threadIdx.x*48) + (rc.outer.inner*6))]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[cse_var_13]*kernel.shared_1[((threadIdx.x*48) + (rc.outer.inner*6))]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[cse_var_14]*kernel.shared_1[((threadIdx.x*48) + (rc.outer.inner*6))]))
                  conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[cse_var_15]*kernel.shared_1[((threadIdx.x*48) + (rc.outer.inner*6))]))
                  conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[cse_var_16]*kernel.shared_1[((threadIdx.x*48) + (rc.outer.inner*6))]))
                  conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[cse_var_17]*kernel.shared_1[((threadIdx.x*48) + (rc.outer.inner*6))]))
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_5]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 1)]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[cse_var_13]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 1)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[cse_var_14]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 1)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[cse_var_15]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 1)]))
                  conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[cse_var_16]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 1)]))
                  conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[cse_var_17]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 1)]))
                  conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[cse_var_18]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 1)]))
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_13]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 2)]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[cse_var_14]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 2)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[cse_var_15]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 2)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[cse_var_16]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 2)]))
                  conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[cse_var_17]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 2)]))
                  conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[cse_var_18]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 2)]))
                  conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_19 + 8)]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 2)]))
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(cse_var_19 + 9)]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 3)]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[cse_var_6]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 3)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[cse_var_7]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 3)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[cse_var_8]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 3)]))
                  conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[cse_var_9]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 3)]))
                  conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[cse_var_10]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 3)]))
                  conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[cse_var_11]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 3)]))
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_6]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 4)]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[cse_var_7]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 4)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[cse_var_8]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 4)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[cse_var_9]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 4)]))
                  conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[cse_var_10]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 4)]))
                  conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[cse_var_11]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 4)]))
                  conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[cse_var_12]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 4)]))
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[cse_var_7]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 5)]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[cse_var_8]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 5)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[cse_var_9]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 5)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[cse_var_10]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 5)]))
                  conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[cse_var_11]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 5)]))
                  conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[cse_var_12]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 5)]))
                  conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(cse_var_19 + 17)]*kernel.shared_1[(((threadIdx.x*48) + (rc.outer.inner*6)) + 5)]))
                }
              }
            }
          }
        }
        for (i3.inner: int32, 0, 7) {
          compute[((((floordiv(blockIdx.x, 7)*1568) + (threadIdx.x*49)) + (floormod(blockIdx.x, 7)*7)) + i3.inner)] = max((conv2d_nchw_1[i3.inner] + bias[((floordiv(blockIdx.x, 7)*32) + threadIdx.x)]), 0f32)
        }
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 135-138

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 138-165

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.322 ms




.. GENERATED FROM PYTHON SOURCE LINES 166-171

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 173-176

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 176-183

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=32)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=7)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=2)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=8)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=3)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=32)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=7)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=4)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=32)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=32)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 64)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(32) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[7];
      __shared__ float pad_temp_shared[144];
      __shared__ float kernel_shared[1536];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 32; ++rc_outer_outer) {
        for (int ry_outer_outer = 0; ry_outer_outer < 3; ++ry_outer_outer) {
          __syncthreads();
          pad_temp_shared[((int)threadIdx.x)] = (((((1 <= (ry_outer_outer + (((int)blockIdx.x) % 7))) && ((ry_outer_outer + (((int)blockIdx.x) % 7)) < 8)) && (1 <= (((int)threadIdx.x) % 9))) && ((((int)threadIdx.x) % 9) < 8)) ? data[((((((rc_outer_outer * 784) + ((((int)threadIdx.x) / 9) * 49)) + (ry_outer_outer * 7)) + ((((int)blockIdx.x) % 7) * 7)) + (((int)threadIdx.x) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 32)] = (((((1 <= (ry_outer_outer + (((int)blockIdx.x) % 7))) && ((ry_outer_outer + (((int)blockIdx.x) % 7)) < 8)) && (1 <= ((((int)threadIdx.x) + 5) % 9))) && (((((int)threadIdx.x) + 5) % 9) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 32) / 9) * 49)) + (ry_outer_outer * 7)) + ((((int)blockIdx.x) % 7) * 7)) + ((((int)threadIdx.x) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 64)] = (((((1 <= (ry_outer_outer + (((int)blockIdx.x) % 7))) && ((ry_outer_outer + (((int)blockIdx.x) % 7)) < 8)) && (1 <= ((((int)threadIdx.x) + 1) % 9))) && (((((int)threadIdx.x) + 1) % 9) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 64) / 9) * 49)) + (ry_outer_outer * 7)) + ((((int)blockIdx.x) % 7) * 7)) + ((((int)threadIdx.x) + 1) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 96)] = (((((1 <= (ry_outer_outer + (((int)blockIdx.x) % 7))) && ((ry_outer_outer + (((int)blockIdx.x) % 7)) < 8)) && (1 <= ((((int)threadIdx.x) + 6) % 9))) && (((((int)threadIdx.x) + 6) % 9) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 96) / 9) * 49)) + (ry_outer_outer * 7)) + ((((int)blockIdx.x) % 7) * 7)) + ((((int)threadIdx.x) + 6) % 9)) - 8)] : 0.000000e+00f);
          if (((int)threadIdx.x) < 16) {
            pad_temp_shared[(((int)threadIdx.x) + 128)] = (((((1 <= (ry_outer_outer + (((int)blockIdx.x) % 7))) && ((ry_outer_outer + (((int)blockIdx.x) % 7)) < 8)) && (1 <= ((((int)threadIdx.x) + 2) % 9))) && (((((int)threadIdx.x) + 2) % 9) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 128) / 9) * 49)) + (ry_outer_outer * 7)) + ((((int)blockIdx.x) % 7) * 7)) + ((((int)threadIdx.x) + 2) % 9)) - 8)] : 0.000000e+00f);
          }
          int4 _1;
            int4 _2;
              int4 _3;
                int4 _4 = make_int4(((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)));
                int4 _5;
                  int4 _6;
                    int4 _7;
                      int4 _8 = make_int4(((((int)threadIdx.x) * 4))+(1*0), ((((int)threadIdx.x) * 4))+(1*1), ((((int)threadIdx.x) * 4))+(1*2), ((((int)threadIdx.x) * 4))+(1*3));
                      int4 _9 = make_int4(3, 3, 3, 3);
                      _7.x = (_8.x%_9.x);
                      _7.y = (_8.y%_9.y);
                      _7.z = (_8.z%_9.z);
                      _7.w = (_8.w%_9.w);
                    int4 _10;
                      int4 _11 = make_int4(((((int)threadIdx.x) * 4))+(1*0), ((((int)threadIdx.x) * 4))+(1*1), ((((int)threadIdx.x) * 4))+(1*2), ((((int)threadIdx.x) * 4))+(1*3));
                      int4 _12 = make_int4(3, 3, 3, 3);
                      _10.x = (_11.x/_12.x);
                      _10.y = (_11.y/_12.y);
                      _10.z = (_11.z/_12.z);
                      _10.w = (_11.w/_12.w);
                    int4 _13;
                    ushort4 _14;
                      ushort4 _15;
                        ushort4 _16;
                          int4 _17 = make_int4(3, 3, 3, 3);
                          int4 _18 = make_int4(0, 0, 0, 0);
                          _16.x = (_17.x>=_18.x);
                          _16.y = (_17.y>=_18.y);
                          _16.z = (_17.z>=_18.z);
                          _16.w = (_17.w>=_18.w);
                        ushort4 _19;
                          int4 _20 = make_int4(0, 0, 0, 0);
                          _19.x = (_7.x>=_20.x);
                          _19.y = (_7.y>=_20.y);
                          _19.z = (_7.z>=_20.z);
                          _19.w = (_7.w>=_20.w);
                        _15.x = (_16.x&&_19.x);
                        _15.y = (_16.y&&_19.y);
                        _15.z = (_16.z&&_19.z);
                        _15.w = (_16.w&&_19.w);
                      ushort4 _21;
                        ushort4 _22;
                          int4 _23 = make_int4(3, 3, 3, 3);
                          int4 _24 = make_int4(0, 0, 0, 0);
                          _22.x = (_23.x<_24.x);
                          _22.y = (_23.y<_24.y);
                          _22.z = (_23.z<_24.z);
                          _22.w = (_23.w<_24.w);
                        ushort4 _25;
                          int4 _26 = make_int4(0, 0, 0, 0);
                          _25.x = (_7.x<=_26.x);
                          _25.y = (_7.y<=_26.y);
                          _25.z = (_7.z<=_26.z);
                          _25.w = (_7.w<=_26.w);
                        _21.x = (_22.x&&_25.x);
                        _21.y = (_22.y&&_25.y);
                        _21.z = (_22.z&&_25.z);
                        _21.w = (_22.w&&_25.w);
                      _14.x = (_15.x||_21.x);
                      _14.y = (_15.y||_21.y);
                      _14.z = (_15.z||_21.z);
                      _14.w = (_15.w||_21.w);
                    int4 _27;
                      int4 _28 = make_int4(1, 1, 1, 1);
                      _27.x = (_10.x-_28.x);
                      _27.y = (_10.y-_28.y);
                      _27.z = (_10.z-_28.z);
                      _27.w = (_10.w-_28.w);
                    _13.x = (bool(_14.x)?_10.x:_27.x);
                    _13.y = (bool(_14.y)?_10.y:_27.y);
                    _13.z = (bool(_14.z)?_10.z:_27.z);
                    _13.w = (bool(_14.w)?_10.w:_27.w);
                    int4 _29 = make_int4(16, 16, 16, 16);
                    _6.x = (_13.x%_29.x);
                    _6.y = (_13.y%_29.y);
                    _6.z = (_13.z%_29.z);
                    _6.w = (_13.w%_29.w);
                  int4 _30;
                  ushort4 _31;
                    ushort4 _32;
                      ushort4 _33;
                        int4 _34 = make_int4(16, 16, 16, 16);
                        int4 _35 = make_int4(0, 0, 0, 0);
                        _33.x = (_34.x>=_35.x);
                        _33.y = (_34.y>=_35.y);
                        _33.z = (_34.z>=_35.z);
                        _33.w = (_34.w>=_35.w);
                      ushort4 _36;
                        int4 _37 = make_int4(0, 0, 0, 0);
                        _36.x = (_6.x>=_37.x);
                        _36.y = (_6.y>=_37.y);
                        _36.z = (_6.z>=_37.z);
                        _36.w = (_6.w>=_37.w);
                      _32.x = (_33.x&&_36.x);
                      _32.y = (_33.y&&_36.y);
                      _32.z = (_33.z&&_36.z);
                      _32.w = (_33.w&&_36.w);
                    ushort4 _38;
                      ushort4 _39;
                        int4 _40 = make_int4(16, 16, 16, 16);
                        int4 _41 = make_int4(0, 0, 0, 0);
                        _39.x = (_40.x<_41.x);
                        _39.y = (_40.y<_41.y);
                        _39.z = (_40.z<_41.z);
                        _39.w = (_40.w<_41.w);
                      ushort4 _42;
                        int4 _43 = make_int4(0, 0, 0, 0);
                        _42.x = (_6.x<=_43.x);
                        _42.y = (_6.y<=_43.y);
                        _42.z = (_6.z<=_43.z);
                        _42.w = (_6.w<=_43.w);
                      _38.x = (_39.x&&_42.x);
                      _38.y = (_39.y&&_42.y);
                      _38.z = (_39.z&&_42.z);
                      _38.w = (_39.w&&_42.w);
                    _31.x = (_32.x||_38.x);
                    _31.y = (_32.y||_38.y);
                    _31.z = (_32.z||_38.z);
                    _31.w = (_32.w||_38.w);
                  int4 _44;
                    int4 _45 = make_int4(16, 16, 16, 16);
                    _44.x = (_6.x+_45.x);
                    _44.y = (_6.y+_45.y);
                    _44.z = (_6.z+_45.z);
                    _44.w = (_6.w+_45.w);
                  _30.x = (bool(_31.x)?_6.x:_44.x);
                  _30.y = (bool(_31.y)?_6.y:_44.y);
                  _30.z = (bool(_31.z)?_6.z:_44.z);
                  _30.w = (bool(_31.w)?_6.w:_44.w);
                  int4 _46 = make_int4(9, 9, 9, 9);
                  _5.x = (_30.x*_46.x);
                  _5.y = (_30.y*_46.y);
                  _5.z = (_30.z*_46.z);
                  _5.w = (_30.w*_46.w);
                _3.x = (_4.x+_5.x);
                _3.y = (_4.y+_5.y);
                _3.z = (_4.z+_5.z);
                _3.w = (_4.w+_5.w);
              int4 _47 = make_int4((ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3));
              _2.x = (_3.x+_47.x);
              _2.y = (_3.y+_47.y);
              _2.z = (_3.z+_47.z);
              _2.w = (_3.w+_47.w);
            int4 _48;
              int4 _49 = make_int4((((int)threadIdx.x))+(1*0), (((int)threadIdx.x))+(1*1), (((int)threadIdx.x))+(1*2), (((int)threadIdx.x))+(1*3));
              int4 _50 = make_int4(3, 3, 3, 3);
              _48.x = (_49.x%_50.x);
              _48.y = (_49.y%_50.y);
              _48.z = (_49.z%_50.z);
              _48.w = (_49.w%_50.w);
            int4 _51;
            ushort4 _52;
              ushort4 _53;
                ushort4 _54;
                  int4 _55 = make_int4(3, 3, 3, 3);
                  int4 _56 = make_int4(0, 0, 0, 0);
                  _54.x = (_55.x>=_56.x);
                  _54.y = (_55.y>=_56.y);
                  _54.z = (_55.z>=_56.z);
                  _54.w = (_55.w>=_56.w);
                ushort4 _57;
                  int4 _58 = make_int4(0, 0, 0, 0);
                  _57.x = (_48.x>=_58.x);
                  _57.y = (_48.y>=_58.y);
                  _57.z = (_48.z>=_58.z);
                  _57.w = (_48.w>=_58.w);
                _53.x = (_54.x&&_57.x);
                _53.y = (_54.y&&_57.y);
                _53.z = (_54.z&&_57.z);
                _53.w = (_54.w&&_57.w);
              ushort4 _59;
                ushort4 _60;
                  int4 _61 = make_int4(3, 3, 3, 3);
                  int4 _62 = make_int4(0, 0, 0, 0);
                  _60.x = (_61.x<_62.x);
                  _60.y = (_61.y<_62.y);
                  _60.z = (_61.z<_62.z);
                  _60.w = (_61.w<_62.w);
                ushort4 _63;
                  int4 _64 = make_int4(0, 0, 0, 0);
                  _63.x = (_48.x<=_64.x);
                  _63.y = (_48.y<=_64.y);
                  _63.z = (_48.z<=_64.z);
                  _63.w = (_48.w<=_64.w);
                _59.x = (_60.x&&_63.x);
                _59.y = (_60.y&&_63.y);
                _59.z = (_60.z&&_63.z);
                _59.w = (_60.w&&_63.w);
              _52.x = (_53.x||_59.x);
              _52.y = (_53.y||_59.y);
              _52.z = (_53.z||_59.z);
              _52.w = (_53.w||_59.w);
            int4 _65;
              int4 _66 = make_int4(3, 3, 3, 3);
              _65.x = (_48.x+_66.x);
              _65.y = (_48.y+_66.y);
              _65.z = (_48.z+_66.z);
              _65.w = (_48.w+_66.w);
            _51.x = (bool(_52.x)?_48.x:_65.x);
            _51.y = (bool(_52.y)?_48.y:_65.y);
            _51.z = (bool(_52.z)?_48.z:_65.z);
            _51.w = (bool(_52.w)?_48.w:_65.w);
            _1.x = (_2.x+_51.x);
            _1.y = (_2.y+_51.y);
            _1.z = (_2.z+_51.z);
            _1.w = (_2.w+_51.w);
          *(float4*)(kernel_shared + (((int)threadIdx.x) * 4)) = make_float4(kernel[_1.x],kernel[_1.y],kernel[_1.z],kernel[_1.w]);
          int4 _67;
            int4 _68;
              int4 _69;
                int4 _70 = make_int4(((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 128) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 128) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 128) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 128) / 48) * 4608)) + (rc_outer_outer * 144)));
                int4 _71;
                  int4 _72;
                    int4 _73;
                      int4 _74 = make_int4((((((int)threadIdx.x) * 4) + 128))+(1*0), (((((int)threadIdx.x) * 4) + 128))+(1*1), (((((int)threadIdx.x) * 4) + 128))+(1*2), (((((int)threadIdx.x) * 4) + 128))+(1*3));
                      int4 _75 = make_int4(3, 3, 3, 3);
                      _73.x = (_74.x%_75.x);
                      _73.y = (_74.y%_75.y);
                      _73.z = (_74.z%_75.z);
                      _73.w = (_74.w%_75.w);
                    int4 _76;
                      int4 _77 = make_int4((((((int)threadIdx.x) * 4) + 128))+(1*0), (((((int)threadIdx.x) * 4) + 128))+(1*1), (((((int)threadIdx.x) * 4) + 128))+(1*2), (((((int)threadIdx.x) * 4) + 128))+(1*3));
                      int4 _78 = make_int4(3, 3, 3, 3);
                      _76.x = (_77.x/_78.x);
                      _76.y = (_77.y/_78.y);
                      _76.z = (_77.z/_78.z);
                      _76.w = (_77.w/_78.w);
                    int4 _79;
                    ushort4 _80;
                      ushort4 _81;
                        ushort4 _82;
                          int4 _83 = make_int4(3, 3, 3, 3);
                          int4 _84 = make_int4(0, 0, 0, 0);
                          _82.x = (_83.x>=_84.x);
                          _82.y = (_83.y>=_84.y);
                          _82.z = (_83.z>=_84.z);
                          _82.w = (_83.w>=_84.w);
                        ushort4 _85;
                          int4 _86 = make_int4(0, 0, 0, 0);
                          _85.x = (_73.x>=_86.x);
                          _85.y = (_73.y>=_86.y);
                          _85.z = (_73.z>=_86.z);
                          _85.w = (_73.w>=_86.w);
                        _81.x = (_82.x&&_85.x);
                        _81.y = (_82.y&&_85.y);
                        _81.z = (_82.z&&_85.z);
                        _81.w = (_82.w&&_85.w);
                      ushort4 _87;
                        ushort4 _88;
                          int4 _89 = make_int4(3, 3, 3, 3);
                          int4 _90 = make_int4(0, 0, 0, 0);
                          _88.x = (_89.x<_90.x);
                          _88.y = (_89.y<_90.y);
                          _88.z = (_89.z<_90.z);
                          _88.w = (_89.w<_90.w);
                        ushort4 _91;
                          int4 _92 = make_int4(0, 0, 0, 0);
                          _91.x = (_73.x<=_92.x);
                          _91.y = (_73.y<=_92.y);
                          _91.z = (_73.z<=_92.z);
                          _91.w = (_73.w<=_92.w);
                        _87.x = (_88.x&&_91.x);
                        _87.y = (_88.y&&_91.y);
                        _87.z = (_88.z&&_91.z);
                        _87.w = (_88.w&&_91.w);
                      _80.x = (_81.x||_87.x);
                      _80.y = (_81.y||_87.y);
                      _80.z = (_81.z||_87.z);
                      _80.w = (_81.w||_87.w);
                    int4 _93;
                      int4 _94 = make_int4(1, 1, 1, 1);
                      _93.x = (_76.x-_94.x);
                      _93.y = (_76.y-_94.y);
                      _93.z = (_76.z-_94.z);
                      _93.w = (_76.w-_94.w);
                    _79.x = (bool(_80.x)?_76.x:_93.x);
                    _79.y = (bool(_80.y)?_76.y:_93.y);
                    _79.z = (bool(_80.z)?_76.z:_93.z);
                    _79.w = (bool(_80.w)?_76.w:_93.w);
                    int4 _95 = make_int4(16, 16, 16, 16);
                    _72.x = (_79.x%_95.x);
                    _72.y = (_79.y%_95.y);
                    _72.z = (_79.z%_95.z);
                    _72.w = (_79.w%_95.w);
                  int4 _96;
                  ushort4 _97;
                    ushort4 _98;
                      ushort4 _99;
                        int4 _100 = make_int4(16, 16, 16, 16);
                        int4 _101 = make_int4(0, 0, 0, 0);
                        _99.x = (_100.x>=_101.x);
                        _99.y = (_100.y>=_101.y);
                        _99.z = (_100.z>=_101.z);
                        _99.w = (_100.w>=_101.w);
                      ushort4 _102;
                        int4 _103 = make_int4(0, 0, 0, 0);
                        _102.x = (_72.x>=_103.x);
                        _102.y = (_72.y>=_103.y);
                        _102.z = (_72.z>=_103.z);
                        _102.w = (_72.w>=_103.w);
                      _98.x = (_99.x&&_102.x);
                      _98.y = (_99.y&&_102.y);
                      _98.z = (_99.z&&_102.z);
                      _98.w = (_99.w&&_102.w);
                    ushort4 _104;
                      ushort4 _105;
                        int4 _106 = make_int4(16, 16, 16, 16);
                        int4 _107 = make_int4(0, 0, 0, 0);
                        _105.x = (_106.x<_107.x);
                        _105.y = (_106.y<_107.y);
                        _105.z = (_106.z<_107.z);
                        _105.w = (_106.w<_107.w);
                      ushort4 _108;
                        int4 _109 = make_int4(0, 0, 0, 0);
                        _108.x = (_72.x<=_109.x);
                        _108.y = (_72.y<=_109.y);
                        _108.z = (_72.z<=_109.z);
                        _108.w = (_72.w<=_109.w);
                      _104.x = (_105.x&&_108.x);
                      _104.y = (_105.y&&_108.y);
                      _104.z = (_105.z&&_108.z);
                      _104.w = (_105.w&&_108.w);
                    _97.x = (_98.x||_104.x);
                    _97.y = (_98.y||_104.y);
                    _97.z = (_98.z||_104.z);
                    _97.w = (_98.w||_104.w);
                  int4 _110;
                    int4 _111 = make_int4(16, 16, 16, 16);
                    _110.x = (_72.x+_111.x);
                    _110.y = (_72.y+_111.y);
                    _110.z = (_72.z+_111.z);
                    _110.w = (_72.w+_111.w);
                  _96.x = (bool(_97.x)?_72.x:_110.x);
                  _96.y = (bool(_97.y)?_72.y:_110.y);
                  _96.z = (bool(_97.z)?_72.z:_110.z);
                  _96.w = (bool(_97.w)?_72.w:_110.w);
                  int4 _112 = make_int4(9, 9, 9, 9);
                  _71.x = (_96.x*_112.x);
                  _71.y = (_96.y*_112.y);
                  _71.z = (_96.z*_112.z);
                  _71.w = (_96.w*_112.w);
                _69.x = (_70.x+_71.x);
                _69.y = (_70.y+_71.y);
                _69.z = (_70.z+_71.z);
                _69.w = (_70.w+_71.w);
              int4 _113 = make_int4((ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3));
              _68.x = (_69.x+_113.x);
              _68.y = (_69.y+_113.y);
              _68.z = (_69.z+_113.z);
              _68.w = (_69.w+_113.w);
            int4 _114;
              int4 _115 = make_int4(((((int)threadIdx.x) + 32))+(1*0), ((((int)threadIdx.x) + 32))+(1*1), ((((int)threadIdx.x) + 32))+(1*2), ((((int)threadIdx.x) + 32))+(1*3));
              int4 _116 = make_int4(3, 3, 3, 3);
              _114.x = (_115.x%_116.x);
              _114.y = (_115.y%_116.y);
              _114.z = (_115.z%_116.z);
              _114.w = (_115.w%_116.w);
            int4 _117;
            ushort4 _118;
              ushort4 _119;
                ushort4 _120;
                  int4 _121 = make_int4(3, 3, 3, 3);
                  int4 _122 = make_int4(0, 0, 0, 0);
                  _120.x = (_121.x>=_122.x);
                  _120.y = (_121.y>=_122.y);
                  _120.z = (_121.z>=_122.z);
                  _120.w = (_121.w>=_122.w);
                ushort4 _123;
                  int4 _124 = make_int4(0, 0, 0, 0);
                  _123.x = (_114.x>=_124.x);
                  _123.y = (_114.y>=_124.y);
                  _123.z = (_114.z>=_124.z);
                  _123.w = (_114.w>=_124.w);
                _119.x = (_120.x&&_123.x);
                _119.y = (_120.y&&_123.y);
                _119.z = (_120.z&&_123.z);
                _119.w = (_120.w&&_123.w);
              ushort4 _125;
                ushort4 _126;
                  int4 _127 = make_int4(3, 3, 3, 3);
                  int4 _128 = make_int4(0, 0, 0, 0);
                  _126.x = (_127.x<_128.x);
                  _126.y = (_127.y<_128.y);
                  _126.z = (_127.z<_128.z);
                  _126.w = (_127.w<_128.w);
                ushort4 _129;
                  int4 _130 = make_int4(0, 0, 0, 0);
                  _129.x = (_114.x<=_130.x);
                  _129.y = (_114.y<=_130.y);
                  _129.z = (_114.z<=_130.z);
                  _129.w = (_114.w<=_130.w);
                _125.x = (_126.x&&_129.x);
                _125.y = (_126.y&&_129.y);
                _125.z = (_126.z&&_129.z);
                _125.w = (_126.w&&_129.w);
              _118.x = (_119.x||_125.x);
              _118.y = (_119.y||_125.y);
              _118.z = (_119.z||_125.z);
              _118.w = (_119.w||_125.w);
            int4 _131;
              int4 _132 = make_int4(3, 3, 3, 3);
              _131.x = (_114.x+_132.x);
              _131.y = (_114.y+_132.y);
              _131.z = (_114.z+_132.z);
              _131.w = (_114.w+_132.w);
            _117.x = (bool(_118.x)?_114.x:_131.x);
            _117.y = (bool(_118.y)?_114.y:_131.y);
            _117.z = (bool(_118.z)?_114.z:_131.z);
            _117.w = (bool(_118.w)?_114.w:_131.w);
            _67.x = (_68.x+_117.x);
            _67.y = (_68.y+_117.y);
            _67.z = (_68.z+_117.z);
            _67.w = (_68.w+_117.w);
          *(float4*)(kernel_shared + ((((int)threadIdx.x) * 4) + 128)) = make_float4(kernel[_67.x],kernel[_67.y],kernel[_67.z],kernel[_67.w]);
          int4 _133;
            int4 _134;
              int4 _135;
                int4 _136 = make_int4(((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 256) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 256) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 256) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 256) / 48) * 4608)) + (rc_outer_outer * 144)));
                int4 _137;
                  int4 _138;
                    int4 _139;
                      int4 _140 = make_int4((((((int)threadIdx.x) * 4) + 256))+(1*0), (((((int)threadIdx.x) * 4) + 256))+(1*1), (((((int)threadIdx.x) * 4) + 256))+(1*2), (((((int)threadIdx.x) * 4) + 256))+(1*3));
                      int4 _141 = make_int4(3, 3, 3, 3);
                      _139.x = (_140.x%_141.x);
                      _139.y = (_140.y%_141.y);
                      _139.z = (_140.z%_141.z);
                      _139.w = (_140.w%_141.w);
                    int4 _142;
                      int4 _143 = make_int4((((((int)threadIdx.x) * 4) + 256))+(1*0), (((((int)threadIdx.x) * 4) + 256))+(1*1), (((((int)threadIdx.x) * 4) + 256))+(1*2), (((((int)threadIdx.x) * 4) + 256))+(1*3));
                      int4 _144 = make_int4(3, 3, 3, 3);
                      _142.x = (_143.x/_144.x);
                      _142.y = (_143.y/_144.y);
                      _142.z = (_143.z/_144.z);
                      _142.w = (_143.w/_144.w);
                    int4 _145;
                    ushort4 _146;
                      ushort4 _147;
                        ushort4 _148;
                          int4 _149 = make_int4(3, 3, 3, 3);
                          int4 _150 = make_int4(0, 0, 0, 0);
                          _148.x = (_149.x>=_150.x);
                          _148.y = (_149.y>=_150.y);
                          _148.z = (_149.z>=_150.z);
                          _148.w = (_149.w>=_150.w);
                        ushort4 _151;
                          int4 _152 = make_int4(0, 0, 0, 0);
                          _151.x = (_139.x>=_152.x);
                          _151.y = (_139.y>=_152.y);
                          _151.z = (_139.z>=_152.z);
                          _151.w = (_139.w>=_152.w);
                        _147.x = (_148.x&&_151.x);
                        _147.y = (_148.y&&_151.y);
                        _147.z = (_148.z&&_151.z);
                        _147.w = (_148.w&&_151.w);
                      ushort4 _153;
                        ushort4 _154;
                          int4 _155 = make_int4(3, 3, 3, 3);
                          int4 _156 = make_int4(0, 0, 0, 0);
                          _154.x = (_155.x<_156.x);
                          _154.y = (_155.y<_156.y);
                          _154.z = (_155.z<_156.z);
                          _154.w = (_155.w<_156.w);
                        ushort4 _157;
                          int4 _158 = make_int4(0, 0, 0, 0);
                          _157.x = (_139.x<=_158.x);
                          _157.y = (_139.y<=_158.y);
                          _157.z = (_139.z<=_158.z);
                          _157.w = (_139.w<=_158.w);
                        _153.x = (_154.x&&_157.x);
                        _153.y = (_154.y&&_157.y);
                        _153.z = (_154.z&&_157.z);
                        _153.w = (_154.w&&_157.w);
                      _146.x = (_147.x||_153.x);
                      _146.y = (_147.y||_153.y);
                      _146.z = (_147.z||_153.z);
                      _146.w = (_147.w||_153.w);
                    int4 _159;
                      int4 _160 = make_int4(1, 1, 1, 1);
                      _159.x = (_142.x-_160.x);
                      _159.y = (_142.y-_160.y);
                      _159.z = (_142.z-_160.z);
                      _159.w = (_142.w-_160.w);
                    _145.x = (bool(_146.x)?_142.x:_159.x);
                    _145.y = (bool(_146.y)?_142.y:_159.y);
                    _145.z = (bool(_146.z)?_142.z:_159.z);
                    _145.w = (bool(_146.w)?_142.w:_159.w);
                    int4 _161 = make_int4(16, 16, 16, 16);
                    _138.x = (_145.x%_161.x);
                    _138.y = (_145.y%_161.y);
                    _138.z = (_145.z%_161.z);
                    _138.w = (_145.w%_161.w);
                  int4 _162;
                  ushort4 _163;
                    ushort4 _164;
                      ushort4 _165;
                        int4 _166 = make_int4(16, 16, 16, 16);
                        int4 _167 = make_int4(0, 0, 0, 0);
                        _165.x = (_166.x>=_167.x);
                        _165.y = (_166.y>=_167.y);
                        _165.z = (_166.z>=_167.z);
                        _165.w = (_166.w>=_167.w);
                      ushort4 _168;
                        int4 _169 = make_int4(0, 0, 0, 0);
                        _168.x = (_138.x>=_169.x);
                        _168.y = (_138.y>=_169.y);
                        _168.z = (_138.z>=_169.z);
                        _168.w = (_138.w>=_169.w);
                      _164.x = (_165.x&&_168.x);
                      _164.y = (_165.y&&_168.y);
                      _164.z = (_165.z&&_168.z);
                      _164.w = (_165.w&&_168.w);
                    ushort4 _170;
                      ushort4 _171;
                        int4 _172 = make_int4(16, 16, 16, 16);
                        int4 _173 = make_int4(0, 0, 0, 0);
                        _171.x = (_172.x<_173.x);
                        _171.y = (_172.y<_173.y);
                        _171.z = (_172.z<_173.z);
                        _171.w = (_172.w<_173.w);
                      ushort4 _174;
                        int4 _175 = make_int4(0, 0, 0, 0);
                        _174.x = (_138.x<=_175.x);
                        _174.y = (_138.y<=_175.y);
                        _174.z = (_138.z<=_175.z);
                        _174.w = (_138.w<=_175.w);
                      _170.x = (_171.x&&_174.x);
                      _170.y = (_171.y&&_174.y);
                      _170.z = (_171.z&&_174.z);
                      _170.w = (_171.w&&_174.w);
                    _163.x = (_164.x||_170.x);
                    _163.y = (_164.y||_170.y);
                    _163.z = (_164.z||_170.z);
                    _163.w = (_164.w||_170.w);
                  int4 _176;
                    int4 _177 = make_int4(16, 16, 16, 16);
                    _176.x = (_138.x+_177.x);
                    _176.y = (_138.y+_177.y);
                    _176.z = (_138.z+_177.z);
                    _176.w = (_138.w+_177.w);
                  _162.x = (bool(_163.x)?_138.x:_176.x);
                  _162.y = (bool(_163.y)?_138.y:_176.y);
                  _162.z = (bool(_163.z)?_138.z:_176.z);
                  _162.w = (bool(_163.w)?_138.w:_176.w);
                  int4 _178 = make_int4(9, 9, 9, 9);
                  _137.x = (_162.x*_178.x);
                  _137.y = (_162.y*_178.y);
                  _137.z = (_162.z*_178.z);
                  _137.w = (_162.w*_178.w);
                _135.x = (_136.x+_137.x);
                _135.y = (_136.y+_137.y);
                _135.z = (_136.z+_137.z);
                _135.w = (_136.w+_137.w);
              int4 _179 = make_int4((ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3));
              _134.x = (_135.x+_179.x);
              _134.y = (_135.y+_179.y);
              _134.z = (_135.z+_179.z);
              _134.w = (_135.w+_179.w);
            int4 _180;
              int4 _181 = make_int4(((((int)threadIdx.x) + 64))+(1*0), ((((int)threadIdx.x) + 64))+(1*1), ((((int)threadIdx.x) + 64))+(1*2), ((((int)threadIdx.x) + 64))+(1*3));
              int4 _182 = make_int4(3, 3, 3, 3);
              _180.x = (_181.x%_182.x);
              _180.y = (_181.y%_182.y);
              _180.z = (_181.z%_182.z);
              _180.w = (_181.w%_182.w);
            int4 _183;
            ushort4 _184;
              ushort4 _185;
                ushort4 _186;
                  int4 _187 = make_int4(3, 3, 3, 3);
                  int4 _188 = make_int4(0, 0, 0, 0);
                  _186.x = (_187.x>=_188.x);
                  _186.y = (_187.y>=_188.y);
                  _186.z = (_187.z>=_188.z);
                  _186.w = (_187.w>=_188.w);
                ushort4 _189;
                  int4 _190 = make_int4(0, 0, 0, 0);
                  _189.x = (_180.x>=_190.x);
                  _189.y = (_180.y>=_190.y);
                  _189.z = (_180.z>=_190.z);
                  _189.w = (_180.w>=_190.w);
                _185.x = (_186.x&&_189.x);
                _185.y = (_186.y&&_189.y);
                _185.z = (_186.z&&_189.z);
                _185.w = (_186.w&&_189.w);
              ushort4 _191;
                ushort4 _192;
                  int4 _193 = make_int4(3, 3, 3, 3);
                  int4 _194 = make_int4(0, 0, 0, 0);
                  _192.x = (_193.x<_194.x);
                  _192.y = (_193.y<_194.y);
                  _192.z = (_193.z<_194.z);
                  _192.w = (_193.w<_194.w);
                ushort4 _195;
                  int4 _196 = make_int4(0, 0, 0, 0);
                  _195.x = (_180.x<=_196.x);
                  _195.y = (_180.y<=_196.y);
                  _195.z = (_180.z<=_196.z);
                  _195.w = (_180.w<=_196.w);
                _191.x = (_192.x&&_195.x);
                _191.y = (_192.y&&_195.y);
                _191.z = (_192.z&&_195.z);
                _191.w = (_192.w&&_195.w);
              _184.x = (_185.x||_191.x);
              _184.y = (_185.y||_191.y);
              _184.z = (_185.z||_191.z);
              _184.w = (_185.w||_191.w);
            int4 _197;
              int4 _198 = make_int4(3, 3, 3, 3);
              _197.x = (_180.x+_198.x);
              _197.y = (_180.y+_198.y);
              _197.z = (_180.z+_198.z);
              _197.w = (_180.w+_198.w);
            _183.x = (bool(_184.x)?_180.x:_197.x);
            _183.y = (bool(_184.y)?_180.y:_197.y);
            _183.z = (bool(_184.z)?_180.z:_197.z);
            _183.w = (bool(_184.w)?_180.w:_197.w);
            _133.x = (_134.x+_183.x);
            _133.y = (_134.y+_183.y);
            _133.z = (_134.z+_183.z);
            _133.w = (_134.w+_183.w);
          *(float4*)(kernel_shared + ((((int)threadIdx.x) * 4) + 256)) = make_float4(kernel[_133.x],kernel[_133.y],kernel[_133.z],kernel[_133.w]);
          int4 _199;
            int4 _200;
              int4 _201;
                int4 _202 = make_int4((((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)) + 36864), (((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)) + 36864), (((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)) + 36864), (((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)) + 36864));
                int4 _203;
                  int4 _204;
                    int4 _205;
                      int4 _206 = make_int4((((((int)threadIdx.x) * 4) + 384))+(1*0), (((((int)threadIdx.x) * 4) + 384))+(1*1), (((((int)threadIdx.x) * 4) + 384))+(1*2), (((((int)threadIdx.x) * 4) + 384))+(1*3));
                      int4 _207 = make_int4(3, 3, 3, 3);
                      _205.x = (_206.x%_207.x);
                      _205.y = (_206.y%_207.y);
                      _205.z = (_206.z%_207.z);
                      _205.w = (_206.w%_207.w);
                    int4 _208;
                      int4 _209 = make_int4((((((int)threadIdx.x) * 4) + 384))+(1*0), (((((int)threadIdx.x) * 4) + 384))+(1*1), (((((int)threadIdx.x) * 4) + 384))+(1*2), (((((int)threadIdx.x) * 4) + 384))+(1*3));
                      int4 _210 = make_int4(3, 3, 3, 3);
                      _208.x = (_209.x/_210.x);
                      _208.y = (_209.y/_210.y);
                      _208.z = (_209.z/_210.z);
                      _208.w = (_209.w/_210.w);
                    int4 _211;
                    ushort4 _212;
                      ushort4 _213;
                        ushort4 _214;
                          int4 _215 = make_int4(3, 3, 3, 3);
                          int4 _216 = make_int4(0, 0, 0, 0);
                          _214.x = (_215.x>=_216.x);
                          _214.y = (_215.y>=_216.y);
                          _214.z = (_215.z>=_216.z);
                          _214.w = (_215.w>=_216.w);
                        ushort4 _217;
                          int4 _218 = make_int4(0, 0, 0, 0);
                          _217.x = (_205.x>=_218.x);
                          _217.y = (_205.y>=_218.y);
                          _217.z = (_205.z>=_218.z);
                          _217.w = (_205.w>=_218.w);
                        _213.x = (_214.x&&_217.x);
                        _213.y = (_214.y&&_217.y);
                        _213.z = (_214.z&&_217.z);
                        _213.w = (_214.w&&_217.w);
                      ushort4 _219;
                        ushort4 _220;
                          int4 _221 = make_int4(3, 3, 3, 3);
                          int4 _222 = make_int4(0, 0, 0, 0);
                          _220.x = (_221.x<_222.x);
                          _220.y = (_221.y<_222.y);
                          _220.z = (_221.z<_222.z);
                          _220.w = (_221.w<_222.w);
                        ushort4 _223;
                          int4 _224 = make_int4(0, 0, 0, 0);
                          _223.x = (_205.x<=_224.x);
                          _223.y = (_205.y<=_224.y);
                          _223.z = (_205.z<=_224.z);
                          _223.w = (_205.w<=_224.w);
                        _219.x = (_220.x&&_223.x);
                        _219.y = (_220.y&&_223.y);
                        _219.z = (_220.z&&_223.z);
                        _219.w = (_220.w&&_223.w);
                      _212.x = (_213.x||_219.x);
                      _212.y = (_213.y||_219.y);
                      _212.z = (_213.z||_219.z);
                      _212.w = (_213.w||_219.w);
                    int4 _225;
                      int4 _226 = make_int4(1, 1, 1, 1);
                      _225.x = (_208.x-_226.x);
                      _225.y = (_208.y-_226.y);
                      _225.z = (_208.z-_226.z);
                      _225.w = (_208.w-_226.w);
                    _211.x = (bool(_212.x)?_208.x:_225.x);
                    _211.y = (bool(_212.y)?_208.y:_225.y);
                    _211.z = (bool(_212.z)?_208.z:_225.z);
                    _211.w = (bool(_212.w)?_208.w:_225.w);
                    int4 _227 = make_int4(16, 16, 16, 16);
                    _204.x = (_211.x%_227.x);
                    _204.y = (_211.y%_227.y);
                    _204.z = (_211.z%_227.z);
                    _204.w = (_211.w%_227.w);
                  int4 _228;
                  ushort4 _229;
                    ushort4 _230;
                      ushort4 _231;
                        int4 _232 = make_int4(16, 16, 16, 16);
                        int4 _233 = make_int4(0, 0, 0, 0);
                        _231.x = (_232.x>=_233.x);
                        _231.y = (_232.y>=_233.y);
                        _231.z = (_232.z>=_233.z);
                        _231.w = (_232.w>=_233.w);
                      ushort4 _234;
                        int4 _235 = make_int4(0, 0, 0, 0);
                        _234.x = (_204.x>=_235.x);
                        _234.y = (_204.y>=_235.y);
                        _234.z = (_204.z>=_235.z);
                        _234.w = (_204.w>=_235.w);
                      _230.x = (_231.x&&_234.x);
                      _230.y = (_231.y&&_234.y);
                      _230.z = (_231.z&&_234.z);
                      _230.w = (_231.w&&_234.w);
                    ushort4 _236;
                      ushort4 _237;
                        int4 _238 = make_int4(16, 16, 16, 16);
                        int4 _239 = make_int4(0, 0, 0, 0);
                        _237.x = (_238.x<_239.x);
                        _237.y = (_238.y<_239.y);
                        _237.z = (_238.z<_239.z);
                        _237.w = (_238.w<_239.w);
                      ushort4 _240;
                        int4 _241 = make_int4(0, 0, 0, 0);
                        _240.x = (_204.x<=_241.x);
                        _240.y = (_204.y<=_241.y);
                        _240.z = (_204.z<=_241.z);
                        _240.w = (_204.w<=_241.w);
                      _236.x = (_237.x&&_240.x);
                      _236.y = (_237.y&&_240.y);
                      _236.z = (_237.z&&_240.z);
                      _236.w = (_237.w&&_240.w);
                    _229.x = (_230.x||_236.x);
                    _229.y = (_230.y||_236.y);
                    _229.z = (_230.z||_236.z);
                    _229.w = (_230.w||_236.w);
                  int4 _242;
                    int4 _243 = make_int4(16, 16, 16, 16);
                    _242.x = (_204.x+_243.x);
                    _242.y = (_204.y+_243.y);
                    _242.z = (_204.z+_243.z);
                    _242.w = (_204.w+_243.w);
                  _228.x = (bool(_229.x)?_204.x:_242.x);
                  _228.y = (bool(_229.y)?_204.y:_242.y);
                  _228.z = (bool(_229.z)?_204.z:_242.z);
                  _228.w = (bool(_229.w)?_204.w:_242.w);
                  int4 _244 = make_int4(9, 9, 9, 9);
                  _203.x = (_228.x*_244.x);
                  _203.y = (_228.y*_244.y);
                  _203.z = (_228.z*_244.z);
                  _203.w = (_228.w*_244.w);
                _201.x = (_202.x+_203.x);
                _201.y = (_202.y+_203.y);
                _201.z = (_202.z+_203.z);
                _201.w = (_202.w+_203.w);
              int4 _245 = make_int4((ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3));
              _200.x = (_201.x+_245.x);
              _200.y = (_201.y+_245.y);
              _200.z = (_201.z+_245.z);
              _200.w = (_201.w+_245.w);
            int4 _246;
              int4 _247 = make_int4(((((int)threadIdx.x) + 96))+(1*0), ((((int)threadIdx.x) + 96))+(1*1), ((((int)threadIdx.x) + 96))+(1*2), ((((int)threadIdx.x) + 96))+(1*3));
              int4 _248 = make_int4(3, 3, 3, 3);
              _246.x = (_247.x%_248.x);
              _246.y = (_247.y%_248.y);
              _246.z = (_247.z%_248.z);
              _246.w = (_247.w%_248.w);
            int4 _249;
            ushort4 _250;
              ushort4 _251;
                ushort4 _252;
                  int4 _253 = make_int4(3, 3, 3, 3);
                  int4 _254 = make_int4(0, 0, 0, 0);
                  _252.x = (_253.x>=_254.x);
                  _252.y = (_253.y>=_254.y);
                  _252.z = (_253.z>=_254.z);
                  _252.w = (_253.w>=_254.w);
                ushort4 _255;
                  int4 _256 = make_int4(0, 0, 0, 0);
                  _255.x = (_246.x>=_256.x);
                  _255.y = (_246.y>=_256.y);
                  _255.z = (_246.z>=_256.z);
                  _255.w = (_246.w>=_256.w);
                _251.x = (_252.x&&_255.x);
                _251.y = (_252.y&&_255.y);
                _251.z = (_252.z&&_255.z);
                _251.w = (_252.w&&_255.w);
              ushort4 _257;
                ushort4 _258;
                  int4 _259 = make_int4(3, 3, 3, 3);
                  int4 _260 = make_int4(0, 0, 0, 0);
                  _258.x = (_259.x<_260.x);
                  _258.y = (_259.y<_260.y);
                  _258.z = (_259.z<_260.z);
                  _258.w = (_259.w<_260.w);
                ushort4 _261;
                  int4 _262 = make_int4(0, 0, 0, 0);
                  _261.x = (_246.x<=_262.x);
                  _261.y = (_246.y<=_262.y);
                  _261.z = (_246.z<=_262.z);
                  _261.w = (_246.w<=_262.w);
                _257.x = (_258.x&&_261.x);
                _257.y = (_258.y&&_261.y);
                _257.z = (_258.z&&_261.z);
                _257.w = (_258.w&&_261.w);
              _250.x = (_251.x||_257.x);
              _250.y = (_251.y||_257.y);
              _250.z = (_251.z||_257.z);
              _250.w = (_251.w||_257.w);
            int4 _263;
              int4 _264 = make_int4(3, 3, 3, 3);
              _263.x = (_246.x+_264.x);
              _263.y = (_246.y+_264.y);
              _263.z = (_246.z+_264.z);
              _263.w = (_246.w+_264.w);
            _249.x = (bool(_250.x)?_246.x:_263.x);
            _249.y = (bool(_250.y)?_246.y:_263.y);
            _249.z = (bool(_250.z)?_246.z:_263.z);
            _249.w = (bool(_250.w)?_246.w:_263.w);
            _199.x = (_200.x+_249.x);
            _199.y = (_200.y+_249.y);
            _199.z = (_200.z+_249.z);
            _199.w = (_200.w+_249.w);
          *(float4*)(kernel_shared + ((((int)threadIdx.x) * 4) + 384)) = make_float4(kernel[_199.x],kernel[_199.y],kernel[_199.z],kernel[_199.w]);
          int4 _265;
            int4 _266;
              int4 _267;
                int4 _268 = make_int4(((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 512) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 512) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 512) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 512) / 48) * 4608)) + (rc_outer_outer * 144)));
                int4 _269;
                  int4 _270;
                    int4 _271;
                      int4 _272 = make_int4((((((int)threadIdx.x) * 4) + 512))+(1*0), (((((int)threadIdx.x) * 4) + 512))+(1*1), (((((int)threadIdx.x) * 4) + 512))+(1*2), (((((int)threadIdx.x) * 4) + 512))+(1*3));
                      int4 _273 = make_int4(3, 3, 3, 3);
                      _271.x = (_272.x%_273.x);
                      _271.y = (_272.y%_273.y);
                      _271.z = (_272.z%_273.z);
                      _271.w = (_272.w%_273.w);
                    int4 _274;
                      int4 _275 = make_int4((((((int)threadIdx.x) * 4) + 512))+(1*0), (((((int)threadIdx.x) * 4) + 512))+(1*1), (((((int)threadIdx.x) * 4) + 512))+(1*2), (((((int)threadIdx.x) * 4) + 512))+(1*3));
                      int4 _276 = make_int4(3, 3, 3, 3);
                      _274.x = (_275.x/_276.x);
                      _274.y = (_275.y/_276.y);
                      _274.z = (_275.z/_276.z);
                      _274.w = (_275.w/_276.w);
                    int4 _277;
                    ushort4 _278;
                      ushort4 _279;
                        ushort4 _280;
                          int4 _281 = make_int4(3, 3, 3, 3);
                          int4 _282 = make_int4(0, 0, 0, 0);
                          _280.x = (_281.x>=_282.x);
                          _280.y = (_281.y>=_282.y);
                          _280.z = (_281.z>=_282.z);
                          _280.w = (_281.w>=_282.w);
                        ushort4 _283;
                          int4 _284 = make_int4(0, 0, 0, 0);
                          _283.x = (_271.x>=_284.x);
                          _283.y = (_271.y>=_284.y);
                          _283.z = (_271.z>=_284.z);
                          _283.w = (_271.w>=_284.w);
                        _279.x = (_280.x&&_283.x);
                        _279.y = (_280.y&&_283.y);
                        _279.z = (_280.z&&_283.z);
                        _279.w = (_280.w&&_283.w);
                      ushort4 _285;
                        ushort4 _286;
                          int4 _287 = make_int4(3, 3, 3, 3);
                          int4 _288 = make_int4(0, 0, 0, 0);
                          _286.x = (_287.x<_288.x);
                          _286.y = (_287.y<_288.y);
                          _286.z = (_287.z<_288.z);
                          _286.w = (_287.w<_288.w);
                        ushort4 _289;
                          int4 _290 = make_int4(0, 0, 0, 0);
                          _289.x = (_271.x<=_290.x);
                          _289.y = (_271.y<=_290.y);
                          _289.z = (_271.z<=_290.z);
                          _289.w = (_271.w<=_290.w);
                        _285.x = (_286.x&&_289.x);
                        _285.y = (_286.y&&_289.y);
                        _285.z = (_286.z&&_289.z);
                        _285.w = (_286.w&&_289.w);
                      _278.x = (_279.x||_285.x);
                      _278.y = (_279.y||_285.y);
                      _278.z = (_279.z||_285.z);
                      _278.w = (_279.w||_285.w);
                    int4 _291;
                      int4 _292 = make_int4(1, 1, 1, 1);
                      _291.x = (_274.x-_292.x);
                      _291.y = (_274.y-_292.y);
                      _291.z = (_274.z-_292.z);
                      _291.w = (_274.w-_292.w);
                    _277.x = (bool(_278.x)?_274.x:_291.x);
                    _277.y = (bool(_278.y)?_274.y:_291.y);
                    _277.z = (bool(_278.z)?_274.z:_291.z);
                    _277.w = (bool(_278.w)?_274.w:_291.w);
                    int4 _293 = make_int4(16, 16, 16, 16);
                    _270.x = (_277.x%_293.x);
                    _270.y = (_277.y%_293.y);
                    _270.z = (_277.z%_293.z);
                    _270.w = (_277.w%_293.w);
                  int4 _294;
                  ushort4 _295;
                    ushort4 _296;
                      ushort4 _297;
                        int4 _298 = make_int4(16, 16, 16, 16);
                        int4 _299 = make_int4(0, 0, 0, 0);
                        _297.x = (_298.x>=_299.x);
                        _297.y = (_298.y>=_299.y);
                        _297.z = (_298.z>=_299.z);
                        _297.w = (_298.w>=_299.w);
                      ushort4 _300;
                        int4 _301 = make_int4(0, 0, 0, 0);
                        _300.x = (_270.x>=_301.x);
                        _300.y = (_270.y>=_301.y);
                        _300.z = (_270.z>=_301.z);
                        _300.w = (_270.w>=_301.w);
                      _296.x = (_297.x&&_300.x);
                      _296.y = (_297.y&&_300.y);
                      _296.z = (_297.z&&_300.z);
                      _296.w = (_297.w&&_300.w);
                    ushort4 _302;
                      ushort4 _303;
                        int4 _304 = make_int4(16, 16, 16, 16);
                        int4 _305 = make_int4(0, 0, 0, 0);
                        _303.x = (_304.x<_305.x);
                        _303.y = (_304.y<_305.y);
                        _303.z = (_304.z<_305.z);
                        _303.w = (_304.w<_305.w);
                      ushort4 _306;
                        int4 _307 = make_int4(0, 0, 0, 0);
                        _306.x = (_270.x<=_307.x);
                        _306.y = (_270.y<=_307.y);
                        _306.z = (_270.z<=_307.z);
                        _306.w = (_270.w<=_307.w);
                      _302.x = (_303.x&&_306.x);
                      _302.y = (_303.y&&_306.y);
                      _302.z = (_303.z&&_306.z);
                      _302.w = (_303.w&&_306.w);
                    _295.x = (_296.x||_302.x);
                    _295.y = (_296.y||_302.y);
                    _295.z = (_296.z||_302.z);
                    _295.w = (_296.w||_302.w);
                  int4 _308;
                    int4 _309 = make_int4(16, 16, 16, 16);
                    _308.x = (_270.x+_309.x);
                    _308.y = (_270.y+_309.y);
                    _308.z = (_270.z+_309.z);
                    _308.w = (_270.w+_309.w);
                  _294.x = (bool(_295.x)?_270.x:_308.x);
                  _294.y = (bool(_295.y)?_270.y:_308.y);
                  _294.z = (bool(_295.z)?_270.z:_308.z);
                  _294.w = (bool(_295.w)?_270.w:_308.w);
                  int4 _310 = make_int4(9, 9, 9, 9);
                  _269.x = (_294.x*_310.x);
                  _269.y = (_294.y*_310.y);
                  _269.z = (_294.z*_310.z);
                  _269.w = (_294.w*_310.w);
                _267.x = (_268.x+_269.x);
                _267.y = (_268.y+_269.y);
                _267.z = (_268.z+_269.z);
                _267.w = (_268.w+_269.w);
              int4 _311 = make_int4((ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3));
              _266.x = (_267.x+_311.x);
              _266.y = (_267.y+_311.y);
              _266.z = (_267.z+_311.z);
              _266.w = (_267.w+_311.w);
            int4 _312;
              int4 _313 = make_int4(((((int)threadIdx.x) + 128))+(1*0), ((((int)threadIdx.x) + 128))+(1*1), ((((int)threadIdx.x) + 128))+(1*2), ((((int)threadIdx.x) + 128))+(1*3));
              int4 _314 = make_int4(3, 3, 3, 3);
              _312.x = (_313.x%_314.x);
              _312.y = (_313.y%_314.y);
              _312.z = (_313.z%_314.z);
              _312.w = (_313.w%_314.w);
            int4 _315;
            ushort4 _316;
              ushort4 _317;
                ushort4 _318;
                  int4 _319 = make_int4(3, 3, 3, 3);
                  int4 _320 = make_int4(0, 0, 0, 0);
                  _318.x = (_319.x>=_320.x);
                  _318.y = (_319.y>=_320.y);
                  _318.z = (_319.z>=_320.z);
                  _318.w = (_319.w>=_320.w);
                ushort4 _321;
                  int4 _322 = make_int4(0, 0, 0, 0);
                  _321.x = (_312.x>=_322.x);
                  _321.y = (_312.y>=_322.y);
                  _321.z = (_312.z>=_322.z);
                  _321.w = (_312.w>=_322.w);
                _317.x = (_318.x&&_321.x);
                _317.y = (_318.y&&_321.y);
                _317.z = (_318.z&&_321.z);
                _317.w = (_318.w&&_321.w);
              ushort4 _323;
                ushort4 _324;
                  int4 _325 = make_int4(3, 3, 3, 3);
                  int4 _326 = make_int4(0, 0, 0, 0);
                  _324.x = (_325.x<_326.x);
                  _324.y = (_325.y<_326.y);
                  _324.z = (_325.z<_326.z);
                  _324.w = (_325.w<_326.w);
                ushort4 _327;
                  int4 _328 = make_int4(0, 0, 0, 0);
                  _327.x = (_312.x<=_328.x);
                  _327.y = (_312.y<=_328.y);
                  _327.z = (_312.z<=_328.z);
                  _327.w = (_312.w<=_328.w);
                _323.x = (_324.x&&_327.x);
                _323.y = (_324.y&&_327.y);
                _323.z = (_324.z&&_327.z);
                _323.w = (_324.w&&_327.w);
              _316.x = (_317.x||_323.x);
              _316.y = (_317.y||_323.y);
              _316.z = (_317.z||_323.z);
              _316.w = (_317.w||_323.w);
            int4 _329;
              int4 _330 = make_int4(3, 3, 3, 3);
              _329.x = (_312.x+_330.x);
              _329.y = (_312.y+_330.y);
              _329.z = (_312.z+_330.z);
              _329.w = (_312.w+_330.w);
            _315.x = (bool(_316.x)?_312.x:_329.x);
            _315.y = (bool(_316.y)?_312.y:_329.y);
            _315.z = (bool(_316.z)?_312.z:_329.z);
            _315.w = (bool(_316.w)?_312.w:_329.w);
            _265.x = (_266.x+_315.x);
            _265.y = (_266.y+_315.y);
            _265.z = (_266.z+_315.z);
            _265.w = (_266.w+_315.w);
          *(float4*)(kernel_shared + ((((int)threadIdx.x) * 4) + 512)) = make_float4(kernel[_265.x],kernel[_265.y],kernel[_265.z],kernel[_265.w]);
          int4 _331;
            int4 _332;
              int4 _333;
                int4 _334 = make_int4(((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 640) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 640) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 640) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 640) / 48) * 4608)) + (rc_outer_outer * 144)));
                int4 _335;
                  int4 _336;
                    int4 _337;
                      int4 _338 = make_int4((((((int)threadIdx.x) * 4) + 640))+(1*0), (((((int)threadIdx.x) * 4) + 640))+(1*1), (((((int)threadIdx.x) * 4) + 640))+(1*2), (((((int)threadIdx.x) * 4) + 640))+(1*3));
                      int4 _339 = make_int4(3, 3, 3, 3);
                      _337.x = (_338.x%_339.x);
                      _337.y = (_338.y%_339.y);
                      _337.z = (_338.z%_339.z);
                      _337.w = (_338.w%_339.w);
                    int4 _340;
                      int4 _341 = make_int4((((((int)threadIdx.x) * 4) + 640))+(1*0), (((((int)threadIdx.x) * 4) + 640))+(1*1), (((((int)threadIdx.x) * 4) + 640))+(1*2), (((((int)threadIdx.x) * 4) + 640))+(1*3));
                      int4 _342 = make_int4(3, 3, 3, 3);
                      _340.x = (_341.x/_342.x);
                      _340.y = (_341.y/_342.y);
                      _340.z = (_341.z/_342.z);
                      _340.w = (_341.w/_342.w);
                    int4 _343;
                    ushort4 _344;
                      ushort4 _345;
                        ushort4 _346;
                          int4 _347 = make_int4(3, 3, 3, 3);
                          int4 _348 = make_int4(0, 0, 0, 0);
                          _346.x = (_347.x>=_348.x);
                          _346.y = (_347.y>=_348.y);
                          _346.z = (_347.z>=_348.z);
                          _346.w = (_347.w>=_348.w);
                        ushort4 _349;
                          int4 _350 = make_int4(0, 0, 0, 0);
                          _349.x = (_337.x>=_350.x);
                          _349.y = (_337.y>=_350.y);
                          _349.z = (_337.z>=_350.z);
                          _349.w = (_337.w>=_350.w);
                        _345.x = (_346.x&&_349.x);
                        _345.y = (_346.y&&_349.y);
                        _345.z = (_346.z&&_349.z);
                        _345.w = (_346.w&&_349.w);
                      ushort4 _351;
                        ushort4 _352;
                          int4 _353 = make_int4(3, 3, 3, 3);
                          int4 _354 = make_int4(0, 0, 0, 0);
                          _352.x = (_353.x<_354.x);
                          _352.y = (_353.y<_354.y);
                          _352.z = (_353.z<_354.z);
                          _352.w = (_353.w<_354.w);
                        ushort4 _355;
                          int4 _356 = make_int4(0, 0, 0, 0);
                          _355.x = (_337.x<=_356.x);
                          _355.y = (_337.y<=_356.y);
                          _355.z = (_337.z<=_356.z);
                          _355.w = (_337.w<=_356.w);
                        _351.x = (_352.x&&_355.x);
                        _351.y = (_352.y&&_355.y);
                        _351.z = (_352.z&&_355.z);
                        _351.w = (_352.w&&_355.w);
                      _344.x = (_345.x||_351.x);
                      _344.y = (_345.y||_351.y);
                      _344.z = (_345.z||_351.z);
                      _344.w = (_345.w||_351.w);
                    int4 _357;
                      int4 _358 = make_int4(1, 1, 1, 1);
                      _357.x = (_340.x-_358.x);
                      _357.y = (_340.y-_358.y);
                      _357.z = (_340.z-_358.z);
                      _357.w = (_340.w-_358.w);
                    _343.x = (bool(_344.x)?_340.x:_357.x);
                    _343.y = (bool(_344.y)?_340.y:_357.y);
                    _343.z = (bool(_344.z)?_340.z:_357.z);
                    _343.w = (bool(_344.w)?_340.w:_357.w);
                    int4 _359 = make_int4(16, 16, 16, 16);
                    _336.x = (_343.x%_359.x);
                    _336.y = (_343.y%_359.y);
                    _336.z = (_343.z%_359.z);
                    _336.w = (_343.w%_359.w);
                  int4 _360;
                  ushort4 _361;
                    ushort4 _362;
                      ushort4 _363;
                        int4 _364 = make_int4(16, 16, 16, 16);
                        int4 _365 = make_int4(0, 0, 0, 0);
                        _363.x = (_364.x>=_365.x);
                        _363.y = (_364.y>=_365.y);
                        _363.z = (_364.z>=_365.z);
                        _363.w = (_364.w>=_365.w);
                      ushort4 _366;
                        int4 _367 = make_int4(0, 0, 0, 0);
                        _366.x = (_336.x>=_367.x);
                        _366.y = (_336.y>=_367.y);
                        _366.z = (_336.z>=_367.z);
                        _366.w = (_336.w>=_367.w);
                      _362.x = (_363.x&&_366.x);
                      _362.y = (_363.y&&_366.y);
                      _362.z = (_363.z&&_366.z);
                      _362.w = (_363.w&&_366.w);
                    ushort4 _368;
                      ushort4 _369;
                        int4 _370 = make_int4(16, 16, 16, 16);
                        int4 _371 = make_int4(0, 0, 0, 0);
                        _369.x = (_370.x<_371.x);
                        _369.y = (_370.y<_371.y);
                        _369.z = (_370.z<_371.z);
                        _369.w = (_370.w<_371.w);
                      ushort4 _372;
                        int4 _373 = make_int4(0, 0, 0, 0);
                        _372.x = (_336.x<=_373.x);
                        _372.y = (_336.y<=_373.y);
                        _372.z = (_336.z<=_373.z);
                        _372.w = (_336.w<=_373.w);
                      _368.x = (_369.x&&_372.x);
                      _368.y = (_369.y&&_372.y);
                      _368.z = (_369.z&&_372.z);
                      _368.w = (_369.w&&_372.w);
                    _361.x = (_362.x||_368.x);
                    _361.y = (_362.y||_368.y);
                    _361.z = (_362.z||_368.z);
                    _361.w = (_362.w||_368.w);
                  int4 _374;
                    int4 _375 = make_int4(16, 16, 16, 16);
                    _374.x = (_336.x+_375.x);
                    _374.y = (_336.y+_375.y);
                    _374.z = (_336.z+_375.z);
                    _374.w = (_336.w+_375.w);
                  _360.x = (bool(_361.x)?_336.x:_374.x);
                  _360.y = (bool(_361.y)?_336.y:_374.y);
                  _360.z = (bool(_361.z)?_336.z:_374.z);
                  _360.w = (bool(_361.w)?_336.w:_374.w);
                  int4 _376 = make_int4(9, 9, 9, 9);
                  _335.x = (_360.x*_376.x);
                  _335.y = (_360.y*_376.y);
                  _335.z = (_360.z*_376.z);
                  _335.w = (_360.w*_376.w);
                _333.x = (_334.x+_335.x);
                _333.y = (_334.y+_335.y);
                _333.z = (_334.z+_335.z);
                _333.w = (_334.w+_335.w);
              int4 _377 = make_int4((ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3));
              _332.x = (_333.x+_377.x);
              _332.y = (_333.y+_377.y);
              _332.z = (_333.z+_377.z);
              _332.w = (_333.w+_377.w);
            int4 _378;
              int4 _379 = make_int4(((((int)threadIdx.x) + 160))+(1*0), ((((int)threadIdx.x) + 160))+(1*1), ((((int)threadIdx.x) + 160))+(1*2), ((((int)threadIdx.x) + 160))+(1*3));
              int4 _380 = make_int4(3, 3, 3, 3);
              _378.x = (_379.x%_380.x);
              _378.y = (_379.y%_380.y);
              _378.z = (_379.z%_380.z);
              _378.w = (_379.w%_380.w);
            int4 _381;
            ushort4 _382;
              ushort4 _383;
                ushort4 _384;
                  int4 _385 = make_int4(3, 3, 3, 3);
                  int4 _386 = make_int4(0, 0, 0, 0);
                  _384.x = (_385.x>=_386.x);
                  _384.y = (_385.y>=_386.y);
                  _384.z = (_385.z>=_386.z);
                  _384.w = (_385.w>=_386.w);
                ushort4 _387;
                  int4 _388 = make_int4(0, 0, 0, 0);
                  _387.x = (_378.x>=_388.x);
                  _387.y = (_378.y>=_388.y);
                  _387.z = (_378.z>=_388.z);
                  _387.w = (_378.w>=_388.w);
                _383.x = (_384.x&&_387.x);
                _383.y = (_384.y&&_387.y);
                _383.z = (_384.z&&_387.z);
                _383.w = (_384.w&&_387.w);
              ushort4 _389;
                ushort4 _390;
                  int4 _391 = make_int4(3, 3, 3, 3);
                  int4 _392 = make_int4(0, 0, 0, 0);
                  _390.x = (_391.x<_392.x);
                  _390.y = (_391.y<_392.y);
                  _390.z = (_391.z<_392.z);
                  _390.w = (_391.w<_392.w);
                ushort4 _393;
                  int4 _394 = make_int4(0, 0, 0, 0);
                  _393.x = (_378.x<=_394.x);
                  _393.y = (_378.y<=_394.y);
                  _393.z = (_378.z<=_394.z);
                  _393.w = (_378.w<=_394.w);
                _389.x = (_390.x&&_393.x);
                _389.y = (_390.y&&_393.y);
                _389.z = (_390.z&&_393.z);
                _389.w = (_390.w&&_393.w);
              _382.x = (_383.x||_389.x);
              _382.y = (_383.y||_389.y);
              _382.z = (_383.z||_389.z);
              _382.w = (_383.w||_389.w);
            int4 _395;
              int4 _396 = make_int4(3, 3, 3, 3);
              _395.x = (_378.x+_396.x);
              _395.y = (_378.y+_396.y);
              _395.z = (_378.z+_396.z);
              _395.w = (_378.w+_396.w);
            _381.x = (bool(_382.x)?_378.x:_395.x);
            _381.y = (bool(_382.y)?_378.y:_395.y);
            _381.z = (bool(_382.z)?_378.z:_395.z);
            _381.w = (bool(_382.w)?_378.w:_395.w);
            _331.x = (_332.x+_381.x);
            _331.y = (_332.y+_381.y);
            _331.z = (_332.z+_381.z);
            _331.w = (_332.w+_381.w);
          *(float4*)(kernel_shared + ((((int)threadIdx.x) * 4) + 640)) = make_float4(kernel[_331.x],kernel[_331.y],kernel[_331.z],kernel[_331.w]);
          int4 _397;
            int4 _398;
              int4 _399;
                int4 _400 = make_int4((((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)) + 73728), (((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)) + 73728), (((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)) + 73728), (((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)) + 73728));
                int4 _401;
                  int4 _402;
                    int4 _403;
                      int4 _404 = make_int4((((((int)threadIdx.x) * 4) + 768))+(1*0), (((((int)threadIdx.x) * 4) + 768))+(1*1), (((((int)threadIdx.x) * 4) + 768))+(1*2), (((((int)threadIdx.x) * 4) + 768))+(1*3));
                      int4 _405 = make_int4(3, 3, 3, 3);
                      _403.x = (_404.x%_405.x);
                      _403.y = (_404.y%_405.y);
                      _403.z = (_404.z%_405.z);
                      _403.w = (_404.w%_405.w);
                    int4 _406;
                      int4 _407 = make_int4((((((int)threadIdx.x) * 4) + 768))+(1*0), (((((int)threadIdx.x) * 4) + 768))+(1*1), (((((int)threadIdx.x) * 4) + 768))+(1*2), (((((int)threadIdx.x) * 4) + 768))+(1*3));
                      int4 _408 = make_int4(3, 3, 3, 3);
                      _406.x = (_407.x/_408.x);
                      _406.y = (_407.y/_408.y);
                      _406.z = (_407.z/_408.z);
                      _406.w = (_407.w/_408.w);
                    int4 _409;
                    ushort4 _410;
                      ushort4 _411;
                        ushort4 _412;
                          int4 _413 = make_int4(3, 3, 3, 3);
                          int4 _414 = make_int4(0, 0, 0, 0);
                          _412.x = (_413.x>=_414.x);
                          _412.y = (_413.y>=_414.y);
                          _412.z = (_413.z>=_414.z);
                          _412.w = (_413.w>=_414.w);
                        ushort4 _415;
                          int4 _416 = make_int4(0, 0, 0, 0);
                          _415.x = (_403.x>=_416.x);
                          _415.y = (_403.y>=_416.y);
                          _415.z = (_403.z>=_416.z);
                          _415.w = (_403.w>=_416.w);
                        _411.x = (_412.x&&_415.x);
                        _411.y = (_412.y&&_415.y);
                        _411.z = (_412.z&&_415.z);
                        _411.w = (_412.w&&_415.w);
                      ushort4 _417;
                        ushort4 _418;
                          int4 _419 = make_int4(3, 3, 3, 3);
                          int4 _420 = make_int4(0, 0, 0, 0);
                          _418.x = (_419.x<_420.x);
                          _418.y = (_419.y<_420.y);
                          _418.z = (_419.z<_420.z);
                          _418.w = (_419.w<_420.w);
                        ushort4 _421;
                          int4 _422 = make_int4(0, 0, 0, 0);
                          _421.x = (_403.x<=_422.x);
                          _421.y = (_403.y<=_422.y);
                          _421.z = (_403.z<=_422.z);
                          _421.w = (_403.w<=_422.w);
                        _417.x = (_418.x&&_421.x);
                        _417.y = (_418.y&&_421.y);
                        _417.z = (_418.z&&_421.z);
                        _417.w = (_418.w&&_421.w);
                      _410.x = (_411.x||_417.x);
                      _410.y = (_411.y||_417.y);
                      _410.z = (_411.z||_417.z);
                      _410.w = (_411.w||_417.w);
                    int4 _423;
                      int4 _424 = make_int4(1, 1, 1, 1);
                      _423.x = (_406.x-_424.x);
                      _423.y = (_406.y-_424.y);
                      _423.z = (_406.z-_424.z);
                      _423.w = (_406.w-_424.w);
                    _409.x = (bool(_410.x)?_406.x:_423.x);
                    _409.y = (bool(_410.y)?_406.y:_423.y);
                    _409.z = (bool(_410.z)?_406.z:_423.z);
                    _409.w = (bool(_410.w)?_406.w:_423.w);
                    int4 _425 = make_int4(16, 16, 16, 16);
                    _402.x = (_409.x%_425.x);
                    _402.y = (_409.y%_425.y);
                    _402.z = (_409.z%_425.z);
                    _402.w = (_409.w%_425.w);
                  int4 _426;
                  ushort4 _427;
                    ushort4 _428;
                      ushort4 _429;
                        int4 _430 = make_int4(16, 16, 16, 16);
                        int4 _431 = make_int4(0, 0, 0, 0);
                        _429.x = (_430.x>=_431.x);
                        _429.y = (_430.y>=_431.y);
                        _429.z = (_430.z>=_431.z);
                        _429.w = (_430.w>=_431.w);
                      ushort4 _432;
                        int4 _433 = make_int4(0, 0, 0, 0);
                        _432.x = (_402.x>=_433.x);
                        _432.y = (_402.y>=_433.y);
                        _432.z = (_402.z>=_433.z);
                        _432.w = (_402.w>=_433.w);
                      _428.x = (_429.x&&_432.x);
                      _428.y = (_429.y&&_432.y);
                      _428.z = (_429.z&&_432.z);
                      _428.w = (_429.w&&_432.w);
                    ushort4 _434;
                      ushort4 _435;
                        int4 _436 = make_int4(16, 16, 16, 16);
                        int4 _437 = make_int4(0, 0, 0, 0);
                        _435.x = (_436.x<_437.x);
                        _435.y = (_436.y<_437.y);
                        _435.z = (_436.z<_437.z);
                        _435.w = (_436.w<_437.w);
                      ushort4 _438;
                        int4 _439 = make_int4(0, 0, 0, 0);
                        _438.x = (_402.x<=_439.x);
                        _438.y = (_402.y<=_439.y);
                        _438.z = (_402.z<=_439.z);
                        _438.w = (_402.w<=_439.w);
                      _434.x = (_435.x&&_438.x);
                      _434.y = (_435.y&&_438.y);
                      _434.z = (_435.z&&_438.z);
                      _434.w = (_435.w&&_438.w);
                    _427.x = (_428.x||_434.x);
                    _427.y = (_428.y||_434.y);
                    _427.z = (_428.z||_434.z);
                    _427.w = (_428.w||_434.w);
                  int4 _440;
                    int4 _441 = make_int4(16, 16, 16, 16);
                    _440.x = (_402.x+_441.x);
                    _440.y = (_402.y+_441.y);
                    _440.z = (_402.z+_441.z);
                    _440.w = (_402.w+_441.w);
                  _426.x = (bool(_427.x)?_402.x:_440.x);
                  _426.y = (bool(_427.y)?_402.y:_440.y);
                  _426.z = (bool(_427.z)?_402.z:_440.z);
                  _426.w = (bool(_427.w)?_402.w:_440.w);
                  int4 _442 = make_int4(9, 9, 9, 9);
                  _401.x = (_426.x*_442.x);
                  _401.y = (_426.y*_442.y);
                  _401.z = (_426.z*_442.z);
                  _401.w = (_426.w*_442.w);
                _399.x = (_400.x+_401.x);
                _399.y = (_400.y+_401.y);
                _399.z = (_400.z+_401.z);
                _399.w = (_400.w+_401.w);
              int4 _443 = make_int4((ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3));
              _398.x = (_399.x+_443.x);
              _398.y = (_399.y+_443.y);
              _398.z = (_399.z+_443.z);
              _398.w = (_399.w+_443.w);
            int4 _444;
              int4 _445 = make_int4(((((int)threadIdx.x) + 192))+(1*0), ((((int)threadIdx.x) + 192))+(1*1), ((((int)threadIdx.x) + 192))+(1*2), ((((int)threadIdx.x) + 192))+(1*3));
              int4 _446 = make_int4(3, 3, 3, 3);
              _444.x = (_445.x%_446.x);
              _444.y = (_445.y%_446.y);
              _444.z = (_445.z%_446.z);
              _444.w = (_445.w%_446.w);
            int4 _447;
            ushort4 _448;
              ushort4 _449;
                ushort4 _450;
                  int4 _451 = make_int4(3, 3, 3, 3);
                  int4 _452 = make_int4(0, 0, 0, 0);
                  _450.x = (_451.x>=_452.x);
                  _450.y = (_451.y>=_452.y);
                  _450.z = (_451.z>=_452.z);
                  _450.w = (_451.w>=_452.w);
                ushort4 _453;
                  int4 _454 = make_int4(0, 0, 0, 0);
                  _453.x = (_444.x>=_454.x);
                  _453.y = (_444.y>=_454.y);
                  _453.z = (_444.z>=_454.z);
                  _453.w = (_444.w>=_454.w);
                _449.x = (_450.x&&_453.x);
                _449.y = (_450.y&&_453.y);
                _449.z = (_450.z&&_453.z);
                _449.w = (_450.w&&_453.w);
              ushort4 _455;
                ushort4 _456;
                  int4 _457 = make_int4(3, 3, 3, 3);
                  int4 _458 = make_int4(0, 0, 0, 0);
                  _456.x = (_457.x<_458.x);
                  _456.y = (_457.y<_458.y);
                  _456.z = (_457.z<_458.z);
                  _456.w = (_457.w<_458.w);
                ushort4 _459;
                  int4 _460 = make_int4(0, 0, 0, 0);
                  _459.x = (_444.x<=_460.x);
                  _459.y = (_444.y<=_460.y);
                  _459.z = (_444.z<=_460.z);
                  _459.w = (_444.w<=_460.w);
                _455.x = (_456.x&&_459.x);
                _455.y = (_456.y&&_459.y);
                _455.z = (_456.z&&_459.z);
                _455.w = (_456.w&&_459.w);
              _448.x = (_449.x||_455.x);
              _448.y = (_449.y||_455.y);
              _448.z = (_449.z||_455.z);
              _448.w = (_449.w||_455.w);
            int4 _461;
              int4 _462 = make_int4(3, 3, 3, 3);
              _461.x = (_444.x+_462.x);
              _461.y = (_444.y+_462.y);
              _461.z = (_444.z+_462.z);
              _461.w = (_444.w+_462.w);
            _447.x = (bool(_448.x)?_444.x:_461.x);
            _447.y = (bool(_448.y)?_444.y:_461.y);
            _447.z = (bool(_448.z)?_444.z:_461.z);
            _447.w = (bool(_448.w)?_444.w:_461.w);
            _397.x = (_398.x+_447.x);
            _397.y = (_398.y+_447.y);
            _397.z = (_398.z+_447.z);
            _397.w = (_398.w+_447.w);
          *(float4*)(kernel_shared + ((((int)threadIdx.x) * 4) + 768)) = make_float4(kernel[_397.x],kernel[_397.y],kernel[_397.z],kernel[_397.w]);
          int4 _463;
            int4 _464;
              int4 _465;
                int4 _466 = make_int4(((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 896) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 896) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 896) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 896) / 48) * 4608)) + (rc_outer_outer * 144)));
                int4 _467;
                  int4 _468;
                    int4 _469;
                      int4 _470 = make_int4((((((int)threadIdx.x) * 4) + 896))+(1*0), (((((int)threadIdx.x) * 4) + 896))+(1*1), (((((int)threadIdx.x) * 4) + 896))+(1*2), (((((int)threadIdx.x) * 4) + 896))+(1*3));
                      int4 _471 = make_int4(3, 3, 3, 3);
                      _469.x = (_470.x%_471.x);
                      _469.y = (_470.y%_471.y);
                      _469.z = (_470.z%_471.z);
                      _469.w = (_470.w%_471.w);
                    int4 _472;
                      int4 _473 = make_int4((((((int)threadIdx.x) * 4) + 896))+(1*0), (((((int)threadIdx.x) * 4) + 896))+(1*1), (((((int)threadIdx.x) * 4) + 896))+(1*2), (((((int)threadIdx.x) * 4) + 896))+(1*3));
                      int4 _474 = make_int4(3, 3, 3, 3);
                      _472.x = (_473.x/_474.x);
                      _472.y = (_473.y/_474.y);
                      _472.z = (_473.z/_474.z);
                      _472.w = (_473.w/_474.w);
                    int4 _475;
                    ushort4 _476;
                      ushort4 _477;
                        ushort4 _478;
                          int4 _479 = make_int4(3, 3, 3, 3);
                          int4 _480 = make_int4(0, 0, 0, 0);
                          _478.x = (_479.x>=_480.x);
                          _478.y = (_479.y>=_480.y);
                          _478.z = (_479.z>=_480.z);
                          _478.w = (_479.w>=_480.w);
                        ushort4 _481;
                          int4 _482 = make_int4(0, 0, 0, 0);
                          _481.x = (_469.x>=_482.x);
                          _481.y = (_469.y>=_482.y);
                          _481.z = (_469.z>=_482.z);
                          _481.w = (_469.w>=_482.w);
                        _477.x = (_478.x&&_481.x);
                        _477.y = (_478.y&&_481.y);
                        _477.z = (_478.z&&_481.z);
                        _477.w = (_478.w&&_481.w);
                      ushort4 _483;
                        ushort4 _484;
                          int4 _485 = make_int4(3, 3, 3, 3);
                          int4 _486 = make_int4(0, 0, 0, 0);
                          _484.x = (_485.x<_486.x);
                          _484.y = (_485.y<_486.y);
                          _484.z = (_485.z<_486.z);
                          _484.w = (_485.w<_486.w);
                        ushort4 _487;
                          int4 _488 = make_int4(0, 0, 0, 0);
                          _487.x = (_469.x<=_488.x);
                          _487.y = (_469.y<=_488.y);
                          _487.z = (_469.z<=_488.z);
                          _487.w = (_469.w<=_488.w);
                        _483.x = (_484.x&&_487.x);
                        _483.y = (_484.y&&_487.y);
                        _483.z = (_484.z&&_487.z);
                        _483.w = (_484.w&&_487.w);
                      _476.x = (_477.x||_483.x);
                      _476.y = (_477.y||_483.y);
                      _476.z = (_477.z||_483.z);
                      _476.w = (_477.w||_483.w);
                    int4 _489;
                      int4 _490 = make_int4(1, 1, 1, 1);
                      _489.x = (_472.x-_490.x);
                      _489.y = (_472.y-_490.y);
                      _489.z = (_472.z-_490.z);
                      _489.w = (_472.w-_490.w);
                    _475.x = (bool(_476.x)?_472.x:_489.x);
                    _475.y = (bool(_476.y)?_472.y:_489.y);
                    _475.z = (bool(_476.z)?_472.z:_489.z);
                    _475.w = (bool(_476.w)?_472.w:_489.w);
                    int4 _491 = make_int4(16, 16, 16, 16);
                    _468.x = (_475.x%_491.x);
                    _468.y = (_475.y%_491.y);
                    _468.z = (_475.z%_491.z);
                    _468.w = (_475.w%_491.w);
                  int4 _492;
                  ushort4 _493;
                    ushort4 _494;
                      ushort4 _495;
                        int4 _496 = make_int4(16, 16, 16, 16);
                        int4 _497 = make_int4(0, 0, 0, 0);
                        _495.x = (_496.x>=_497.x);
                        _495.y = (_496.y>=_497.y);
                        _495.z = (_496.z>=_497.z);
                        _495.w = (_496.w>=_497.w);
                      ushort4 _498;
                        int4 _499 = make_int4(0, 0, 0, 0);
                        _498.x = (_468.x>=_499.x);
                        _498.y = (_468.y>=_499.y);
                        _498.z = (_468.z>=_499.z);
                        _498.w = (_468.w>=_499.w);
                      _494.x = (_495.x&&_498.x);
                      _494.y = (_495.y&&_498.y);
                      _494.z = (_495.z&&_498.z);
                      _494.w = (_495.w&&_498.w);
                    ushort4 _500;
                      ushort4 _501;
                        int4 _502 = make_int4(16, 16, 16, 16);
                        int4 _503 = make_int4(0, 0, 0, 0);
                        _501.x = (_502.x<_503.x);
                        _501.y = (_502.y<_503.y);
                        _501.z = (_502.z<_503.z);
                        _501.w = (_502.w<_503.w);
                      ushort4 _504;
                        int4 _505 = make_int4(0, 0, 0, 0);
                        _504.x = (_468.x<=_505.x);
                        _504.y = (_468.y<=_505.y);
                        _504.z = (_468.z<=_505.z);
                        _504.w = (_468.w<=_505.w);
                      _500.x = (_501.x&&_504.x);
                      _500.y = (_501.y&&_504.y);
                      _500.z = (_501.z&&_504.z);
                      _500.w = (_501.w&&_504.w);
                    _493.x = (_494.x||_500.x);
                    _493.y = (_494.y||_500.y);
                    _493.z = (_494.z||_500.z);
                    _493.w = (_494.w||_500.w);
                  int4 _506;
                    int4 _507 = make_int4(16, 16, 16, 16);
                    _506.x = (_468.x+_507.x);
                    _506.y = (_468.y+_507.y);
                    _506.z = (_468.z+_507.z);
                    _506.w = (_468.w+_507.w);
                  _492.x = (bool(_493.x)?_468.x:_506.x);
                  _492.y = (bool(_493.y)?_468.y:_506.y);
                  _492.z = (bool(_493.z)?_468.z:_506.z);
                  _492.w = (bool(_493.w)?_468.w:_506.w);
                  int4 _508 = make_int4(9, 9, 9, 9);
                  _467.x = (_492.x*_508.x);
                  _467.y = (_492.y*_508.y);
                  _467.z = (_492.z*_508.z);
                  _467.w = (_492.w*_508.w);
                _465.x = (_466.x+_467.x);
                _465.y = (_466.y+_467.y);
                _465.z = (_466.z+_467.z);
                _465.w = (_466.w+_467.w);
              int4 _509 = make_int4((ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3));
              _464.x = (_465.x+_509.x);
              _464.y = (_465.y+_509.y);
              _464.z = (_465.z+_509.z);
              _464.w = (_465.w+_509.w);
            int4 _510;
              int4 _511 = make_int4(((((int)threadIdx.x) + 224))+(1*0), ((((int)threadIdx.x) + 224))+(1*1), ((((int)threadIdx.x) + 224))+(1*2), ((((int)threadIdx.x) + 224))+(1*3));
              int4 _512 = make_int4(3, 3, 3, 3);
              _510.x = (_511.x%_512.x);
              _510.y = (_511.y%_512.y);
              _510.z = (_511.z%_512.z);
              _510.w = (_511.w%_512.w);
            int4 _513;
            ushort4 _514;
              ushort4 _515;
                ushort4 _516;
                  int4 _517 = make_int4(3, 3, 3, 3);
                  int4 _518 = make_int4(0, 0, 0, 0);
                  _516.x = (_517.x>=_518.x);
                  _516.y = (_517.y>=_518.y);
                  _516.z = (_517.z>=_518.z);
                  _516.w = (_517.w>=_518.w);
                ushort4 _519;
                  int4 _520 = make_int4(0, 0, 0, 0);
                  _519.x = (_510.x>=_520.x);
                  _519.y = (_510.y>=_520.y);
                  _519.z = (_510.z>=_520.z);
                  _519.w = (_510.w>=_520.w);
                _515.x = (_516.x&&_519.x);
                _515.y = (_516.y&&_519.y);
                _515.z = (_516.z&&_519.z);
                _515.w = (_516.w&&_519.w);
              ushort4 _521;
                ushort4 _522;
                  int4 _523 = make_int4(3, 3, 3, 3);
                  int4 _524 = make_int4(0, 0, 0, 0);
                  _522.x = (_523.x<_524.x);
                  _522.y = (_523.y<_524.y);
                  _522.z = (_523.z<_524.z);
                  _522.w = (_523.w<_524.w);
                ushort4 _525;
                  int4 _526 = make_int4(0, 0, 0, 0);
                  _525.x = (_510.x<=_526.x);
                  _525.y = (_510.y<=_526.y);
                  _525.z = (_510.z<=_526.z);
                  _525.w = (_510.w<=_526.w);
                _521.x = (_522.x&&_525.x);
                _521.y = (_522.y&&_525.y);
                _521.z = (_522.z&&_525.z);
                _521.w = (_522.w&&_525.w);
              _514.x = (_515.x||_521.x);
              _514.y = (_515.y||_521.y);
              _514.z = (_515.z||_521.z);
              _514.w = (_515.w||_521.w);
            int4 _527;
              int4 _528 = make_int4(3, 3, 3, 3);
              _527.x = (_510.x+_528.x);
              _527.y = (_510.y+_528.y);
              _527.z = (_510.z+_528.z);
              _527.w = (_510.w+_528.w);
            _513.x = (bool(_514.x)?_510.x:_527.x);
            _513.y = (bool(_514.y)?_510.y:_527.y);
            _513.z = (bool(_514.z)?_510.z:_527.z);
            _513.w = (bool(_514.w)?_510.w:_527.w);
            _463.x = (_464.x+_513.x);
            _463.y = (_464.y+_513.y);
            _463.z = (_464.z+_513.z);
            _463.w = (_464.w+_513.w);
          *(float4*)(kernel_shared + ((((int)threadIdx.x) * 4) + 896)) = make_float4(kernel[_463.x],kernel[_463.y],kernel[_463.z],kernel[_463.w]);
          int4 _529;
            int4 _530;
              int4 _531;
                int4 _532 = make_int4(((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 1024) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 1024) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 1024) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 1024) / 48) * 4608)) + (rc_outer_outer * 144)));
                int4 _533;
                  int4 _534;
                    int4 _535;
                      int4 _536 = make_int4((((((int)threadIdx.x) * 4) + 1024))+(1*0), (((((int)threadIdx.x) * 4) + 1024))+(1*1), (((((int)threadIdx.x) * 4) + 1024))+(1*2), (((((int)threadIdx.x) * 4) + 1024))+(1*3));
                      int4 _537 = make_int4(3, 3, 3, 3);
                      _535.x = (_536.x%_537.x);
                      _535.y = (_536.y%_537.y);
                      _535.z = (_536.z%_537.z);
                      _535.w = (_536.w%_537.w);
                    int4 _538;
                      int4 _539 = make_int4((((((int)threadIdx.x) * 4) + 1024))+(1*0), (((((int)threadIdx.x) * 4) + 1024))+(1*1), (((((int)threadIdx.x) * 4) + 1024))+(1*2), (((((int)threadIdx.x) * 4) + 1024))+(1*3));
                      int4 _540 = make_int4(3, 3, 3, 3);
                      _538.x = (_539.x/_540.x);
                      _538.y = (_539.y/_540.y);
                      _538.z = (_539.z/_540.z);
                      _538.w = (_539.w/_540.w);
                    int4 _541;
                    ushort4 _542;
                      ushort4 _543;
                        ushort4 _544;
                          int4 _545 = make_int4(3, 3, 3, 3);
                          int4 _546 = make_int4(0, 0, 0, 0);
                          _544.x = (_545.x>=_546.x);
                          _544.y = (_545.y>=_546.y);
                          _544.z = (_545.z>=_546.z);
                          _544.w = (_545.w>=_546.w);
                        ushort4 _547;
                          int4 _548 = make_int4(0, 0, 0, 0);
                          _547.x = (_535.x>=_548.x);
                          _547.y = (_535.y>=_548.y);
                          _547.z = (_535.z>=_548.z);
                          _547.w = (_535.w>=_548.w);
                        _543.x = (_544.x&&_547.x);
                        _543.y = (_544.y&&_547.y);
                        _543.z = (_544.z&&_547.z);
                        _543.w = (_544.w&&_547.w);
                      ushort4 _549;
                        ushort4 _550;
                          int4 _551 = make_int4(3, 3, 3, 3);
                          int4 _552 = make_int4(0, 0, 0, 0);
                          _550.x = (_551.x<_552.x);
                          _550.y = (_551.y<_552.y);
                          _550.z = (_551.z<_552.z);
                          _550.w = (_551.w<_552.w);
                        ushort4 _553;
                          int4 _554 = make_int4(0, 0, 0, 0);
                          _553.x = (_535.x<=_554.x);
                          _553.y = (_535.y<=_554.y);
                          _553.z = (_535.z<=_554.z);
                          _553.w = (_535.w<=_554.w);
                        _549.x = (_550.x&&_553.x);
                        _549.y = (_550.y&&_553.y);
                        _549.z = (_550.z&&_553.z);
                        _549.w = (_550.w&&_553.w);
                      _542.x = (_543.x||_549.x);
                      _542.y = (_543.y||_549.y);
                      _542.z = (_543.z||_549.z);
                      _542.w = (_543.w||_549.w);
                    int4 _555;
                      int4 _556 = make_int4(1, 1, 1, 1);
                      _555.x = (_538.x-_556.x);
                      _555.y = (_538.y-_556.y);
                      _555.z = (_538.z-_556.z);
                      _555.w = (_538.w-_556.w);
                    _541.x = (bool(_542.x)?_538.x:_555.x);
                    _541.y = (bool(_542.y)?_538.y:_555.y);
                    _541.z = (bool(_542.z)?_538.z:_555.z);
                    _541.w = (bool(_542.w)?_538.w:_555.w);
                    int4 _557 = make_int4(16, 16, 16, 16);
                    _534.x = (_541.x%_557.x);
                    _534.y = (_541.y%_557.y);
                    _534.z = (_541.z%_557.z);
                    _534.w = (_541.w%_557.w);
                  int4 _558;
                  ushort4 _559;
                    ushort4 _560;
                      ushort4 _561;
                        int4 _562 = make_int4(16, 16, 16, 16);
                        int4 _563 = make_int4(0, 0, 0, 0);
                        _561.x = (_562.x>=_563.x);
                        _561.y = (_562.y>=_563.y);
                        _561.z = (_562.z>=_563.z);
                        _561.w = (_562.w>=_563.w);
                      ushort4 _564;
                        int4 _565 = make_int4(0, 0, 0, 0);
                        _564.x = (_534.x>=_565.x);
                        _564.y = (_534.y>=_565.y);
                        _564.z = (_534.z>=_565.z);
                        _564.w = (_534.w>=_565.w);
                      _560.x = (_561.x&&_564.x);
                      _560.y = (_561.y&&_564.y);
                      _560.z = (_561.z&&_564.z);
                      _560.w = (_561.w&&_564.w);
                    ushort4 _566;
                      ushort4 _567;
                        int4 _568 = make_int4(16, 16, 16, 16);
                        int4 _569 = make_int4(0, 0, 0, 0);
                        _567.x = (_568.x<_569.x);
                        _567.y = (_568.y<_569.y);
                        _567.z = (_568.z<_569.z);
                        _567.w = (_568.w<_569.w);
                      ushort4 _570;
                        int4 _571 = make_int4(0, 0, 0, 0);
                        _570.x = (_534.x<=_571.x);
                        _570.y = (_534.y<=_571.y);
                        _570.z = (_534.z<=_571.z);
                        _570.w = (_534.w<=_571.w);
                      _566.x = (_567.x&&_570.x);
                      _566.y = (_567.y&&_570.y);
                      _566.z = (_567.z&&_570.z);
                      _566.w = (_567.w&&_570.w);
                    _559.x = (_560.x||_566.x);
                    _559.y = (_560.y||_566.y);
                    _559.z = (_560.z||_566.z);
                    _559.w = (_560.w||_566.w);
                  int4 _572;
                    int4 _573 = make_int4(16, 16, 16, 16);
                    _572.x = (_534.x+_573.x);
                    _572.y = (_534.y+_573.y);
                    _572.z = (_534.z+_573.z);
                    _572.w = (_534.w+_573.w);
                  _558.x = (bool(_559.x)?_534.x:_572.x);
                  _558.y = (bool(_559.y)?_534.y:_572.y);
                  _558.z = (bool(_559.z)?_534.z:_572.z);
                  _558.w = (bool(_559.w)?_534.w:_572.w);
                  int4 _574 = make_int4(9, 9, 9, 9);
                  _533.x = (_558.x*_574.x);
                  _533.y = (_558.y*_574.y);
                  _533.z = (_558.z*_574.z);
                  _533.w = (_558.w*_574.w);
                _531.x = (_532.x+_533.x);
                _531.y = (_532.y+_533.y);
                _531.z = (_532.z+_533.z);
                _531.w = (_532.w+_533.w);
              int4 _575 = make_int4((ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3));
              _530.x = (_531.x+_575.x);
              _530.y = (_531.y+_575.y);
              _530.z = (_531.z+_575.z);
              _530.w = (_531.w+_575.w);
            int4 _576;
              int4 _577 = make_int4(((((int)threadIdx.x) + 256))+(1*0), ((((int)threadIdx.x) + 256))+(1*1), ((((int)threadIdx.x) + 256))+(1*2), ((((int)threadIdx.x) + 256))+(1*3));
              int4 _578 = make_int4(3, 3, 3, 3);
              _576.x = (_577.x%_578.x);
              _576.y = (_577.y%_578.y);
              _576.z = (_577.z%_578.z);
              _576.w = (_577.w%_578.w);
            int4 _579;
            ushort4 _580;
              ushort4 _581;
                ushort4 _582;
                  int4 _583 = make_int4(3, 3, 3, 3);
                  int4 _584 = make_int4(0, 0, 0, 0);
                  _582.x = (_583.x>=_584.x);
                  _582.y = (_583.y>=_584.y);
                  _582.z = (_583.z>=_584.z);
                  _582.w = (_583.w>=_584.w);
                ushort4 _585;
                  int4 _586 = make_int4(0, 0, 0, 0);
                  _585.x = (_576.x>=_586.x);
                  _585.y = (_576.y>=_586.y);
                  _585.z = (_576.z>=_586.z);
                  _585.w = (_576.w>=_586.w);
                _581.x = (_582.x&&_585.x);
                _581.y = (_582.y&&_585.y);
                _581.z = (_582.z&&_585.z);
                _581.w = (_582.w&&_585.w);
              ushort4 _587;
                ushort4 _588;
                  int4 _589 = make_int4(3, 3, 3, 3);
                  int4 _590 = make_int4(0, 0, 0, 0);
                  _588.x = (_589.x<_590.x);
                  _588.y = (_589.y<_590.y);
                  _588.z = (_589.z<_590.z);
                  _588.w = (_589.w<_590.w);
                ushort4 _591;
                  int4 _592 = make_int4(0, 0, 0, 0);
                  _591.x = (_576.x<=_592.x);
                  _591.y = (_576.y<=_592.y);
                  _591.z = (_576.z<=_592.z);
                  _591.w = (_576.w<=_592.w);
                _587.x = (_588.x&&_591.x);
                _587.y = (_588.y&&_591.y);
                _587.z = (_588.z&&_591.z);
                _587.w = (_588.w&&_591.w);
              _580.x = (_581.x||_587.x);
              _580.y = (_581.y||_587.y);
              _580.z = (_581.z||_587.z);
              _580.w = (_581.w||_587.w);
            int4 _593;
              int4 _594 = make_int4(3, 3, 3, 3);
              _593.x = (_576.x+_594.x);
              _593.y = (_576.y+_594.y);
              _593.z = (_576.z+_594.z);
              _593.w = (_576.w+_594.w);
            _579.x = (bool(_580.x)?_576.x:_593.x);
            _579.y = (bool(_580.y)?_576.y:_593.y);
            _579.z = (bool(_580.z)?_576.z:_593.z);
            _579.w = (bool(_580.w)?_576.w:_593.w);
            _529.x = (_530.x+_579.x);
            _529.y = (_530.y+_579.y);
            _529.z = (_530.z+_579.z);
            _529.w = (_530.w+_579.w);
          *(float4*)(kernel_shared + ((((int)threadIdx.x) * 4) + 1024)) = make_float4(kernel[_529.x],kernel[_529.y],kernel[_529.z],kernel[_529.w]);
          int4 _595;
            int4 _596;
              int4 _597;
                int4 _598 = make_int4((((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)) + 110592), (((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)) + 110592), (((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)) + 110592), (((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 144)) + 110592));
                int4 _599;
                  int4 _600;
                    int4 _601;
                      int4 _602 = make_int4((((((int)threadIdx.x) * 4) + 1152))+(1*0), (((((int)threadIdx.x) * 4) + 1152))+(1*1), (((((int)threadIdx.x) * 4) + 1152))+(1*2), (((((int)threadIdx.x) * 4) + 1152))+(1*3));
                      int4 _603 = make_int4(3, 3, 3, 3);
                      _601.x = (_602.x%_603.x);
                      _601.y = (_602.y%_603.y);
                      _601.z = (_602.z%_603.z);
                      _601.w = (_602.w%_603.w);
                    int4 _604;
                      int4 _605 = make_int4((((((int)threadIdx.x) * 4) + 1152))+(1*0), (((((int)threadIdx.x) * 4) + 1152))+(1*1), (((((int)threadIdx.x) * 4) + 1152))+(1*2), (((((int)threadIdx.x) * 4) + 1152))+(1*3));
                      int4 _606 = make_int4(3, 3, 3, 3);
                      _604.x = (_605.x/_606.x);
                      _604.y = (_605.y/_606.y);
                      _604.z = (_605.z/_606.z);
                      _604.w = (_605.w/_606.w);
                    int4 _607;
                    ushort4 _608;
                      ushort4 _609;
                        ushort4 _610;
                          int4 _611 = make_int4(3, 3, 3, 3);
                          int4 _612 = make_int4(0, 0, 0, 0);
                          _610.x = (_611.x>=_612.x);
                          _610.y = (_611.y>=_612.y);
                          _610.z = (_611.z>=_612.z);
                          _610.w = (_611.w>=_612.w);
                        ushort4 _613;
                          int4 _614 = make_int4(0, 0, 0, 0);
                          _613.x = (_601.x>=_614.x);
                          _613.y = (_601.y>=_614.y);
                          _613.z = (_601.z>=_614.z);
                          _613.w = (_601.w>=_614.w);
                        _609.x = (_610.x&&_613.x);
                        _609.y = (_610.y&&_613.y);
                        _609.z = (_610.z&&_613.z);
                        _609.w = (_610.w&&_613.w);
                      ushort4 _615;
                        ushort4 _616;
                          int4 _617 = make_int4(3, 3, 3, 3);
                          int4 _618 = make_int4(0, 0, 0, 0);
                          _616.x = (_617.x<_618.x);
                          _616.y = (_617.y<_618.y);
                          _616.z = (_617.z<_618.z);
                          _616.w = (_617.w<_618.w);
                        ushort4 _619;
                          int4 _620 = make_int4(0, 0, 0, 0);
                          _619.x = (_601.x<=_620.x);
                          _619.y = (_601.y<=_620.y);
                          _619.z = (_601.z<=_620.z);
                          _619.w = (_601.w<=_620.w);
                        _615.x = (_616.x&&_619.x);
                        _615.y = (_616.y&&_619.y);
                        _615.z = (_616.z&&_619.z);
                        _615.w = (_616.w&&_619.w);
                      _608.x = (_609.x||_615.x);
                      _608.y = (_609.y||_615.y);
                      _608.z = (_609.z||_615.z);
                      _608.w = (_609.w||_615.w);
                    int4 _621;
                      int4 _622 = make_int4(1, 1, 1, 1);
                      _621.x = (_604.x-_622.x);
                      _621.y = (_604.y-_622.y);
                      _621.z = (_604.z-_622.z);
                      _621.w = (_604.w-_622.w);
                    _607.x = (bool(_608.x)?_604.x:_621.x);
                    _607.y = (bool(_608.y)?_604.y:_621.y);
                    _607.z = (bool(_608.z)?_604.z:_621.z);
                    _607.w = (bool(_608.w)?_604.w:_621.w);
                    int4 _623 = make_int4(16, 16, 16, 16);
                    _600.x = (_607.x%_623.x);
                    _600.y = (_607.y%_623.y);
                    _600.z = (_607.z%_623.z);
                    _600.w = (_607.w%_623.w);
                  int4 _624;
                  ushort4 _625;
                    ushort4 _626;
                      ushort4 _627;
                        int4 _628 = make_int4(16, 16, 16, 16);
                        int4 _629 = make_int4(0, 0, 0, 0);
                        _627.x = (_628.x>=_629.x);
                        _627.y = (_628.y>=_629.y);
                        _627.z = (_628.z>=_629.z);
                        _627.w = (_628.w>=_629.w);
                      ushort4 _630;
                        int4 _631 = make_int4(0, 0, 0, 0);
                        _630.x = (_600.x>=_631.x);
                        _630.y = (_600.y>=_631.y);
                        _630.z = (_600.z>=_631.z);
                        _630.w = (_600.w>=_631.w);
                      _626.x = (_627.x&&_630.x);
                      _626.y = (_627.y&&_630.y);
                      _626.z = (_627.z&&_630.z);
                      _626.w = (_627.w&&_630.w);
                    ushort4 _632;
                      ushort4 _633;
                        int4 _634 = make_int4(16, 16, 16, 16);
                        int4 _635 = make_int4(0, 0, 0, 0);
                        _633.x = (_634.x<_635.x);
                        _633.y = (_634.y<_635.y);
                        _633.z = (_634.z<_635.z);
                        _633.w = (_634.w<_635.w);
                      ushort4 _636;
                        int4 _637 = make_int4(0, 0, 0, 0);
                        _636.x = (_600.x<=_637.x);
                        _636.y = (_600.y<=_637.y);
                        _636.z = (_600.z<=_637.z);
                        _636.w = (_600.w<=_637.w);
                      _632.x = (_633.x&&_636.x);
                      _632.y = (_633.y&&_636.y);
                      _632.z = (_633.z&&_636.z);
                      _632.w = (_633.w&&_636.w);
                    _625.x = (_626.x||_632.x);
                    _625.y = (_626.y||_632.y);
                    _625.z = (_626.z||_632.z);
                    _625.w = (_626.w||_632.w);
                  int4 _638;
                    int4 _639 = make_int4(16, 16, 16, 16);
                    _638.x = (_600.x+_639.x);
                    _638.y = (_600.y+_639.y);
                    _638.z = (_600.z+_639.z);
                    _638.w = (_600.w+_639.w);
                  _624.x = (bool(_625.x)?_600.x:_638.x);
                  _624.y = (bool(_625.y)?_600.y:_638.y);
                  _624.z = (bool(_625.z)?_600.z:_638.z);
                  _624.w = (bool(_625.w)?_600.w:_638.w);
                  int4 _640 = make_int4(9, 9, 9, 9);
                  _599.x = (_624.x*_640.x);
                  _599.y = (_624.y*_640.y);
                  _599.z = (_624.z*_640.z);
                  _599.w = (_624.w*_640.w);
                _597.x = (_598.x+_599.x);
                _597.y = (_598.y+_599.y);
                _597.z = (_598.z+_599.z);
                _597.w = (_598.w+_599.w);
              int4 _641 = make_int4((ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3));
              _596.x = (_597.x+_641.x);
              _596.y = (_597.y+_641.y);
              _596.z = (_597.z+_641.z);
              _596.w = (_597.w+_641.w);
            int4 _642;
              int4 _643 = make_int4(((((int)threadIdx.x) + 288))+(1*0), ((((int)threadIdx.x) + 288))+(1*1), ((((int)threadIdx.x) + 288))+(1*2), ((((int)threadIdx.x) + 288))+(1*3));
              int4 _644 = make_int4(3, 3, 3, 3);
              _642.x = (_643.x%_644.x);
              _642.y = (_643.y%_644.y);
              _642.z = (_643.z%_644.z);
              _642.w = (_643.w%_644.w);
            int4 _645;
            ushort4 _646;
              ushort4 _647;
                ushort4 _648;
                  int4 _649 = make_int4(3, 3, 3, 3);
                  int4 _650 = make_int4(0, 0, 0, 0);
                  _648.x = (_649.x>=_650.x);
                  _648.y = (_649.y>=_650.y);
                  _648.z = (_649.z>=_650.z);
                  _648.w = (_649.w>=_650.w);
                ushort4 _651;
                  int4 _652 = make_int4(0, 0, 0, 0);
                  _651.x = (_642.x>=_652.x);
                  _651.y = (_642.y>=_652.y);
                  _651.z = (_642.z>=_652.z);
                  _651.w = (_642.w>=_652.w);
                _647.x = (_648.x&&_651.x);
                _647.y = (_648.y&&_651.y);
                _647.z = (_648.z&&_651.z);
                _647.w = (_648.w&&_651.w);
              ushort4 _653;
                ushort4 _654;
                  int4 _655 = make_int4(3, 3, 3, 3);
                  int4 _656 = make_int4(0, 0, 0, 0);
                  _654.x = (_655.x<_656.x);
                  _654.y = (_655.y<_656.y);
                  _654.z = (_655.z<_656.z);
                  _654.w = (_655.w<_656.w);
                ushort4 _657;
                  int4 _658 = make_int4(0, 0, 0, 0);
                  _657.x = (_642.x<=_658.x);
                  _657.y = (_642.y<=_658.y);
                  _657.z = (_642.z<=_658.z);
                  _657.w = (_642.w<=_658.w);
                _653.x = (_654.x&&_657.x);
                _653.y = (_654.y&&_657.y);
                _653.z = (_654.z&&_657.z);
                _653.w = (_654.w&&_657.w);
              _646.x = (_647.x||_653.x);
              _646.y = (_647.y||_653.y);
              _646.z = (_647.z||_653.z);
              _646.w = (_647.w||_653.w);
            int4 _659;
              int4 _660 = make_int4(3, 3, 3, 3);
              _659.x = (_642.x+_660.x);
              _659.y = (_642.y+_660.y);
              _659.z = (_642.z+_660.z);
              _659.w = (_642.w+_660.w);
            _645.x = (bool(_646.x)?_642.x:_659.x);
            _645.y = (bool(_646.y)?_642.y:_659.y);
            _645.z = (bool(_646.z)?_642.z:_659.z);
            _645.w = (bool(_646.w)?_642.w:_659.w);
            _595.x = (_596.x+_645.x);
            _595.y = (_596.y+_645.y);
            _595.z = (_596.z+_645.z);
            _595.w = (_596.w+_645.w);
          *(float4*)(kernel_shared + ((((int)threadIdx.x) * 4) + 1152)) = make_float4(kernel[_595.x],kernel[_595.y],kernel[_595.z],kernel[_595.w]);
          int4 _661;
            int4 _662;
              int4 _663;
                int4 _664 = make_int4(((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 1280) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 1280) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 1280) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 1280) / 48) * 4608)) + (rc_outer_outer * 144)));
                int4 _665;
                  int4 _666;
                    int4 _667;
                      int4 _668 = make_int4((((((int)threadIdx.x) * 4) + 1280))+(1*0), (((((int)threadIdx.x) * 4) + 1280))+(1*1), (((((int)threadIdx.x) * 4) + 1280))+(1*2), (((((int)threadIdx.x) * 4) + 1280))+(1*3));
                      int4 _669 = make_int4(3, 3, 3, 3);
                      _667.x = (_668.x%_669.x);
                      _667.y = (_668.y%_669.y);
                      _667.z = (_668.z%_669.z);
                      _667.w = (_668.w%_669.w);
                    int4 _670;
                      int4 _671 = make_int4((((((int)threadIdx.x) * 4) + 1280))+(1*0), (((((int)threadIdx.x) * 4) + 1280))+(1*1), (((((int)threadIdx.x) * 4) + 1280))+(1*2), (((((int)threadIdx.x) * 4) + 1280))+(1*3));
                      int4 _672 = make_int4(3, 3, 3, 3);
                      _670.x = (_671.x/_672.x);
                      _670.y = (_671.y/_672.y);
                      _670.z = (_671.z/_672.z);
                      _670.w = (_671.w/_672.w);
                    int4 _673;
                    ushort4 _674;
                      ushort4 _675;
                        ushort4 _676;
                          int4 _677 = make_int4(3, 3, 3, 3);
                          int4 _678 = make_int4(0, 0, 0, 0);
                          _676.x = (_677.x>=_678.x);
                          _676.y = (_677.y>=_678.y);
                          _676.z = (_677.z>=_678.z);
                          _676.w = (_677.w>=_678.w);
                        ushort4 _679;
                          int4 _680 = make_int4(0, 0, 0, 0);
                          _679.x = (_667.x>=_680.x);
                          _679.y = (_667.y>=_680.y);
                          _679.z = (_667.z>=_680.z);
                          _679.w = (_667.w>=_680.w);
                        _675.x = (_676.x&&_679.x);
                        _675.y = (_676.y&&_679.y);
                        _675.z = (_676.z&&_679.z);
                        _675.w = (_676.w&&_679.w);
                      ushort4 _681;
                        ushort4 _682;
                          int4 _683 = make_int4(3, 3, 3, 3);
                          int4 _684 = make_int4(0, 0, 0, 0);
                          _682.x = (_683.x<_684.x);
                          _682.y = (_683.y<_684.y);
                          _682.z = (_683.z<_684.z);
                          _682.w = (_683.w<_684.w);
                        ushort4 _685;
                          int4 _686 = make_int4(0, 0, 0, 0);
                          _685.x = (_667.x<=_686.x);
                          _685.y = (_667.y<=_686.y);
                          _685.z = (_667.z<=_686.z);
                          _685.w = (_667.w<=_686.w);
                        _681.x = (_682.x&&_685.x);
                        _681.y = (_682.y&&_685.y);
                        _681.z = (_682.z&&_685.z);
                        _681.w = (_682.w&&_685.w);
                      _674.x = (_675.x||_681.x);
                      _674.y = (_675.y||_681.y);
                      _674.z = (_675.z||_681.z);
                      _674.w = (_675.w||_681.w);
                    int4 _687;
                      int4 _688 = make_int4(1, 1, 1, 1);
                      _687.x = (_670.x-_688.x);
                      _687.y = (_670.y-_688.y);
                      _687.z = (_670.z-_688.z);
                      _687.w = (_670.w-_688.w);
                    _673.x = (bool(_674.x)?_670.x:_687.x);
                    _673.y = (bool(_674.y)?_670.y:_687.y);
                    _673.z = (bool(_674.z)?_670.z:_687.z);
                    _673.w = (bool(_674.w)?_670.w:_687.w);
                    int4 _689 = make_int4(16, 16, 16, 16);
                    _666.x = (_673.x%_689.x);
                    _666.y = (_673.y%_689.y);
                    _666.z = (_673.z%_689.z);
                    _666.w = (_673.w%_689.w);
                  int4 _690;
                  ushort4 _691;
                    ushort4 _692;
                      ushort4 _693;
                        int4 _694 = make_int4(16, 16, 16, 16);
                        int4 _695 = make_int4(0, 0, 0, 0);
                        _693.x = (_694.x>=_695.x);
                        _693.y = (_694.y>=_695.y);
                        _693.z = (_694.z>=_695.z);
                        _693.w = (_694.w>=_695.w);
                      ushort4 _696;
                        int4 _697 = make_int4(0, 0, 0, 0);
                        _696.x = (_666.x>=_697.x);
                        _696.y = (_666.y>=_697.y);
                        _696.z = (_666.z>=_697.z);
                        _696.w = (_666.w>=_697.w);
                      _692.x = (_693.x&&_696.x);
                      _692.y = (_693.y&&_696.y);
                      _692.z = (_693.z&&_696.z);
                      _692.w = (_693.w&&_696.w);
                    ushort4 _698;
                      ushort4 _699;
                        int4 _700 = make_int4(16, 16, 16, 16);
                        int4 _701 = make_int4(0, 0, 0, 0);
                        _699.x = (_700.x<_701.x);
                        _699.y = (_700.y<_701.y);
                        _699.z = (_700.z<_701.z);
                        _699.w = (_700.w<_701.w);
                      ushort4 _702;
                        int4 _703 = make_int4(0, 0, 0, 0);
                        _702.x = (_666.x<=_703.x);
                        _702.y = (_666.y<=_703.y);
                        _702.z = (_666.z<=_703.z);
                        _702.w = (_666.w<=_703.w);
                      _698.x = (_699.x&&_702.x);
                      _698.y = (_699.y&&_702.y);
                      _698.z = (_699.z&&_702.z);
                      _698.w = (_699.w&&_702.w);
                    _691.x = (_692.x||_698.x);
                    _691.y = (_692.y||_698.y);
                    _691.z = (_692.z||_698.z);
                    _691.w = (_692.w||_698.w);
                  int4 _704;
                    int4 _705 = make_int4(16, 16, 16, 16);
                    _704.x = (_666.x+_705.x);
                    _704.y = (_666.y+_705.y);
                    _704.z = (_666.z+_705.z);
                    _704.w = (_666.w+_705.w);
                  _690.x = (bool(_691.x)?_666.x:_704.x);
                  _690.y = (bool(_691.y)?_666.y:_704.y);
                  _690.z = (bool(_691.z)?_666.z:_704.z);
                  _690.w = (bool(_691.w)?_666.w:_704.w);
                  int4 _706 = make_int4(9, 9, 9, 9);
                  _665.x = (_690.x*_706.x);
                  _665.y = (_690.y*_706.y);
                  _665.z = (_690.z*_706.z);
                  _665.w = (_690.w*_706.w);
                _663.x = (_664.x+_665.x);
                _663.y = (_664.y+_665.y);
                _663.z = (_664.z+_665.z);
                _663.w = (_664.w+_665.w);
              int4 _707 = make_int4((ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3));
              _662.x = (_663.x+_707.x);
              _662.y = (_663.y+_707.y);
              _662.z = (_663.z+_707.z);
              _662.w = (_663.w+_707.w);
            int4 _708;
              int4 _709 = make_int4(((((int)threadIdx.x) + 320))+(1*0), ((((int)threadIdx.x) + 320))+(1*1), ((((int)threadIdx.x) + 320))+(1*2), ((((int)threadIdx.x) + 320))+(1*3));
              int4 _710 = make_int4(3, 3, 3, 3);
              _708.x = (_709.x%_710.x);
              _708.y = (_709.y%_710.y);
              _708.z = (_709.z%_710.z);
              _708.w = (_709.w%_710.w);
            int4 _711;
            ushort4 _712;
              ushort4 _713;
                ushort4 _714;
                  int4 _715 = make_int4(3, 3, 3, 3);
                  int4 _716 = make_int4(0, 0, 0, 0);
                  _714.x = (_715.x>=_716.x);
                  _714.y = (_715.y>=_716.y);
                  _714.z = (_715.z>=_716.z);
                  _714.w = (_715.w>=_716.w);
                ushort4 _717;
                  int4 _718 = make_int4(0, 0, 0, 0);
                  _717.x = (_708.x>=_718.x);
                  _717.y = (_708.y>=_718.y);
                  _717.z = (_708.z>=_718.z);
                  _717.w = (_708.w>=_718.w);
                _713.x = (_714.x&&_717.x);
                _713.y = (_714.y&&_717.y);
                _713.z = (_714.z&&_717.z);
                _713.w = (_714.w&&_717.w);
              ushort4 _719;
                ushort4 _720;
                  int4 _721 = make_int4(3, 3, 3, 3);
                  int4 _722 = make_int4(0, 0, 0, 0);
                  _720.x = (_721.x<_722.x);
                  _720.y = (_721.y<_722.y);
                  _720.z = (_721.z<_722.z);
                  _720.w = (_721.w<_722.w);
                ushort4 _723;
                  int4 _724 = make_int4(0, 0, 0, 0);
                  _723.x = (_708.x<=_724.x);
                  _723.y = (_708.y<=_724.y);
                  _723.z = (_708.z<=_724.z);
                  _723.w = (_708.w<=_724.w);
                _719.x = (_720.x&&_723.x);
                _719.y = (_720.y&&_723.y);
                _719.z = (_720.z&&_723.z);
                _719.w = (_720.w&&_723.w);
              _712.x = (_713.x||_719.x);
              _712.y = (_713.y||_719.y);
              _712.z = (_713.z||_719.z);
              _712.w = (_713.w||_719.w);
            int4 _725;
              int4 _726 = make_int4(3, 3, 3, 3);
              _725.x = (_708.x+_726.x);
              _725.y = (_708.y+_726.y);
              _725.z = (_708.z+_726.z);
              _725.w = (_708.w+_726.w);
            _711.x = (bool(_712.x)?_708.x:_725.x);
            _711.y = (bool(_712.y)?_708.y:_725.y);
            _711.z = (bool(_712.z)?_708.z:_725.z);
            _711.w = (bool(_712.w)?_708.w:_725.w);
            _661.x = (_662.x+_711.x);
            _661.y = (_662.y+_711.y);
            _661.z = (_662.z+_711.z);
            _661.w = (_662.w+_711.w);
          *(float4*)(kernel_shared + ((((int)threadIdx.x) * 4) + 1280)) = make_float4(kernel[_661.x],kernel[_661.y],kernel[_661.z],kernel[_661.w]);
          int4 _727;
            int4 _728;
              int4 _729;
                int4 _730 = make_int4(((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 1408) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 1408) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 1408) / 48) * 4608)) + (rc_outer_outer * 144)), ((((((int)blockIdx.x) / 7) * 147456) + ((((((int)threadIdx.x) * 4) + 1408) / 48) * 4608)) + (rc_outer_outer * 144)));
                int4 _731;
                  int4 _732;
                    int4 _733;
                      int4 _734 = make_int4((((((int)threadIdx.x) * 4) + 1408))+(1*0), (((((int)threadIdx.x) * 4) + 1408))+(1*1), (((((int)threadIdx.x) * 4) + 1408))+(1*2), (((((int)threadIdx.x) * 4) + 1408))+(1*3));
                      int4 _735 = make_int4(3, 3, 3, 3);
                      _733.x = (_734.x%_735.x);
                      _733.y = (_734.y%_735.y);
                      _733.z = (_734.z%_735.z);
                      _733.w = (_734.w%_735.w);
                    int4 _736;
                      int4 _737 = make_int4((((((int)threadIdx.x) * 4) + 1408))+(1*0), (((((int)threadIdx.x) * 4) + 1408))+(1*1), (((((int)threadIdx.x) * 4) + 1408))+(1*2), (((((int)threadIdx.x) * 4) + 1408))+(1*3));
                      int4 _738 = make_int4(3, 3, 3, 3);
                      _736.x = (_737.x/_738.x);
                      _736.y = (_737.y/_738.y);
                      _736.z = (_737.z/_738.z);
                      _736.w = (_737.w/_738.w);
                    int4 _739;
                    ushort4 _740;
                      ushort4 _741;
                        ushort4 _742;
                          int4 _743 = make_int4(3, 3, 3, 3);
                          int4 _744 = make_int4(0, 0, 0, 0);
                          _742.x = (_743.x>=_744.x);
                          _742.y = (_743.y>=_744.y);
                          _742.z = (_743.z>=_744.z);
                          _742.w = (_743.w>=_744.w);
                        ushort4 _745;
                          int4 _746 = make_int4(0, 0, 0, 0);
                          _745.x = (_733.x>=_746.x);
                          _745.y = (_733.y>=_746.y);
                          _745.z = (_733.z>=_746.z);
                          _745.w = (_733.w>=_746.w);
                        _741.x = (_742.x&&_745.x);
                        _741.y = (_742.y&&_745.y);
                        _741.z = (_742.z&&_745.z);
                        _741.w = (_742.w&&_745.w);
                      ushort4 _747;
                        ushort4 _748;
                          int4 _749 = make_int4(3, 3, 3, 3);
                          int4 _750 = make_int4(0, 0, 0, 0);
                          _748.x = (_749.x<_750.x);
                          _748.y = (_749.y<_750.y);
                          _748.z = (_749.z<_750.z);
                          _748.w = (_749.w<_750.w);
                        ushort4 _751;
                          int4 _752 = make_int4(0, 0, 0, 0);
                          _751.x = (_733.x<=_752.x);
                          _751.y = (_733.y<=_752.y);
                          _751.z = (_733.z<=_752.z);
                          _751.w = (_733.w<=_752.w);
                        _747.x = (_748.x&&_751.x);
                        _747.y = (_748.y&&_751.y);
                        _747.z = (_748.z&&_751.z);
                        _747.w = (_748.w&&_751.w);
                      _740.x = (_741.x||_747.x);
                      _740.y = (_741.y||_747.y);
                      _740.z = (_741.z||_747.z);
                      _740.w = (_741.w||_747.w);
                    int4 _753;
                      int4 _754 = make_int4(1, 1, 1, 1);
                      _753.x = (_736.x-_754.x);
                      _753.y = (_736.y-_754.y);
                      _753.z = (_736.z-_754.z);
                      _753.w = (_736.w-_754.w);
                    _739.x = (bool(_740.x)?_736.x:_753.x);
                    _739.y = (bool(_740.y)?_736.y:_753.y);
                    _739.z = (bool(_740.z)?_736.z:_753.z);
                    _739.w = (bool(_740.w)?_736.w:_753.w);
                    int4 _755 = make_int4(16, 16, 16, 16);
                    _732.x = (_739.x%_755.x);
                    _732.y = (_739.y%_755.y);
                    _732.z = (_739.z%_755.z);
                    _732.w = (_739.w%_755.w);
                  int4 _756;
                  ushort4 _757;
                    ushort4 _758;
                      ushort4 _759;
                        int4 _760 = make_int4(16, 16, 16, 16);
                        int4 _761 = make_int4(0, 0, 0, 0);
                        _759.x = (_760.x>=_761.x);
                        _759.y = (_760.y>=_761.y);
                        _759.z = (_760.z>=_761.z);
                        _759.w = (_760.w>=_761.w);
                      ushort4 _762;
                        int4 _763 = make_int4(0, 0, 0, 0);
                        _762.x = (_732.x>=_763.x);
                        _762.y = (_732.y>=_763.y);
                        _762.z = (_732.z>=_763.z);
                        _762.w = (_732.w>=_763.w);
                      _758.x = (_759.x&&_762.x);
                      _758.y = (_759.y&&_762.y);
                      _758.z = (_759.z&&_762.z);
                      _758.w = (_759.w&&_762.w);
                    ushort4 _764;
                      ushort4 _765;
                        int4 _766 = make_int4(16, 16, 16, 16);
                        int4 _767 = make_int4(0, 0, 0, 0);
                        _765.x = (_766.x<_767.x);
                        _765.y = (_766.y<_767.y);
                        _765.z = (_766.z<_767.z);
                        _765.w = (_766.w<_767.w);
                      ushort4 _768;
                        int4 _769 = make_int4(0, 0, 0, 0);
                        _768.x = (_732.x<=_769.x);
                        _768.y = (_732.y<=_769.y);
                        _768.z = (_732.z<=_769.z);
                        _768.w = (_732.w<=_769.w);
                      _764.x = (_765.x&&_768.x);
                      _764.y = (_765.y&&_768.y);
                      _764.z = (_765.z&&_768.z);
                      _764.w = (_765.w&&_768.w);
                    _757.x = (_758.x||_764.x);
                    _757.y = (_758.y||_764.y);
                    _757.z = (_758.z||_764.z);
                    _757.w = (_758.w||_764.w);
                  int4 _770;
                    int4 _771 = make_int4(16, 16, 16, 16);
                    _770.x = (_732.x+_771.x);
                    _770.y = (_732.y+_771.y);
                    _770.z = (_732.z+_771.z);
                    _770.w = (_732.w+_771.w);
                  _756.x = (bool(_757.x)?_732.x:_770.x);
                  _756.y = (bool(_757.y)?_732.y:_770.y);
                  _756.z = (bool(_757.z)?_732.z:_770.z);
                  _756.w = (bool(_757.w)?_732.w:_770.w);
                  int4 _772 = make_int4(9, 9, 9, 9);
                  _731.x = (_756.x*_772.x);
                  _731.y = (_756.y*_772.y);
                  _731.z = (_756.z*_772.z);
                  _731.w = (_756.w*_772.w);
                _729.x = (_730.x+_731.x);
                _729.y = (_730.y+_731.y);
                _729.z = (_730.z+_731.z);
                _729.w = (_730.w+_731.w);
              int4 _773 = make_int4((ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3), (ry_outer_outer * 3));
              _728.x = (_729.x+_773.x);
              _728.y = (_729.y+_773.y);
              _728.z = (_729.z+_773.z);
              _728.w = (_729.w+_773.w);
            int4 _774;
              int4 _775 = make_int4(((((int)threadIdx.x) + 352))+(1*0), ((((int)threadIdx.x) + 352))+(1*1), ((((int)threadIdx.x) + 352))+(1*2), ((((int)threadIdx.x) + 352))+(1*3));
              int4 _776 = make_int4(3, 3, 3, 3);
              _774.x = (_775.x%_776.x);
              _774.y = (_775.y%_776.y);
              _774.z = (_775.z%_776.z);
              _774.w = (_775.w%_776.w);
            int4 _777;
            ushort4 _778;
              ushort4 _779;
                ushort4 _780;
                  int4 _781 = make_int4(3, 3, 3, 3);
                  int4 _782 = make_int4(0, 0, 0, 0);
                  _780.x = (_781.x>=_782.x);
                  _780.y = (_781.y>=_782.y);
                  _780.z = (_781.z>=_782.z);
                  _780.w = (_781.w>=_782.w);
                ushort4 _783;
                  int4 _784 = make_int4(0, 0, 0, 0);
                  _783.x = (_774.x>=_784.x);
                  _783.y = (_774.y>=_784.y);
                  _783.z = (_774.z>=_784.z);
                  _783.w = (_774.w>=_784.w);
                _779.x = (_780.x&&_783.x);
                _779.y = (_780.y&&_783.y);
                _779.z = (_780.z&&_783.z);
                _779.w = (_780.w&&_783.w);
              ushort4 _785;
                ushort4 _786;
                  int4 _787 = make_int4(3, 3, 3, 3);
                  int4 _788 = make_int4(0, 0, 0, 0);
                  _786.x = (_787.x<_788.x);
                  _786.y = (_787.y<_788.y);
                  _786.z = (_787.z<_788.z);
                  _786.w = (_787.w<_788.w);
                ushort4 _789;
                  int4 _790 = make_int4(0, 0, 0, 0);
                  _789.x = (_774.x<=_790.x);
                  _789.y = (_774.y<=_790.y);
                  _789.z = (_774.z<=_790.z);
                  _789.w = (_774.w<=_790.w);
                _785.x = (_786.x&&_789.x);
                _785.y = (_786.y&&_789.y);
                _785.z = (_786.z&&_789.z);
                _785.w = (_786.w&&_789.w);
              _778.x = (_779.x||_785.x);
              _778.y = (_779.y||_785.y);
              _778.z = (_779.z||_785.z);
              _778.w = (_779.w||_785.w);
            int4 _791;
              int4 _792 = make_int4(3, 3, 3, 3);
              _791.x = (_774.x+_792.x);
              _791.y = (_774.y+_792.y);
              _791.z = (_774.z+_792.z);
              _791.w = (_774.w+_792.w);
            _777.x = (bool(_778.x)?_774.x:_791.x);
            _777.y = (bool(_778.y)?_774.y:_791.y);
            _777.z = (bool(_778.z)?_774.z:_791.z);
            _777.w = (bool(_778.w)?_774.w:_791.w);
            _727.x = (_728.x+_777.x);
            _727.y = (_728.y+_777.y);
            _727.z = (_728.z+_777.z);
            _727.w = (_728.w+_777.w);
          *(float4*)(kernel_shared + ((((int)threadIdx.x) * 4) + 1408)) = make_float4(kernel[_727.x],kernel[_727.y],kernel[_727.z],kernel[_727.w]);
          __syncthreads();
          for (int rc_outer_inner = 0; rc_outer_inner < 8; ++rc_outer_inner) {
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(rc_outer_inner * 18)] * kernel_shared[((((int)threadIdx.x) * 48) + (rc_outer_inner * 6))]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 18) + 1)] * kernel_shared[((((int)threadIdx.x) * 48) + (rc_outer_inner * 6))]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_outer_inner * 18) + 2)] * kernel_shared[((((int)threadIdx.x) * 48) + (rc_outer_inner * 6))]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_outer_inner * 18) + 3)] * kernel_shared[((((int)threadIdx.x) * 48) + (rc_outer_inner * 6))]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_outer_inner * 18) + 4)] * kernel_shared[((((int)threadIdx.x) * 48) + (rc_outer_inner * 6))]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_outer_inner * 18) + 5)] * kernel_shared[((((int)threadIdx.x) * 48) + (rc_outer_inner * 6))]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_outer_inner * 18) + 6)] * kernel_shared[((((int)threadIdx.x) * 48) + (rc_outer_inner * 6))]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_outer_inner * 18) + 1)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 1)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 18) + 2)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 1)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_outer_inner * 18) + 3)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 1)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_outer_inner * 18) + 4)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 1)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_outer_inner * 18) + 5)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 1)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_outer_inner * 18) + 6)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 1)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_outer_inner * 18) + 7)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 1)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_outer_inner * 18) + 2)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 2)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 18) + 3)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 2)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_outer_inner * 18) + 4)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 2)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_outer_inner * 18) + 5)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 2)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_outer_inner * 18) + 6)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 2)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_outer_inner * 18) + 7)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 2)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_outer_inner * 18) + 8)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 2)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_outer_inner * 18) + 9)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 3)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 18) + 10)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 3)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_outer_inner * 18) + 11)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 3)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_outer_inner * 18) + 12)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 3)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_outer_inner * 18) + 13)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 3)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_outer_inner * 18) + 14)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 3)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_outer_inner * 18) + 15)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 3)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_outer_inner * 18) + 10)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 4)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 18) + 11)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 4)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_outer_inner * 18) + 12)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 4)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_outer_inner * 18) + 13)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 4)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_outer_inner * 18) + 14)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 4)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_outer_inner * 18) + 15)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 4)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_outer_inner * 18) + 16)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 4)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_outer_inner * 18) + 11)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 5)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 18) + 12)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 5)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_outer_inner * 18) + 13)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 5)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_outer_inner * 18) + 14)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 5)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_outer_inner * 18) + 15)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 5)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_outer_inner * 18) + 16)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 5)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_outer_inner * 18) + 17)] * kernel_shared[(((((int)threadIdx.x) * 48) + (rc_outer_inner * 6)) + 5)]));
          }
        }
      }
      for (int i3_inner = 0; i3_inner < 7; ++i3_inner) {
        compute[(((((((int)blockIdx.x) / 7) * 1568) + (((int)threadIdx.x) * 49)) + ((((int)blockIdx.x) % 7) * 7)) + i3_inner)] = max((conv2d_nchw[i3_inner] + bias[(((((int)blockIdx.x) / 7) * 32) + ((int)threadIdx.x))]), 0.000000e+00f);
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 184-188

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 188-210

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.7/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  34.321 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
