
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/deploy_models/deploy_ssd_gluoncv.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_deploy_models_deploy_ssd_gluoncv.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_deploy_models_deploy_ssd_gluoncv.py:


Deploy Single Shot Multibox Detector(SSD) model
===============================================
**Author**: `Yao Wang <https://github.com/kevinthesun>`_
`Leyuan Wang <https://github.com/Laurawly>`_

This article is an introductory tutorial to deploy SSD models with TVM.
We will use GluonCV pre-trained SSD model and convert it to Relay IR

.. GENERATED FROM PYTHON SOURCE LINES 26-36

.. code-block:: default

    import tvm
    from tvm import te

    from matplotlib import pyplot as plt
    from tvm import relay
    from tvm.contrib import graph_executor
    from tvm.contrib.download import download_testdata
    from gluoncv import model_zoo, data, utils






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/local/lib/python3.7/dist-packages/gluoncv/__init__.py:40: UserWarning: Both `mxnet==1.6.0` and `torch==1.11.0+cpu` are installed. You might encounter increased GPU memory footprint if both framework are used at the same time.
      warnings.warn(f'Both `mxnet=={mx.__version__}` and `torch=={torch.__version__}` are installed. '




.. GENERATED FROM PYTHON SOURCE LINES 37-59

Preliminary and Set parameters
------------------------------
.. note::

  We support compiling SSD on both CPUs and GPUs now.

  To get best inference performance on CPU, change
  target argument according to your device and
  follow the :ref:`tune_relay_x86` to tune x86 CPU and
  :ref:`tune_relay_arm` for arm CPU.

  To get best inference performance on Intel graphics,
  change target argument to :code:`opencl -device=intel_graphics`.
  But when using Intel graphics on Mac, target needs to
  be set to `opencl` only for the reason that Intel subgroup
  extension is not supported on Mac.

  To get best inference performance on CUDA-based GPUs,
  change the target argument to :code:`cuda`; and for
  OPENCL-based GPUs, change target argument to
  :code:`opencl` followed by device argument according
  to your device.

.. GENERATED FROM PYTHON SOURCE LINES 59-72

.. code-block:: default


    supported_model = [
        "ssd_512_resnet50_v1_voc",
        "ssd_512_resnet50_v1_coco",
        "ssd_512_resnet101_v2_voc",
        "ssd_512_mobilenet1.0_voc",
        "ssd_512_mobilenet1.0_coco",
        "ssd_300_vgg16_atrous_voc" "ssd_512_vgg16_atrous_coco",
    ]

    model_name = supported_model[0]
    dshape = (1, 3, 512, 512)








.. GENERATED FROM PYTHON SOURCE LINES 73-74

Download and pre-process demo image

.. GENERATED FROM PYTHON SOURCE LINES 74-82

.. code-block:: default


    im_fname = download_testdata(
        "https://github.com/dmlc/web-data/blob/main/" + "gluoncv/detection/street_small.jpg?raw=true",
        "street_small.jpg",
        module="data",
    )
    x, img = data.transforms.presets.ssd.load_test(im_fname, short=512)








.. GENERATED FROM PYTHON SOURCE LINES 83-84

Convert and compile model for CPU.

.. GENERATED FROM PYTHON SOURCE LINES 84-95

.. code-block:: default


    block = model_zoo.get_model(model_name, pretrained=True)


    def build(target):
        mod, params = relay.frontend.from_mxnet(block, {"data": dshape})
        with tvm.transform.PassContext(opt_level=3):
            lib = relay.build(mod, target, params=params)
        return lib






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/local/lib/python3.7/dist-packages/mxnet/gluon/block.py:1389: UserWarning: Cannot decide type for the following arguments. Consider providing them as input:
            data: None
      input_sym_arg_type = in_param.infer_type()[0]
    Downloading /workspace/.mxnet/models/ssd_512_resnet50_v1_voc-9c8b225a.zip from https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/models/ssd_512_resnet50_v1_voc-9c8b225a.zip...
      0%|          | 0/132723 [00:00<?, ?KB/s]      2%|1         | 2206/132723 [00:00<00:06, 21741.29KB/s]      3%|3         | 4414/132723 [00:00<00:05, 21879.08KB/s]      5%|5         | 6824/132723 [00:00<00:05, 22887.31KB/s]      7%|6         | 9114/132723 [00:00<00:05, 21760.49KB/s]      9%|8         | 11299/132723 [00:00<00:06, 20111.46KB/s]     10%|#         | 13331/132723 [00:00<00:06, 19808.25KB/s]     12%|#1        | 15374/132723 [00:00<00:05, 19946.76KB/s]     13%|#3        | 17518/132723 [00:00<00:05, 20384.72KB/s]     15%|#4        | 19779/132723 [00:00<00:05, 21057.23KB/s]     17%|#6        | 22193/132723 [00:01<00:05, 21986.88KB/s]     19%|#8        | 24654/132723 [00:01<00:04, 22736.88KB/s]     20%|##        | 27134/132723 [00:01<00:04, 23297.22KB/s]     22%|##2       | 29822/132723 [00:01<00:04, 24359.60KB/s]     25%|##4       | 32638/132723 [00:01<00:03, 25473.46KB/s]     27%|##6       | 35517/132723 [00:01<00:03, 26465.73KB/s]     29%|##9       | 38522/132723 [00:01<00:03, 27539.59KB/s]     31%|###1      | 41758/132723 [00:01<00:03, 28975.86KB/s]     34%|###3      | 45060/132723 [00:01<00:02, 30187.53KB/s]     36%|###6      | 48364/132723 [00:01<00:02, 31041.90KB/s]     39%|###8      | 51694/132723 [00:02<00:02, 31718.55KB/s]     42%|####1     | 55118/132723 [00:02<00:02, 32471.17KB/s]     44%|####4     | 58861/132723 [00:02<00:02, 33957.85KB/s]     47%|####7     | 62660/132723 [00:02<00:01, 35166.76KB/s]     50%|#####     | 66657/132723 [00:02<00:01, 36606.77KB/s]     53%|#####3    | 70782/132723 [00:02<00:01, 37983.23KB/s]     56%|#####6    | 74910/132723 [00:02<00:01, 38907.64KB/s]     60%|#####9    | 79054/132723 [00:02<00:01, 39608.79KB/s]     63%|######2   | 83197/132723 [00:02<00:01, 40153.26KB/s]     66%|######5   | 87326/132723 [00:02<00:01, 40490.46KB/s]     69%|######9   | 91892/132723 [00:03<00:00, 42037.83KB/s]     73%|#######2  | 96715/132723 [00:03<00:00, 43892.72KB/s]     77%|#######6  | 101573/132723 [00:03<00:00, 45297.42KB/s]     80%|########  | 106510/132723 [00:03<00:00, 46506.94KB/s]     84%|########3 | 111430/132723 [00:03<00:00, 47313.35KB/s]     88%|########7 | 116382/132723 [00:03<00:00, 47949.42KB/s]     91%|#########1| 121326/132723 [00:03<00:00, 48338.77KB/s]     95%|#########5| 126350/132723 [00:03<00:00, 48795.88KB/s]     99%|#########9| 132055/132723 [00:03<00:00, 51264.78KB/s]    100%|##########| 132723/132723 [00:03<00:00, 34341.01KB/s]




.. GENERATED FROM PYTHON SOURCE LINES 96-101

Create TVM runtime and do inference
.. note::

  Use target = "cuda -libs" to enable thrust based sort, if you
  enabled thrust during cmake by -DUSE_THRUST=ON.

.. GENERATED FROM PYTHON SOURCE LINES 101-121

.. code-block:: default



    def run(lib, dev):
        # Build TVM runtime
        m = graph_executor.GraphModule(lib["default"](dev))
        tvm_input = tvm.nd.array(x.asnumpy(), device=dev)
        m.set_input("data", tvm_input)
        # execute
        m.run()
        # get outputs
        class_IDs, scores, bounding_boxs = m.get_output(0), m.get_output(1), m.get_output(2)
        return class_IDs, scores, bounding_boxs


    for target in ["llvm", "cuda"]:
        dev = tvm.device(target, 0)
        if dev.exist:
            lib = build(target)
            class_IDs, scores, bounding_boxs = run(lib, dev)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /workspace/python/tvm/driver/build_module.py:264: UserWarning: target_host parameter is going to be deprecated. Please pass in tvm.target.Target(target, host=target_host) instead.
      "target_host parameter is going to be deprecated. "




.. GENERATED FROM PYTHON SOURCE LINES 122-123

Display result

.. GENERATED FROM PYTHON SOURCE LINES 123-132

.. code-block:: default


    ax = utils.viz.plot_bbox(
        img,
        bounding_boxs.numpy()[0],
        scores.numpy()[0],
        class_IDs.numpy()[0],
        class_names=block.classes,
    )
    plt.show()



.. image-sg:: /how_to/deploy_models/images/sphx_glr_deploy_ssd_gluoncv_001.png
   :alt: deploy ssd gluoncv
   :srcset: /how_to/deploy_models/images/sphx_glr_deploy_ssd_gluoncv_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  20.016 seconds)


.. _sphx_glr_download_how_to_deploy_models_deploy_ssd_gluoncv.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: deploy_ssd_gluoncv.py <deploy_ssd_gluoncv.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: deploy_ssd_gluoncv.ipynb <deploy_ssd_gluoncv.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
