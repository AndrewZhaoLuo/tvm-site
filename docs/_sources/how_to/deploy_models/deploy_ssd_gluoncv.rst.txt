
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/deploy_models/deploy_ssd_gluoncv.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_deploy_models_deploy_ssd_gluoncv.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_deploy_models_deploy_ssd_gluoncv.py:


Deploy Single Shot Multibox Detector(SSD) model
===============================================
**Author**: `Yao Wang <https://github.com/kevinthesun>`_
`Leyuan Wang <https://github.com/Laurawly>`_

This article is an introductory tutorial to deploy SSD models with TVM.
We will use GluonCV pre-trained SSD model and convert it to Relay IR

.. GENERATED FROM PYTHON SOURCE LINES 26-37

.. code-block:: default


    import tvm
    from tvm import te

    from matplotlib import pyplot as plt
    from tvm import relay
    from tvm.contrib import graph_executor
    from tvm.contrib.download import download_testdata
    from gluoncv import model_zoo, data, utils






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/local/lib/python3.7/dist-packages/gluoncv/__init__.py:40: UserWarning: Both `mxnet==1.6.0` and `torch==1.11.0+cpu` are installed. You might encounter increased GPU memory footprint if both framework are used at the same time.
      warnings.warn(f'Both `mxnet=={mx.__version__}` and `torch=={torch.__version__}` are installed. '




.. GENERATED FROM PYTHON SOURCE LINES 43-65

Preliminary and Set parameters
------------------------------
.. note::

  We support compiling SSD on both CPUs and GPUs now.

  To get best inference performance on CPU, change
  target argument according to your device and
  follow the :ref:`tune_relay_x86` to tune x86 CPU and
  :ref:`tune_relay_arm` for arm CPU.

  To get best inference performance on Intel graphics,
  change target argument to :code:`opencl -device=intel_graphics`.
  But when using Intel graphics on Mac, target needs to
  be set to `opencl` only for the reason that Intel subgroup
  extension is not supported on Mac.

  To get best inference performance on CUDA-based GPUs,
  change the target argument to :code:`cuda`; and for
  OPENCL-based GPUs, change target argument to
  :code:`opencl` followed by device argument according
  to your device.

.. GENERATED FROM PYTHON SOURCE LINES 65-78

.. code-block:: default


    supported_model = [
        "ssd_512_resnet50_v1_voc",
        "ssd_512_resnet50_v1_coco",
        "ssd_512_resnet101_v2_voc",
        "ssd_512_mobilenet1.0_voc",
        "ssd_512_mobilenet1.0_coco",
        "ssd_300_vgg16_atrous_voc" "ssd_512_vgg16_atrous_coco",
    ]

    model_name = supported_model[0]
    dshape = (1, 3, 512, 512)








.. GENERATED FROM PYTHON SOURCE LINES 79-80

Download and pre-process demo image

.. GENERATED FROM PYTHON SOURCE LINES 80-88

.. code-block:: default


    im_fname = download_testdata(
        "https://github.com/dmlc/web-data/blob/main/" + "gluoncv/detection/street_small.jpg?raw=true",
        "street_small.jpg",
        module="data",
    )
    x, img = data.transforms.presets.ssd.load_test(im_fname, short=512)








.. GENERATED FROM PYTHON SOURCE LINES 89-90

Convert and compile model for CPU.

.. GENERATED FROM PYTHON SOURCE LINES 90-101

.. code-block:: default


    block = model_zoo.get_model(model_name, pretrained=True)


    def build(target):
        mod, params = relay.frontend.from_mxnet(block, {"data": dshape})
        with tvm.transform.PassContext(opt_level=3):
            lib = relay.build(mod, target, params=params)
        return lib






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/local/lib/python3.7/dist-packages/mxnet/gluon/block.py:1389: UserWarning: Cannot decide type for the following arguments. Consider providing them as input:
            data: None
      input_sym_arg_type = in_param.infer_type()[0]
    Downloading /workspace/.mxnet/models/ssd_512_resnet50_v1_voc-9c8b225a.zip from https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/models/ssd_512_resnet50_v1_voc-9c8b225a.zip...
      0%|          | 0/132723 [00:00<?, ?KB/s]      4%|3         | 4969/132723 [00:00<00:02, 49682.82KB/s]      9%|8         | 11749/132723 [00:00<00:02, 60335.41KB/s]     14%|#4        | 18867/132723 [00:00<00:01, 65284.77KB/s]     19%|#9        | 25475/132723 [00:00<00:01, 65594.21KB/s]     24%|##4       | 32458/132723 [00:00<00:01, 67119.78KB/s]     30%|##9       | 39170/132723 [00:00<00:01, 65751.55KB/s]     35%|###4      | 45941/132723 [00:00<00:01, 66381.07KB/s]     40%|###9      | 52687/132723 [00:00<00:01, 66719.15KB/s]     45%|####4     | 59615/132723 [00:00<00:01, 67511.91KB/s]     50%|#####     | 66506/132723 [00:01<00:00, 67940.03KB/s]     55%|#####5    | 73519/132723 [00:01<00:00, 68513.07KB/s]     61%|######    | 80709/132723 [00:01<00:00, 69536.52KB/s]     66%|######6   | 87726/132723 [00:01<00:00, 69718.31KB/s]     71%|#######1  | 94884/132723 [00:01<00:00, 70020.51KB/s]     77%|#######6  | 101901/132723 [00:01<00:00, 70063.57KB/s]     82%|########2 | 108908/132723 [00:01<00:00, 69835.54KB/s]     87%|########7 | 115892/132723 [00:01<00:00, 69779.35KB/s]     93%|#########2| 123011/132723 [00:01<00:00, 70200.58KB/s]     98%|#########8| 130482/132723 [00:01<00:00, 71549.36KB/s]    100%|##########| 132723/132723 [00:01<00:00, 68534.85KB/s]




.. GENERATED FROM PYTHON SOURCE LINES 102-107

Create TVM runtime and do inference
.. note::

  Use target = "cuda -libs" to enable thrust based sort, if you
  enabled thrust during cmake by -DUSE_THRUST=ON.

.. GENERATED FROM PYTHON SOURCE LINES 107-127

.. code-block:: default



    def run(lib, dev):
        # Build TVM runtime
        m = graph_executor.GraphModule(lib["default"](dev))
        tvm_input = tvm.nd.array(x.asnumpy(), device=dev)
        m.set_input("data", tvm_input)
        # execute
        m.run()
        # get outputs
        class_IDs, scores, bounding_boxs = m.get_output(0), m.get_output(1), m.get_output(2)
        return class_IDs, scores, bounding_boxs


    for target in ["llvm", "cuda"]:
        dev = tvm.device(target, 0)
        if dev.exist:
            lib = build(target)
            class_IDs, scores, bounding_boxs = run(lib, dev)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /workspace/python/tvm/driver/build_module.py:268: UserWarning: target_host parameter is going to be deprecated. Please pass in tvm.target.Target(target, host=target_host) instead.
      "target_host parameter is going to be deprecated. "




.. GENERATED FROM PYTHON SOURCE LINES 128-129

Display result

.. GENERATED FROM PYTHON SOURCE LINES 129-138

.. code-block:: default


    ax = utils.viz.plot_bbox(
        img,
        bounding_boxs.numpy()[0],
        scores.numpy()[0],
        class_IDs.numpy()[0],
        class_names=block.classes,
    )
    plt.show()



.. image-sg:: /how_to/deploy_models/images/sphx_glr_deploy_ssd_gluoncv_001.png
   :alt: deploy ssd gluoncv
   :srcset: /how_to/deploy_models/images/sphx_glr_deploy_ssd_gluoncv_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  20.066 seconds)


.. _sphx_glr_download_how_to_deploy_models_deploy_ssd_gluoncv.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: deploy_ssd_gluoncv.py <deploy_ssd_gluoncv.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: deploy_ssd_gluoncv.ipynb <deploy_ssd_gluoncv.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
