
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/deploy_models/deploy_ssd_gluoncv.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_deploy_models_deploy_ssd_gluoncv.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_deploy_models_deploy_ssd_gluoncv.py:


Deploy Single Shot Multibox Detector(SSD) model
===============================================
**Author**: `Yao Wang <https://github.com/kevinthesun>`_
`Leyuan Wang <https://github.com/Laurawly>`_

This article is an introductory tutorial to deploy SSD models with TVM.
We will use GluonCV pre-trained SSD model and convert it to Relay IR

.. GENERATED FROM PYTHON SOURCE LINES 26-37

.. code-block:: default


    import tvm
    from tvm import te

    from matplotlib import pyplot as plt
    from tvm import relay
    from tvm.contrib import graph_executor
    from tvm.contrib.download import download_testdata
    from gluoncv import model_zoo, data, utils






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/local/lib/python3.7/dist-packages/gluoncv/__init__.py:40: UserWarning: Both `mxnet==1.6.0` and `torch==1.11.0+cpu` are installed. You might encounter increased GPU memory footprint if both framework are used at the same time.
      warnings.warn(f'Both `mxnet=={mx.__version__}` and `torch=={torch.__version__}` are installed. '




.. GENERATED FROM PYTHON SOURCE LINES 43-65

Preliminary and Set parameters
------------------------------
.. note::

  We support compiling SSD on both CPUs and GPUs now.

  To get best inference performance on CPU, change
  target argument according to your device and
  follow the :ref:`tune_relay_x86` to tune x86 CPU and
  :ref:`tune_relay_arm` for arm CPU.

  To get best inference performance on Intel graphics,
  change target argument to :code:`opencl -device=intel_graphics`.
  But when using Intel graphics on Mac, target needs to
  be set to `opencl` only for the reason that Intel subgroup
  extension is not supported on Mac.

  To get best inference performance on CUDA-based GPUs,
  change the target argument to :code:`cuda`; and for
  OPENCL-based GPUs, change target argument to
  :code:`opencl` followed by device argument according
  to your device.

.. GENERATED FROM PYTHON SOURCE LINES 65-78

.. code-block:: default


    supported_model = [
        "ssd_512_resnet50_v1_voc",
        "ssd_512_resnet50_v1_coco",
        "ssd_512_resnet101_v2_voc",
        "ssd_512_mobilenet1.0_voc",
        "ssd_512_mobilenet1.0_coco",
        "ssd_300_vgg16_atrous_voc" "ssd_512_vgg16_atrous_coco",
    ]

    model_name = supported_model[0]
    dshape = (1, 3, 512, 512)








.. GENERATED FROM PYTHON SOURCE LINES 79-80

Download and pre-process demo image

.. GENERATED FROM PYTHON SOURCE LINES 80-88

.. code-block:: default


    im_fname = download_testdata(
        "https://github.com/dmlc/web-data/blob/main/" + "gluoncv/detection/street_small.jpg?raw=true",
        "street_small.jpg",
        module="data",
    )
    x, img = data.transforms.presets.ssd.load_test(im_fname, short=512)








.. GENERATED FROM PYTHON SOURCE LINES 89-90

Convert and compile model for CPU.

.. GENERATED FROM PYTHON SOURCE LINES 90-101

.. code-block:: default


    block = model_zoo.get_model(model_name, pretrained=True)


    def build(target):
        mod, params = relay.frontend.from_mxnet(block, {"data": dshape})
        with tvm.transform.PassContext(opt_level=3):
            lib = relay.build(mod, target, params=params)
        return lib






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/local/lib/python3.7/dist-packages/mxnet/gluon/block.py:1389: UserWarning: Cannot decide type for the following arguments. Consider providing them as input:
            data: None
      input_sym_arg_type = in_param.infer_type()[0]
    Downloading /workspace/.mxnet/models/ssd_512_resnet50_v1_voc-9c8b225a.zip from https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/models/ssd_512_resnet50_v1_voc-9c8b225a.zip...
      0%|          | 0/132723 [00:00<?, ?KB/s]      0%|          | 17/132723 [00:00<19:31, 113.26KB/s]      0%|          | 68/132723 [00:00<08:26, 261.92KB/s]      0%|          | 157/132723 [00:00<04:49, 458.67KB/s]      0%|          | 287/132723 [00:00<03:05, 715.65KB/s]      0%|          | 514/132723 [00:00<01:51, 1186.94KB/s]      1%|          | 859/132723 [00:00<01:10, 1876.75KB/s]      1%|1         | 1469/132723 [00:00<00:41, 3155.03KB/s]      2%|1         | 2477/132723 [00:00<00:24, 5233.55KB/s]      3%|2         | 3597/132723 [00:01<00:18, 7014.52KB/s]      4%|3         | 4797/132723 [00:01<00:15, 8471.32KB/s]      5%|4         | 5997/132723 [00:01<00:13, 9491.19KB/s]      5%|5         | 7047/132723 [00:01<00:12, 9792.32KB/s]      6%|6         | 8157/132723 [00:01<00:12, 10152.25KB/s]      7%|7         | 9357/132723 [00:01<00:11, 10650.02KB/s]      8%|7         | 10452/132723 [00:01<00:11, 10739.17KB/s]      9%|8         | 11565/132723 [00:01<00:11, 10853.99KB/s]     10%|9         | 12701/132723 [00:01<00:10, 11001.36KB/s]     10%|#         | 13853/132723 [00:01<00:10, 11152.20KB/s]     11%|#1        | 14970/132723 [00:02<00:10, 10946.61KB/s]     12%|#2        | 16080/132723 [00:02<00:10, 10991.55KB/s]     13%|#2        | 17213/132723 [00:02<00:10, 11030.63KB/s]     14%|#3        | 18397/132723 [00:02<00:10, 11256.44KB/s]     15%|#4        | 19524/132723 [00:02<00:10, 11238.27KB/s]     16%|#5        | 20649/132723 [00:02<00:09, 11214.67KB/s]     16%|#6        | 21773/132723 [00:02<00:09, 11207.74KB/s]     17%|#7        | 22941/132723 [00:02<00:09, 11326.38KB/s]     18%|#8        | 24077/132723 [00:02<00:09, 11295.28KB/s]     19%|#8        | 25213/132723 [00:02<00:09, 11299.85KB/s]     20%|#9        | 26344/132723 [00:03<00:09, 11262.89KB/s]     21%|##        | 27517/132723 [00:03<00:09, 11390.38KB/s]     22%|##1       | 28657/132723 [00:03<00:09, 11294.78KB/s]     22%|##2       | 29789/132723 [00:03<00:09, 11300.53KB/s]     23%|##3       | 30920/132723 [00:03<00:09, 11252.58KB/s]     24%|##4       | 32093/132723 [00:03<00:08, 11374.74KB/s]     25%|##5       | 33231/132723 [00:03<00:08, 11333.74KB/s]     26%|##5       | 34365/132723 [00:03<00:08, 11271.38KB/s]     27%|##6       | 35493/132723 [00:03<00:08, 11245.18KB/s]     28%|##7       | 36681/132723 [00:03<00:08, 11433.75KB/s]     28%|##8       | 37825/132723 [00:04<00:08, 11338.35KB/s]     29%|##9       | 38960/132723 [00:04<00:08, 11285.98KB/s]     30%|###       | 40089/132723 [00:04<00:08, 11260.08KB/s]     31%|###1      | 41261/132723 [00:04<00:08, 11341.16KB/s]     32%|###1      | 42397/132723 [00:04<00:07, 11333.53KB/s]     33%|###2      | 43531/132723 [00:04<00:07, 11298.32KB/s]     34%|###3      | 44661/132723 [00:04<00:07, 11285.67KB/s]     35%|###4      | 45821/132723 [00:04<00:07, 11355.29KB/s]     35%|###5      | 46957/132723 [00:04<00:07, 11322.46KB/s]     36%|###6      | 48090/132723 [00:04<00:07, 11304.98KB/s]     37%|###7      | 49221/132723 [00:05<00:07, 11270.47KB/s]     38%|###7      | 50397/132723 [00:05<00:07, 11350.05KB/s]     39%|###8      | 51533/132723 [00:05<00:07, 11337.46KB/s]     40%|###9      | 52667/132723 [00:05<00:07, 11303.53KB/s]     41%|####      | 53798/132723 [00:05<00:06, 11282.47KB/s]     41%|####1     | 54973/132723 [00:05<00:06, 11372.73KB/s]     42%|####2     | 56111/132723 [00:05<00:06, 11350.28KB/s]     43%|####3     | 57246/132723 [00:05<00:06, 11271.98KB/s]     44%|####3     | 58381/132723 [00:05<00:06, 11268.88KB/s]     45%|####4     | 59549/132723 [00:05<00:06, 11358.80KB/s]     46%|####5     | 60685/132723 [00:06<00:06, 11344.89KB/s]     47%|####6     | 61820/132723 [00:06<00:06, 11293.51KB/s]     47%|####7     | 62957/132723 [00:06<00:06, 11236.50KB/s]     48%|####8     | 64134/132723 [00:06<00:06, 11394.58KB/s]     49%|####9     | 65274/132723 [00:06<00:05, 11361.21KB/s]     50%|#####     | 66411/132723 [00:06<00:05, 11294.91KB/s]     51%|#####     | 67541/132723 [00:06<00:05, 11247.32KB/s]     52%|#####1    | 68717/132723 [00:06<00:05, 11376.73KB/s]     53%|#####2    | 69855/132723 [00:06<00:05, 11345.27KB/s]     53%|#####3    | 70990/132723 [00:06<00:05, 11255.40KB/s]     54%|#####4    | 72125/132723 [00:07<00:05, 11255.24KB/s]     55%|#####5    | 73301/132723 [00:07<00:05, 11405.03KB/s]     56%|#####6    | 74442/132723 [00:07<00:05, 11361.72KB/s]     57%|#####6    | 75579/132723 [00:07<00:05, 11274.81KB/s]     58%|#####7    | 76717/132723 [00:07<00:04, 11229.86KB/s]     59%|#####8    | 77898/132723 [00:07<00:04, 11401.44KB/s]     60%|#####9    | 79039/132723 [00:07<00:04, 11334.71KB/s]     60%|######    | 80173/132723 [00:07<00:04, 11281.04KB/s]     61%|######1   | 81302/132723 [00:07<00:04, 11258.87KB/s]     62%|######2   | 82462/132723 [00:08<00:04, 11359.88KB/s]     63%|######2   | 83599/132723 [00:08<00:04, 11353.86KB/s]     64%|######3   | 84735/132723 [00:08<00:04, 11276.20KB/s]     65%|######4   | 85869/132723 [00:08<00:04, 11253.39KB/s]     66%|######5   | 87037/132723 [00:08<00:04, 11357.78KB/s]     66%|######6   | 88173/132723 [00:08<00:03, 11339.06KB/s]     67%|######7   | 89307/132723 [00:08<00:03, 11303.65KB/s]     68%|######8   | 90438/132723 [00:08<00:03, 11253.66KB/s]     69%|######9   | 91613/132723 [00:08<00:03, 11351.87KB/s]     70%|######9   | 92764/132723 [00:08<00:03, 11398.62KB/s]     71%|#######   | 93904/132723 [00:09<00:03, 11257.73KB/s]     72%|#######1  | 95037/132723 [00:09<00:03, 11269.75KB/s]     72%|#######2  | 96205/132723 [00:09<00:03, 11359.21KB/s]     73%|#######3  | 97342/132723 [00:09<00:03, 11325.13KB/s]     74%|#######4  | 98475/132723 [00:09<00:03, 11313.14KB/s]     75%|#######5  | 99613/132723 [00:09<00:02, 11259.35KB/s]     76%|#######5  | 100781/132723 [00:09<00:02, 11331.10KB/s]     77%|#######6  | 101933/132723 [00:09<00:02, 11346.78KB/s]     78%|#######7  | 103068/132723 [00:09<00:02, 11314.44KB/s]     79%|#######8  | 104205/132723 [00:09<00:02, 11256.23KB/s]     79%|#######9  | 105357/132723 [00:10<00:02, 11309.45KB/s]     80%|########  | 106525/132723 [00:10<00:02, 11371.43KB/s]     81%|########1 | 107663/132723 [00:10<00:02, 11318.92KB/s]     82%|########1 | 108795/132723 [00:10<00:02, 11283.92KB/s]     83%|########2 | 109949/132723 [00:10<00:02, 11317.71KB/s]     84%|########3 | 111101/132723 [00:10<00:01, 11332.34KB/s]     85%|########4 | 112235/132723 [00:10<00:01, 11322.83KB/s]     85%|########5 | 113373/132723 [00:10<00:01, 11259.84KB/s]     86%|########6 | 114541/132723 [00:10<00:01, 11342.06KB/s]     87%|########7 | 115677/132723 [00:10<00:01, 11346.29KB/s]     88%|########8 | 116812/132723 [00:11<00:01, 11340.00KB/s]     89%|########8 | 117949/132723 [00:11<00:01, 11330.51KB/s]     90%|########9 | 119083/132723 [00:11<00:01, 11131.21KB/s]     91%|######### | 120285/132723 [00:11<00:01, 11383.85KB/s]     91%|#########1| 121425/132723 [00:11<00:00, 11344.48KB/s]     92%|#########2| 122561/132723 [00:11<00:00, 11292.93KB/s]     93%|#########3| 123691/132723 [00:11<00:00, 11174.40KB/s]     94%|#########4| 124909/132723 [00:11<00:00, 11413.51KB/s]     95%|#########4| 126051/132723 [00:11<00:00, 11373.39KB/s]     96%|#########5| 127189/132723 [00:11<00:00, 11325.11KB/s]     97%|#########6| 128322/132723 [00:12<00:00, 11182.17KB/s]     98%|#########7| 129533/132723 [00:12<00:00, 11451.33KB/s]     98%|#########8| 130679/132723 [00:12<00:00, 11342.35KB/s]     99%|#########9| 131814/132723 [00:12<00:00, 11316.81KB/s]    100%|##########| 132723/132723 [00:12<00:00, 10666.32KB/s]




.. GENERATED FROM PYTHON SOURCE LINES 102-107

Create TVM runtime and do inference
.. note::

  Use target = "cuda -libs" to enable thrust based sort, if you
  enabled thrust during cmake by -DUSE_THRUST=ON.

.. GENERATED FROM PYTHON SOURCE LINES 107-127

.. code-block:: default



    def run(lib, dev):
        # Build TVM runtime
        m = graph_executor.GraphModule(lib["default"](dev))
        tvm_input = tvm.nd.array(x.asnumpy(), device=dev)
        m.set_input("data", tvm_input)
        # execute
        m.run()
        # get outputs
        class_IDs, scores, bounding_boxs = m.get_output(0), m.get_output(1), m.get_output(2)
        return class_IDs, scores, bounding_boxs


    for target in ["llvm", "cuda"]:
        dev = tvm.device(target, 0)
        if dev.exist:
            lib = build(target)
            class_IDs, scores, bounding_boxs = run(lib, dev)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /workspace/python/tvm/driver/build_module.py:268: UserWarning: target_host parameter is going to be deprecated. Please pass in tvm.target.Target(target, host=target_host) instead.
      "target_host parameter is going to be deprecated. "




.. GENERATED FROM PYTHON SOURCE LINES 128-129

Display result

.. GENERATED FROM PYTHON SOURCE LINES 129-138

.. code-block:: default


    ax = utils.viz.plot_bbox(
        img,
        bounding_boxs.numpy()[0],
        scores.numpy()[0],
        class_IDs.numpy()[0],
        class_names=block.classes,
    )
    plt.show()



.. image-sg:: /how_to/deploy_models/images/sphx_glr_deploy_ssd_gluoncv_001.png
   :alt: deploy ssd gluoncv
   :srcset: /how_to/deploy_models/images/sphx_glr_deploy_ssd_gluoncv_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  43.545 seconds)


.. _sphx_glr_download_how_to_deploy_models_deploy_ssd_gluoncv.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: deploy_ssd_gluoncv.py <deploy_ssd_gluoncv.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: deploy_ssd_gluoncv.ipynb <deploy_ssd_gluoncv.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
