.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_how_to_deploy_models_deploy_object_detection_pytorch.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_deploy_models_deploy_object_detection_pytorch.py:


Compile PyTorch Object Detection Models
=======================================
This article is an introductory tutorial to deploy PyTorch object
detection models with Relay VM.

For us to begin with, PyTorch should be installed.
TorchVision is also required since we will be using it as our model zoo.

A quick solution is to install via pip

.. code-block:: bash

    pip install torch==1.7.0
    pip install torchvision==0.8.1

or please refer to official site
https://pytorch.org/get-started/locally/

PyTorch versions should be backwards compatible but should be used
with the proper TorchVision version.

Currently, TVM supports PyTorch 1.7 and 1.4. Other versions may
be unstable.


.. code-block:: default


    import tvm
    from tvm import relay
    from tvm import relay
    from tvm.runtime.vm import VirtualMachine
    from tvm.contrib.download import download_testdata

    import numpy as np
    import cv2

    # PyTorch imports
    import torch
    import torchvision







Load pre-trained maskrcnn from torchvision and do tracing
---------------------------------------------------------


.. code-block:: default

    in_size = 300

    input_shape = (1, 3, in_size, in_size)


    def do_trace(model, inp):
        model_trace = torch.jit.trace(model, inp)
        model_trace.eval()
        return model_trace


    def dict_to_tuple(out_dict):
        if "masks" in out_dict.keys():
            return out_dict["boxes"], out_dict["scores"], out_dict["labels"], out_dict["masks"]
        return out_dict["boxes"], out_dict["scores"], out_dict["labels"]


    class TraceWrapper(torch.nn.Module):
        def __init__(self, model):
            super().__init__()
            self.model = model

        def forward(self, inp):
            out = self.model(inp)
            return dict_to_tuple(out[0])


    model_func = torchvision.models.detection.maskrcnn_resnet50_fpn
    model = TraceWrapper(model_func(pretrained=True))

    model.eval()
    inp = torch.Tensor(np.random.uniform(0.0, 250.0, size=(1, 3, in_size, in_size)))

    with torch.no_grad():
        out = model(inp)
        script_module = do_trace(model, inp)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/maskrcnn_resnet50_fpn_coco-bf2d0c1e.pth" to /workspace/.cache/torch/hub/checkpoints/maskrcnn_resnet50_fpn_coco-bf2d0c1e.pth
      0%|          | 0.00/170M [00:00<?, ?B/s]      1%|1         | 2.25M/170M [00:00<00:07, 22.5MB/s]      3%|3         | 5.12M/170M [00:00<00:06, 26.4MB/s]      6%|5         | 9.80M/170M [00:00<00:04, 36.5MB/s]      8%|7         | 13.4M/170M [00:00<00:04, 36.7MB/s]     10%|#         | 17.5M/170M [00:00<00:04, 39.1MB/s]     13%|#2        | 21.6M/170M [00:00<00:03, 40.3MB/s]     15%|#5        | 25.7M/170M [00:00<00:03, 41.0MB/s]     17%|#7        | 29.7M/170M [00:00<00:04, 34.6MB/s]     20%|#9        | 33.4M/170M [00:00<00:04, 35.6MB/s]     22%|##1       | 36.9M/170M [00:01<00:04, 30.2MB/s]     24%|##3       | 40.4M/170M [00:01<00:04, 31.7MB/s]     26%|##5       | 43.5M/170M [00:01<00:04, 29.5MB/s]     28%|##8       | 47.6M/170M [00:01<00:03, 32.8MB/s]     30%|###       | 51.7M/170M [00:01<00:03, 35.5MB/s]     33%|###2      | 55.2M/170M [00:01<00:03, 34.7MB/s]     35%|###4      | 59.4M/170M [00:01<00:03, 35.6MB/s]     37%|###7      | 62.8M/170M [00:01<00:03, 35.2MB/s]     39%|###9      | 67.0M/170M [00:02<00:02, 37.5MB/s]     42%|####1     | 70.6M/170M [00:02<00:02, 37.4MB/s]     44%|####3     | 74.2M/170M [00:02<00:02, 35.0MB/s]     46%|####5     | 77.6M/170M [00:02<00:03, 31.4MB/s]     49%|####8     | 82.6M/170M [00:02<00:02, 35.2MB/s]     51%|#####     | 86.0M/170M [00:02<00:02, 34.1MB/s]     53%|#####2    | 89.3M/170M [00:02<00:02, 32.3MB/s]     55%|#####4    | 93.0M/170M [00:02<00:02, 33.9MB/s]     57%|#####7    | 97.2M/170M [00:02<00:02, 36.8MB/s]     60%|#####9    | 101M/170M [00:03<00:01, 37.8MB/s]      62%|######2   | 106M/170M [00:03<00:01, 41.4MB/s]     65%|######5   | 111M/170M [00:03<00:01, 44.7MB/s]     68%|######7   | 115M/170M [00:03<00:01, 42.6MB/s]     70%|#######   | 120M/170M [00:03<00:01, 37.6MB/s]     73%|#######2  | 123M/170M [00:03<00:01, 36.6MB/s]     76%|#######5  | 129M/170M [00:03<00:01, 42.3MB/s]     78%|#######8  | 133M/170M [00:03<00:00, 41.5MB/s]     81%|########1 | 138M/170M [00:03<00:00, 43.5MB/s]     84%|########3 | 143M/170M [00:04<00:00, 44.9MB/s]     87%|########6 | 147M/170M [00:04<00:00, 45.5MB/s]     89%|########9 | 152M/170M [00:04<00:00, 44.7MB/s]     92%|#########2| 156M/170M [00:04<00:00, 45.6MB/s]     95%|#########4| 161M/170M [00:04<00:00, 41.0MB/s]     98%|#########7| 166M/170M [00:04<00:00, 44.6MB/s]    100%|##########| 170M/170M [00:04<00:00, 37.9MB/s]
    /usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:3878: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      for i in range(dim)
    /usr/local/lib/python3.7/dist-packages/torchvision/models/detection/anchor_utils.py:127: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
      for g in grid_sizes
    /usr/local/lib/python3.7/dist-packages/torchvision/models/detection/anchor_utils.py:127: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      for g in grid_sizes
    /usr/local/lib/python3.7/dist-packages/torchvision/models/detection/rpn.py:73: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
      A = Ax4 // 4
    /usr/local/lib/python3.7/dist-packages/torchvision/models/detection/rpn.py:74: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
      C = AxC // A
    /usr/local/lib/python3.7/dist-packages/torchvision/ops/boxes.py:156: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      boxes_x = torch.min(boxes_x, torch.tensor(width, dtype=boxes.dtype, device=boxes.device))
    /usr/local/lib/python3.7/dist-packages/torchvision/ops/boxes.py:158: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      boxes_y = torch.min(boxes_y, torch.tensor(height, dtype=boxes.dtype, device=boxes.device))
    /usr/local/lib/python3.7/dist-packages/torchvision/models/detection/transform.py:293: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      for s, s_orig in zip(new_size, original_size)
    /usr/local/lib/python3.7/dist-packages/torchvision/models/detection/roi_heads.py:387: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      return torch.tensor(M + 2 * padding).to(torch.float32) / torch.tensor(M).to(torch.float32)



Download a test image and pre-process
-------------------------------------


.. code-block:: default

    img_url = (
        "https://raw.githubusercontent.com/dmlc/web-data/" "master/gluoncv/detection/street_small.jpg"
    )
    img_path = download_testdata(img_url, "test_street_small.jpg", module="data")

    img = cv2.imread(img_path).astype("float32")
    img = cv2.resize(img, (in_size, in_size))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = np.transpose(img / 255.0, [2, 0, 1])
    img = np.expand_dims(img, axis=0)







Import the graph to Relay
-------------------------


.. code-block:: default

    input_name = "input0"
    shape_list = [(input_name, input_shape)]
    mod, params = relay.frontend.from_pytorch(script_module, shape_list)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /workspace/python/tvm/relay/build_module.py:439: DeprecationWarning: Please use input parameter mod (tvm.IRModule) instead of deprecated parameter mod (tvm.relay.function.Function)
      DeprecationWarning,



Compile with Relay VM
---------------------
Note: Currently only CPU target is supported. For x86 target, it is
highly recommended to build TVM with Intel MKL and Intel OpenMP to get
best performance, due to the existence of large dense operator in
torchvision rcnn models.


.. code-block:: default


    # Add "-libs=mkl" to get best performance on x86 target.
    # For x86 machine supports AVX512, the complete target is
    # "llvm -mcpu=skylake-avx512 -libs=mkl"
    target = "llvm"

    with tvm.transform.PassContext(opt_level=3, disabled_pass=["FoldScaleAxis"]):
        vm_exec = relay.vm.compile(mod, target=target, params=params)







Inference with Relay VM
-----------------------


.. code-block:: default

    dev = tvm.cpu()
    vm = VirtualMachine(vm_exec, dev)
    vm.set_input("main", **{input_name: img})
    tvm_res = vm.run()







Get boxes with score larger than 0.9
------------------------------------


.. code-block:: default

    score_threshold = 0.9
    boxes = tvm_res[0].numpy().tolist()
    valid_boxes = []
    for i, score in enumerate(tvm_res[1].numpy().tolist()):
        if score > score_threshold:
            valid_boxes.append(boxes[i])
        else:
            break

    print("Get {} valid boxes".format(len(valid_boxes)))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get 9 valid boxes




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  7.160 seconds)


.. _sphx_glr_download_how_to_deploy_models_deploy_object_detection_pytorch.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: deploy_object_detection_pytorch.py <deploy_object_detection_pytorch.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: deploy_object_detection_pytorch.ipynb <deploy_object_detection_pytorch.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
