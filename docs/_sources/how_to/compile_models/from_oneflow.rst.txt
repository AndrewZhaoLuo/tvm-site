
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/compile_models/from_oneflow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_compile_models_from_oneflow.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_compile_models_from_oneflow.py:


Compile OneFlow Models
======================
**Author**: `Xiaoyu Zhang <https://github.com/BBuf/>`_

This article is an introductory tutorial to deploy OneFlow models with Relay.

For us to begin with, OneFlow package should be installed.

A quick solution is to install via pip

.. code-block:: bash

    pip install flowvision==0.1.0
    python3 -m pip install -f https://release.oneflow.info oneflow==0.7.0+cpu

or please refer to official site:
https://github.com/Oneflow-Inc/oneflow

Currently, TVM supports OneFlow 0.7.0. Other versions may be unstable.

.. GENERATED FROM PYTHON SOURCE LINES 38-52

.. code-block:: default

    import os, math
    from matplotlib import pyplot as plt
    import numpy as np
    from PIL import Image

    # oneflow imports
    import flowvision
    import oneflow as flow
    import oneflow.nn as nn

    import tvm
    from tvm import relay
    from tvm.contrib.download import download_testdata





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional_pil.py:193: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      def resize(img, size, interpolation=Image.BILINEAR):
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:65: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
      Image.NEAREST: "nearest",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:66: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      Image.BILINEAR: "bilinear",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:67: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
      Image.BICUBIC: "bicubic",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:68: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
      Image.BOX: "box",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:69: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
      Image.HAMMING: "hamming",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:70: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
      Image.LANCZOS: "lanczos",
    /usr/local/lib/python3.7/dist-packages/flowvision/data/auto_augment.py:28: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      _RANDOM_INTERPOLATION = (Image.BILINEAR, Image.BICUBIC)
    /usr/local/lib/python3.7/dist-packages/flowvision/data/auto_augment.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
      _RANDOM_INTERPOLATION = (Image.BILINEAR, Image.BICUBIC)




.. GENERATED FROM PYTHON SOURCE LINES 53-55

Load a pretrained OneFlow model and save model
----------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 55-63

.. code-block:: default

    model_name = "resnet18"
    model = getattr(flowvision.models, model_name)(pretrained=True)
    model = model.eval()

    model_dir = "resnet18_model"
    if not os.path.exists(model_dir):
        flow.save(model.state_dict(), model_dir)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://oneflow-public.oss-cn-beijing.aliyuncs.com/model_zoo/flowvision/classification/ResNet/resnet18.zip" to /workspace/.oneflow/flowvision_cache/resnet18.zip
      0%|          | 0.00/41.5M [00:00<?, ?B/s]      0%|          | 16.0k/41.5M [00:00<08:17, 87.5kB/s]      0%|          | 32.0k/41.5M [00:00<08:18, 87.2kB/s]      0%|          | 48.0k/41.5M [00:00<08:18, 87.1kB/s]      0%|          | 64.0k/41.5M [00:00<08:18, 87.1kB/s]      0%|          | 80.0k/41.5M [00:00<08:19, 87.0kB/s]      0%|          | 96.0k/41.5M [00:01<08:18, 87.0kB/s]      0%|          | 112k/41.5M [00:01<08:18, 87.0kB/s]       0%|          | 128k/41.5M [00:01<08:18, 87.0kB/s]      0%|          | 144k/41.5M [00:01<08:18, 87.0kB/s]      0%|          | 168k/41.5M [00:01<07:11, 100kB/s]       0%|          | 184k/41.5M [00:02<07:29, 96.3kB/s]      0%|          | 208k/41.5M [00:02<06:45, 107kB/s]       1%|          | 232k/41.5M [00:02<06:19, 114kB/s]      1%|          | 256k/41.5M [00:02<06:03, 119kB/s]      1%|          | 280k/41.5M [00:02<05:53, 122kB/s]      1%|          | 304k/41.5M [00:03<05:45, 125kB/s]      1%|          | 336k/41.5M [00:03<05:09, 140kB/s]      1%|          | 368k/41.5M [00:03<04:47, 150kB/s]      1%|          | 400k/41.5M [00:03<04:34, 157kB/s]      1%|1         | 440k/41.5M [00:03<04:05, 175kB/s]      1%|1         | 480k/41.5M [00:03<03:48, 188kB/s]      1%|1         | 528k/41.5M [00:04<03:24, 210kB/s]      1%|1         | 584k/41.5M [00:04<03:00, 238kB/s]      2%|1         | 640k/41.5M [00:04<02:45, 258kB/s]      2%|1         | 696k/41.5M [00:04<02:37, 272kB/s]      2%|1         | 768k/41.5M [00:04<02:18, 308kB/s]      2%|1         | 848k/41.5M [00:05<02:03, 346kB/s]      2%|2         | 928k/41.5M [00:05<01:54, 373kB/s]      2%|2         | 1.00M/41.5M [00:05<01:41, 418kB/s]      3%|2         | 1.10M/41.5M [00:05<01:31, 461kB/s]      3%|2         | 1.15M/41.5M [00:06<02:48, 250kB/s]      3%|3         | 1.43M/41.5M [00:06<01:19, 529kB/s]      4%|3         | 1.52M/41.5M [00:06<01:21, 516kB/s]      4%|3         | 1.60M/41.5M [00:06<01:22, 507kB/s]      4%|4         | 1.69M/41.5M [00:06<01:23, 500kB/s]      4%|4         | 1.79M/41.5M [00:07<01:20, 517kB/s]      5%|4         | 1.88M/41.5M [00:07<01:19, 519kB/s]      5%|4         | 1.98M/41.5M [00:07<01:17, 533kB/s]      5%|5         | 2.09M/41.5M [00:07<01:16, 542kB/s]      5%|5         | 2.20M/41.5M [00:07<01:13, 562kB/s]      6%|5         | 2.30M/41.5M [00:08<01:13, 563kB/s]      6%|5         | 2.41M/41.5M [00:08<01:11, 577kB/s]      6%|6         | 2.52M/41.5M [00:08<01:09, 586kB/s]      6%|6         | 2.63M/41.5M [00:08<01:07, 606kB/s]      7%|6         | 2.74M/41.5M [00:08<01:06, 607kB/s]      7%|6         | 2.85M/41.5M [00:09<01:06, 608kB/s]      7%|7         | 2.97M/41.5M [00:09<01:05, 621kB/s]      7%|7         | 3.09M/41.5M [00:09<01:03, 631kB/s]      8%|7         | 3.20M/41.5M [00:09<01:04, 624kB/s]      8%|7         | 3.31M/41.5M [00:09<01:03, 633kB/s]      8%|8         | 3.43M/41.5M [00:09<01:02, 639kB/s]      9%|8         | 3.54M/41.5M [00:10<01:03, 630kB/s]      9%|8         | 3.66M/41.5M [00:10<01:02, 637kB/s]      9%|9         | 3.77M/41.5M [00:10<01:02, 628kB/s]      9%|9         | 3.88M/41.5M [00:10<01:02, 636kB/s]     10%|9         | 3.99M/41.5M [00:10<01:02, 628kB/s]     10%|9         | 4.11M/41.5M [00:11<01:01, 635kB/s]     10%|#         | 4.23M/41.5M [00:11<01:01, 641kB/s]     10%|#         | 4.34M/41.5M [00:11<01:01, 631kB/s]     11%|#         | 4.45M/41.5M [00:11<01:00, 638kB/s]     11%|#1        | 4.57M/41.5M [00:11<01:00, 642kB/s]     11%|#1        | 4.69M/41.5M [00:12<00:59, 645kB/s]     12%|#1        | 4.80M/41.5M [00:12<00:59, 648kB/s]     12%|#1        | 4.92M/41.5M [00:12<00:59, 649kB/s]     12%|#2        | 5.04M/41.5M [00:12<00:58, 650kB/s]     12%|#2        | 5.16M/41.5M [00:12<00:58, 651kB/s]     13%|#2        | 5.28M/41.5M [00:12<00:57, 665kB/s]     13%|#3        | 5.41M/41.5M [00:13<00:56, 674kB/s]     13%|#3        | 5.53M/41.5M [00:13<00:55, 681kB/s]     14%|#3        | 5.66M/41.5M [00:13<00:53, 698kB/s]     14%|#3        | 5.80M/41.5M [00:13<00:52, 711kB/s]     14%|#4        | 5.94M/41.5M [00:13<00:50, 732kB/s]     15%|#4        | 6.08M/41.5M [00:14<00:49, 748kB/s]     15%|#4        | 6.22M/41.5M [00:14<00:48, 758kB/s]     15%|#5        | 6.37M/41.5M [00:14<00:47, 779kB/s]     16%|#5        | 6.52M/41.5M [00:14<00:45, 806kB/s]     16%|#6        | 6.69M/41.5M [00:14<00:43, 839kB/s]     17%|#6        | 6.85M/41.5M [00:15<00:42, 861kB/s]     17%|#6        | 7.03M/41.5M [00:15<00:40, 903kB/s]     17%|#7        | 7.21M/41.5M [00:15<00:38, 932kB/s]     18%|#7        | 7.41M/41.5M [00:15<00:36, 979kB/s]     18%|#8        | 7.60M/41.5M [00:15<00:35, 1.01MB/s]     19%|#8        | 7.81M/41.5M [00:16<00:33, 1.06MB/s]     19%|#9        | 8.02M/41.5M [00:16<00:32, 1.10MB/s]     20%|#9        | 8.26M/41.5M [00:16<00:30, 1.16MB/s]     20%|##        | 8.49M/41.5M [00:16<00:28, 1.20MB/s]     21%|##1       | 8.74M/41.5M [00:16<00:27, 1.26MB/s]     22%|##1       | 9.01M/41.5M [00:16<00:25, 1.33MB/s]     22%|##2       | 9.28M/41.5M [00:17<00:24, 1.38MB/s]     23%|##3       | 9.57M/41.5M [00:17<00:23, 1.45MB/s]     24%|##3       | 9.87M/41.5M [00:17<00:21, 1.51MB/s]     25%|##4       | 10.2M/41.5M [00:17<00:20, 1.58MB/s]     25%|##5       | 10.5M/41.5M [00:17<00:19, 1.67MB/s]     26%|##6       | 10.9M/41.5M [00:18<00:18, 1.77MB/s]     27%|##7       | 11.2M/41.5M [00:18<00:17, 1.85MB/s]     28%|##8       | 11.6M/41.5M [00:18<00:16, 1.95MB/s]     29%|##9       | 12.0M/41.5M [00:18<00:15, 2.06MB/s]     30%|###       | 12.5M/41.5M [00:18<00:14, 2.17MB/s]     31%|###1      | 12.9M/41.5M [00:19<00:13, 2.28MB/s]     32%|###2      | 13.4M/41.5M [00:19<00:12, 2.39MB/s]     34%|###3      | 13.9M/41.5M [00:19<00:11, 2.51MB/s]     35%|###4      | 14.4M/41.5M [00:19<00:10, 2.62MB/s]     36%|###6      | 15.0M/41.5M [00:19<00:10, 2.76MB/s]     38%|###7      | 15.6M/41.5M [00:19<00:09, 2.90MB/s]     39%|###8      | 16.2M/41.5M [00:20<00:08, 3.06MB/s]     41%|####      | 16.8M/41.5M [00:20<00:08, 3.21MB/s]     42%|####2     | 17.5M/41.5M [00:20<00:07, 3.37MB/s]     44%|####3     | 18.2M/41.5M [00:20<00:06, 3.53MB/s]     46%|####5     | 18.9M/41.5M [00:20<00:06, 3.70MB/s]     47%|####7     | 19.7M/41.5M [00:21<00:05, 3.87MB/s]     49%|####9     | 20.5M/41.5M [00:21<00:04, 4.42MB/s]     51%|#####1    | 21.2M/41.5M [00:21<00:04, 5.06MB/s]     52%|#####2    | 21.7M/41.5M [00:21<00:04, 4.66MB/s]     54%|#####3    | 22.2M/41.5M [00:21<00:05, 3.98MB/s]     56%|#####5    | 23.0M/41.5M [00:21<00:04, 4.70MB/s]     58%|#####7    | 23.9M/41.5M [00:21<00:03, 5.57MB/s]     59%|#####8    | 24.5M/41.5M [00:22<00:03, 5.12MB/s]     60%|######    | 25.0M/41.5M [00:22<00:03, 4.91MB/s]     62%|######2   | 25.9M/41.5M [00:22<00:02, 6.01MB/s]     64%|######3   | 26.5M/41.5M [00:22<00:02, 5.46MB/s]     65%|######5   | 27.1M/41.5M [00:22<00:02, 5.30MB/s]     68%|######7   | 28.1M/41.5M [00:22<00:02, 6.58MB/s]     69%|######9   | 28.8M/41.5M [00:22<00:02, 5.94MB/s]     71%|#######   | 29.4M/41.5M [00:22<00:02, 5.76MB/s]     74%|#######3  | 30.5M/41.5M [00:23<00:01, 7.16MB/s]     75%|#######5  | 31.3M/41.5M [00:23<00:01, 6.45MB/s]     77%|#######7  | 32.0M/41.5M [00:23<00:01, 6.23MB/s]     80%|#######9  | 33.1M/41.5M [00:23<00:01, 7.76MB/s]     82%|########1 | 33.9M/41.5M [00:23<00:01, 6.96MB/s]     84%|########3 | 34.7M/41.5M [00:23<00:01, 6.73MB/s]     87%|########6 | 35.9M/41.5M [00:23<00:00, 8.30MB/s]     89%|########8 | 36.8M/41.5M [00:23<00:00, 7.44MB/s]     90%|######### | 37.5M/41.5M [00:24<00:00, 7.20MB/s]     94%|#########3| 38.9M/41.5M [00:24<00:00, 8.84MB/s]     96%|#########5| 39.8M/41.5M [00:24<00:00, 7.91MB/s]     98%|#########7| 40.6M/41.5M [00:24<00:00, 6.69MB/s]    100%|##########| 41.5M/41.5M [00:24<00:00, 1.78MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 64-67

Load a test image
-----------------
Classic cat example!

.. GENERATED FROM PYTHON SOURCE LINES 67-87

.. code-block:: default

    from PIL import Image

    img_url = "https://github.com/dmlc/mxnet.js/blob/main/data/cat.png?raw=true"
    img_path = download_testdata(img_url, "cat.png", module="data")
    img = Image.open(img_path).resize((224, 224))

    # Preprocess the image and convert to tensor
    from flowvision import transforms

    my_preprocess = transforms.Compose(
        [
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
        ]
    )
    img = my_preprocess(img)
    img = np.expand_dims(img.numpy(), 0)








.. GENERATED FROM PYTHON SOURCE LINES 88-91

Import the graph to Relay
-------------------------
Convert OneFlow graph to Relay graph. The input name can be arbitrary.

.. GENERATED FROM PYTHON SOURCE LINES 91-106

.. code-block:: default

    class Graph(flow.nn.Graph):
        def __init__(self, module):
            super().__init__()
            self.m = module

        def build(self, x):
            out = self.m(x)
            return out


    graph = Graph(model)
    _ = graph._compile(flow.randn(1, 3, 224, 224))

    mod, params = relay.frontend.from_oneflow(graph, model_dir)








.. GENERATED FROM PYTHON SOURCE LINES 107-110

Relay Build
-----------
Compile the graph to llvm target with given input specification.

.. GENERATED FROM PYTHON SOURCE LINES 110-115

.. code-block:: default

    target = tvm.target.Target("llvm", host="llvm")
    dev = tvm.cpu(0)
    with tvm.transform.PassContext(opt_level=3):
        lib = relay.build(mod, target=target, params=params)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /workspace/python/tvm/driver/build_module.py:264: UserWarning: target_host parameter is going to be deprecated. Please pass in tvm.target.Target(target, host=target_host) instead.
      "target_host parameter is going to be deprecated. "




.. GENERATED FROM PYTHON SOURCE LINES 116-119

Execute the portable graph on TVM
---------------------------------
Now we can try deploying the compiled model on target.

.. GENERATED FROM PYTHON SOURCE LINES 119-127

.. code-block:: default

    target = "cuda"
    with tvm.transform.PassContext(opt_level=10):
        intrp = relay.build_module.create_executor("graph", mod, tvm.cuda(0), target)

    print(type(img))
    print(img.shape)
    tvm_output = intrp.evaluate()(tvm.nd.array(img.astype("float32")), **params)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'numpy.ndarray'>
    (1, 3, 224, 224)




.. GENERATED FROM PYTHON SOURCE LINES 128-131

Look up synset name
-------------------
Look up prediction top 1 index in 1000 class synset.

.. GENERATED FROM PYTHON SOURCE LINES 131-178

.. code-block:: default

    synset_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_synsets.txt",
        ]
    )
    synset_name = "imagenet_synsets.txt"
    synset_path = download_testdata(synset_url, synset_name, module="data")
    with open(synset_path) as f:
        synsets = f.readlines()

    synsets = [x.strip() for x in synsets]
    splits = [line.split(" ") for line in synsets]
    key_to_classname = {spl[0]: " ".join(spl[1:]) for spl in splits}

    class_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_classes.txt",
        ]
    )
    class_name = "imagenet_classes.txt"
    class_path = download_testdata(class_url, class_name, module="data")
    with open(class_path) as f:
        class_id_to_key = f.readlines()

    class_id_to_key = [x.strip() for x in class_id_to_key]

    # Get top-1 result for TVM
    top1_tvm = np.argmax(tvm_output.numpy()[0])
    tvm_class_key = class_id_to_key[top1_tvm]

    # Convert input to OneFlow variable and get OneFlow result for comparison
    with flow.no_grad():
        torch_img = flow.from_numpy(img)
        output = model(torch_img)

        # Get top-1 result for OneFlow
        top_oneflow = np.argmax(output.numpy())
        oneflow_class_key = class_id_to_key[top_oneflow]

    print("Relay top-1 id: {}, class name: {}".format(top1_tvm, key_to_classname[tvm_class_key]))
    print(
        "OneFlow top-1 id: {}, class name: {}".format(top_oneflow, key_to_classname[oneflow_class_key])
    )




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Relay top-1 id: 281, class name: tabby, tabby cat
    OneFlow top-1 id: 281, class name: tabby, tabby cat





.. _sphx_glr_download_how_to_compile_models_from_oneflow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: from_oneflow.py <from_oneflow.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: from_oneflow.ipynb <from_oneflow.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
