.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_how_to_compile_models_from_oneflow.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_compile_models_from_oneflow.py:


Compile OneFlow Models
======================
**Author**: `Xiaoyu Zhang <https://github.com/BBuf/>`_

This article is an introductory tutorial to deploy OneFlow models with Relay.

For us to begin with, OneFlow package should be installed.

A quick solution is to install via pip

.. code-block:: bash

    pip install flowvision==0.1.0
    python3 -m pip install -f https://release.oneflow.info oneflow==0.7.0+cpu

or please refer to official site:
https://github.com/Oneflow-Inc/oneflow

Currently, TVM supports OneFlow 0.7.0. Other versions may be unstable.


.. code-block:: default

    import os, math
    from matplotlib import pyplot as plt
    import numpy as np
    from PIL import Image

    # oneflow imports
    import flowvision
    import oneflow as flow
    import oneflow.nn as nn

    import tvm
    from tvm import relay
    from tvm.contrib.download import download_testdata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional_pil.py:193: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      def resize(img, size, interpolation=Image.BILINEAR):
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:65: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
      Image.NEAREST: "nearest",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:66: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      Image.BILINEAR: "bilinear",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:67: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
      Image.BICUBIC: "bicubic",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:68: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
      Image.BOX: "box",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:69: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
      Image.HAMMING: "hamming",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:70: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
      Image.LANCZOS: "lanczos",
    /usr/local/lib/python3.7/dist-packages/flowvision/data/auto_augment.py:28: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      _RANDOM_INTERPOLATION = (Image.BILINEAR, Image.BICUBIC)
    /usr/local/lib/python3.7/dist-packages/flowvision/data/auto_augment.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
      _RANDOM_INTERPOLATION = (Image.BILINEAR, Image.BICUBIC)



Load a pretrained OneFlow model and save model
----------------------------------------------


.. code-block:: default

    model_name = "resnet18"
    model = getattr(flowvision.models, model_name)(pretrained=True)
    model = model.eval()

    model_dir = "resnet18_model"
    if not os.path.exists(model_dir):
        flow.save(model.state_dict(), model_dir)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Downloading: "https://oneflow-public.oss-cn-beijing.aliyuncs.com/model_zoo/flowvision/classification/ResNet/resnet18.zip" to /workspace/.oneflow/flowvision_cache/resnet18.zip
      0%|          | 0.00/41.5M [00:00<?, ?B/s]      0%|          | 16.0k/41.5M [00:00<10:38, 68.1kB/s]      0%|          | 48.0k/41.5M [00:00<06:46, 107kB/s]       0%|          | 96.0k/41.5M [00:00<04:42, 153kB/s]      0%|          | 152k/41.5M [00:00<03:40, 197kB/s]       1%|          | 224k/41.5M [00:01<02:54, 248kB/s]      1%|          | 336k/41.5M [00:01<02:07, 338kB/s]      1%|1         | 440k/41.5M [00:01<01:53, 379kB/s]      1%|1         | 552k/41.5M [00:01<01:44, 412kB/s]      2%|1         | 664k/41.5M [00:02<01:39, 431kB/s]      2%|1         | 768k/41.5M [00:02<01:38, 436kB/s]      2%|2         | 888k/41.5M [00:02<01:32, 459kB/s]      2%|2         | 992k/41.5M [00:02<01:33, 452kB/s]      3%|2         | 1.08M/41.5M [00:03<01:31, 463kB/s]      3%|2         | 1.20M/41.5M [00:03<01:28, 479kB/s]      3%|3         | 1.30M/41.5M [00:03<01:28, 478kB/s]      3%|3         | 1.42M/41.5M [00:03<01:26, 487kB/s]      4%|3         | 1.55M/41.5M [00:04<01:23, 503kB/s]      4%|4         | 1.67M/41.5M [00:04<01:20, 516kB/s]      4%|4         | 1.80M/41.5M [00:04<01:19, 525kB/s]      5%|4         | 1.93M/41.5M [00:04<01:16, 543kB/s]      5%|4         | 2.07M/41.5M [00:04<01:13, 564kB/s]      5%|5         | 2.21M/41.5M [00:05<01:11, 577kB/s]      6%|5         | 2.37M/41.5M [00:05<01:07, 611kB/s]      6%|6         | 2.52M/41.5M [00:05<01:04, 633kB/s]      6%|6         | 2.69M/41.5M [00:05<01:02, 655kB/s]      7%|6         | 2.87M/41.5M [00:06<00:58, 690kB/s]      7%|7         | 3.05M/41.5M [00:06<00:56, 715kB/s]      8%|7         | 3.24M/41.5M [00:06<00:53, 755kB/s]      8%|8         | 3.46M/41.5M [00:06<00:48, 816kB/s]      9%|8         | 3.69M/41.5M [00:07<00:45, 871kB/s]      9%|9         | 3.93M/41.5M [00:07<00:42, 936kB/s]     10%|#         | 4.19M/41.5M [00:07<00:39, 1.00MB/s]     11%|#         | 4.46M/41.5M [00:07<00:36, 1.07MB/s]     11%|#1        | 4.75M/41.5M [00:08<00:33, 1.14MB/s]     12%|#2        | 5.06M/41.5M [00:08<00:31, 1.23MB/s]     13%|#2        | 5.39M/41.5M [00:08<00:29, 1.30MB/s]     14%|#3        | 5.75M/41.5M [00:08<00:27, 1.39MB/s]     14%|#4        | 5.97M/41.5M [00:08<00:29, 1.26MB/s]     16%|#5        | 6.45M/41.5M [00:09<00:23, 1.53MB/s]     16%|#6        | 6.73M/41.5M [00:09<00:25, 1.44MB/s]     17%|#6        | 7.01M/41.5M [00:09<00:26, 1.38MB/s]     17%|#7        | 7.14M/41.5M [00:09<00:31, 1.14MB/s]     18%|#8        | 7.52M/41.5M [00:10<00:26, 1.33MB/s]     19%|#8        | 7.74M/41.5M [00:10<00:28, 1.22MB/s]     19%|#9        | 7.96M/41.5M [00:10<00:28, 1.25MB/s]     20%|#9        | 8.16M/41.5M [00:10<00:25, 1.39MB/s]     20%|##        | 8.31M/41.5M [00:10<00:29, 1.20MB/s]     20%|##        | 8.44M/41.5M [00:11<00:35, 972kB/s]      21%|##        | 8.66M/41.5M [00:11<00:29, 1.15MB/s]     21%|##1       | 8.78M/41.5M [00:11<00:29, 1.18MB/s]     21%|##1       | 8.91M/41.5M [00:11<00:31, 1.07MB/s]     22%|##2       | 9.14M/41.5M [00:11<00:28, 1.20MB/s]     23%|##2       | 9.36M/41.5M [00:11<00:23, 1.43MB/s]     23%|##2       | 9.52M/41.5M [00:11<00:28, 1.17MB/s]     23%|##3       | 9.65M/41.5M [00:12<00:31, 1.07MB/s]     24%|##3       | 9.89M/41.5M [00:12<00:28, 1.18MB/s]     24%|##4       | 10.0M/41.5M [00:12<00:27, 1.19MB/s]     24%|##4       | 10.1M/41.5M [00:12<00:30, 1.06MB/s]     25%|##5       | 10.4M/41.5M [00:12<00:27, 1.18MB/s]     25%|##5       | 10.5M/41.5M [00:12<00:27, 1.17MB/s]     26%|##5       | 10.7M/41.5M [00:13<00:27, 1.17MB/s]     26%|##5       | 10.8M/41.5M [00:13<00:27, 1.17MB/s]     26%|##6       | 10.9M/41.5M [00:13<00:27, 1.17MB/s]     27%|##6       | 11.0M/41.5M [00:13<00:27, 1.16MB/s]     27%|##6       | 11.2M/41.5M [00:13<00:27, 1.17MB/s]     27%|##7       | 11.3M/41.5M [00:13<00:27, 1.16MB/s]     28%|##7       | 11.4M/41.5M [00:13<00:26, 1.17MB/s]     28%|##7       | 11.5M/41.5M [00:13<00:27, 1.15MB/s]     28%|##8       | 11.7M/41.5M [00:13<00:29, 1.04MB/s]     29%|##8       | 11.9M/41.5M [00:14<00:22, 1.38MB/s]     29%|##9       | 12.1M/41.5M [00:14<00:27, 1.11MB/s]     29%|##9       | 12.2M/41.5M [00:14<00:27, 1.13MB/s]     30%|##9       | 12.3M/41.5M [00:14<00:27, 1.10MB/s]     30%|###       | 12.5M/41.5M [00:14<00:26, 1.13MB/s]     30%|###       | 12.6M/41.5M [00:14<00:27, 1.11MB/s]     31%|###       | 12.7M/41.5M [00:14<00:26, 1.15MB/s]     31%|###       | 12.8M/41.5M [00:15<00:26, 1.13MB/s]     31%|###1      | 13.0M/41.5M [00:15<00:25, 1.16MB/s]     32%|###1      | 13.1M/41.5M [00:15<00:26, 1.14MB/s]     32%|###1      | 13.2M/41.5M [00:15<00:25, 1.17MB/s]     32%|###2      | 13.3M/41.5M [00:15<00:25, 1.15MB/s]     33%|###2      | 13.5M/41.5M [00:15<00:25, 1.17MB/s]     33%|###2      | 13.6M/41.5M [00:15<00:25, 1.14MB/s]     33%|###3      | 13.7M/41.5M [00:15<00:24, 1.17MB/s]     33%|###3      | 13.9M/41.5M [00:15<00:25, 1.14MB/s]     34%|###3      | 14.0M/41.5M [00:16<00:24, 1.17MB/s]     34%|###4      | 14.1M/41.5M [00:16<00:25, 1.14MB/s]     34%|###4      | 14.3M/41.5M [00:16<00:24, 1.18MB/s]     35%|###4      | 14.4M/41.5M [00:16<00:24, 1.15MB/s]     35%|###5      | 14.5M/41.5M [00:16<00:24, 1.17MB/s]     35%|###5      | 14.6M/41.5M [00:16<00:24, 1.14MB/s]     36%|###5      | 14.8M/41.5M [00:16<00:23, 1.18MB/s]     36%|###5      | 14.9M/41.5M [00:16<00:24, 1.15MB/s]     36%|###6      | 15.1M/41.5M [00:17<00:23, 1.18MB/s]     37%|###6      | 15.2M/41.5M [00:17<00:23, 1.16MB/s]     37%|###6      | 15.3M/41.5M [00:17<00:22, 1.20MB/s]     37%|###7      | 15.4M/41.5M [00:17<00:23, 1.17MB/s]     38%|###7      | 15.6M/41.5M [00:17<00:22, 1.23MB/s]     38%|###7      | 15.7M/41.5M [00:17<00:22, 1.19MB/s]     38%|###8      | 15.9M/41.5M [00:17<00:21, 1.24MB/s]     39%|###8      | 16.0M/41.5M [00:17<00:22, 1.21MB/s]     39%|###8      | 16.1M/41.5M [00:17<00:21, 1.23MB/s]     39%|###9      | 16.3M/41.5M [00:18<00:21, 1.21MB/s]     40%|###9      | 16.4M/41.5M [00:18<00:20, 1.26MB/s]     40%|###9      | 16.5M/41.5M [00:18<00:21, 1.23MB/s]     40%|####      | 16.7M/41.5M [00:18<00:19, 1.31MB/s]     41%|####      | 16.8M/41.5M [00:18<00:20, 1.26MB/s]     41%|####1     | 17.0M/41.5M [00:18<00:19, 1.33MB/s]     41%|####1     | 17.1M/41.5M [00:18<00:19, 1.30MB/s]     42%|####1     | 17.3M/41.5M [00:18<00:18, 1.35MB/s]     42%|####2     | 17.4M/41.5M [00:19<00:19, 1.31MB/s]     42%|####2     | 17.6M/41.5M [00:19<00:18, 1.39MB/s]     43%|####2     | 17.8M/41.5M [00:19<00:18, 1.33MB/s]     43%|####3     | 17.9M/41.5M [00:19<00:17, 1.39MB/s]     44%|####3     | 18.1M/41.5M [00:19<00:18, 1.33MB/s]     44%|####4     | 18.3M/41.5M [00:19<00:16, 1.44MB/s]     44%|####4     | 18.4M/41.5M [00:19<00:17, 1.39MB/s]     45%|####4     | 18.6M/41.5M [00:19<00:16, 1.49MB/s]     45%|####5     | 18.8M/41.5M [00:19<00:16, 1.45MB/s]     46%|####5     | 19.0M/41.5M [00:20<00:15, 1.55MB/s]     46%|####6     | 19.1M/41.5M [00:20<00:15, 1.48MB/s]     47%|####6     | 19.3M/41.5M [00:20<00:14, 1.59MB/s]     47%|####6     | 19.5M/41.5M [00:20<00:15, 1.54MB/s]     47%|####7     | 19.7M/41.5M [00:20<00:13, 1.66MB/s]     48%|####7     | 19.9M/41.5M [00:20<00:14, 1.61MB/s]     48%|####8     | 20.1M/41.5M [00:20<00:12, 1.74MB/s]     49%|####8     | 20.2M/41.5M [00:20<00:13, 1.68MB/s]     49%|####9     | 20.5M/41.5M [00:21<00:12, 1.79MB/s]     50%|####9     | 20.6M/41.5M [00:21<00:12, 1.71MB/s]     50%|#####     | 20.9M/41.5M [00:21<00:11, 1.89MB/s]     51%|#####     | 21.1M/41.5M [00:21<00:11, 1.82MB/s]     51%|#####1    | 21.3M/41.5M [00:21<00:10, 1.97MB/s]     52%|#####1    | 21.5M/41.5M [00:21<00:11, 1.89MB/s]     53%|#####2    | 21.8M/41.5M [00:21<00:10, 2.04MB/s]     53%|#####2    | 22.0M/41.5M [00:21<00:10, 1.95MB/s]     54%|#####3    | 22.3M/41.5M [00:21<00:09, 2.15MB/s]     54%|#####4    | 22.5M/41.5M [00:22<00:09, 2.14MB/s]     55%|#####4    | 22.8M/41.5M [00:22<00:08, 2.22MB/s]     56%|#####6    | 23.2M/41.5M [00:22<00:07, 2.71MB/s]     57%|#####6    | 23.5M/41.5M [00:22<00:07, 2.50MB/s]     57%|#####7    | 23.8M/41.5M [00:22<00:07, 2.60MB/s]     58%|#####7    | 24.0M/41.5M [00:22<00:07, 2.52MB/s]     59%|#####8    | 24.4M/41.5M [00:22<00:06, 2.65MB/s]     59%|#####9    | 24.6M/41.5M [00:22<00:06, 2.55MB/s]     60%|######    | 24.9M/41.5M [00:22<00:06, 2.64MB/s]     61%|######    | 25.2M/41.5M [00:23<00:06, 2.54MB/s]     61%|######1   | 25.5M/41.5M [00:23<00:06, 2.70MB/s]     62%|######2   | 25.8M/41.5M [00:23<00:06, 2.62MB/s]     63%|######2   | 26.1M/41.5M [00:23<00:05, 2.82MB/s]     64%|######3   | 26.4M/41.5M [00:23<00:05, 2.72MB/s]     65%|######4   | 26.8M/41.5M [00:23<00:05, 2.99MB/s]     65%|######5   | 27.1M/41.5M [00:23<00:05, 2.87MB/s]     66%|######6   | 27.5M/41.5M [00:23<00:04, 3.17MB/s]     67%|######6   | 27.8M/41.5M [00:24<00:04, 3.05MB/s]     68%|######8   | 28.2M/41.5M [00:24<00:04, 3.35MB/s]     69%|######8   | 28.5M/41.5M [00:24<00:04, 3.22MB/s]     70%|######9   | 29.0M/41.5M [00:24<00:03, 3.50MB/s]     71%|#######   | 29.3M/41.5M [00:24<00:03, 3.34MB/s]     72%|#######1  | 29.8M/41.5M [00:24<00:03, 3.68MB/s]     73%|#######2  | 30.1M/41.5M [00:24<00:03, 3.55MB/s]     74%|#######3  | 30.6M/41.5M [00:24<00:02, 3.86MB/s]     75%|#######4  | 31.0M/41.5M [00:24<00:02, 3.71MB/s]     76%|#######5  | 31.5M/41.5M [00:25<00:02, 4.01MB/s]     77%|#######6  | 31.9M/41.5M [00:25<00:02, 3.86MB/s]     78%|#######8  | 32.4M/41.5M [00:25<00:02, 4.12MB/s]     79%|#######9  | 32.8M/41.5M [00:25<00:02, 3.96MB/s]     80%|########  | 33.3M/41.5M [00:25<00:01, 4.28MB/s]     81%|########1 | 33.8M/41.5M [00:25<00:01, 4.12MB/s]     83%|########2 | 34.3M/41.5M [00:25<00:01, 4.53MB/s]     84%|########3 | 34.8M/41.5M [00:25<00:01, 4.37MB/s]     85%|########5 | 35.4M/41.5M [00:25<00:01, 4.75MB/s]     86%|########6 | 35.8M/41.5M [00:26<00:01, 4.55MB/s]     88%|########7 | 36.5M/41.5M [00:26<00:01, 4.94MB/s]     89%|########9 | 37.0M/41.5M [00:26<00:01, 4.73MB/s]     91%|######### | 37.6M/41.5M [00:26<00:00, 5.15MB/s]     92%|#########1| 38.1M/41.5M [00:26<00:00, 4.91MB/s]     94%|#########3| 38.8M/41.5M [00:26<00:00, 5.37MB/s]     95%|#########4| 39.4M/41.5M [00:26<00:00, 5.14MB/s]     97%|#########6| 40.1M/41.5M [00:26<00:00, 5.62MB/s]     98%|#########7| 40.6M/41.5M [00:26<00:00, 5.36MB/s]    100%|#########9| 41.4M/41.5M [00:27<00:00, 5.99MB/s]    100%|##########| 41.5M/41.5M [00:27<00:00, 1.60MB/s]



Load a test image
-----------------
Classic cat example!


.. code-block:: default

    from PIL import Image

    img_url = "https://github.com/dmlc/mxnet.js/blob/main/data/cat.png?raw=true"
    img_path = download_testdata(img_url, "cat.png", module="data")
    img = Image.open(img_path).resize((224, 224))

    # Preprocess the image and convert to tensor
    from flowvision import transforms

    my_preprocess = transforms.Compose(
        [
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
        ]
    )
    img = my_preprocess(img)
    img = np.expand_dims(img.numpy(), 0)







Import the graph to Relay
-------------------------
Convert OneFlow graph to Relay graph. The input name can be arbitrary.


.. code-block:: default

    class Graph(flow.nn.Graph):
        def __init__(self, module):
            super().__init__()
            self.m = module

        def build(self, x):
            out = self.m(x)
            return out


    graph = Graph(model)
    _ = graph._compile(flow.randn(1, 3, 224, 224))

    mod, params = relay.frontend.from_oneflow(graph, model_dir)







Relay Build
-----------
Compile the graph to llvm target with given input specification.


.. code-block:: default

    target = tvm.target.Target("llvm", host="llvm")
    dev = tvm.cpu(0)
    with tvm.transform.PassContext(opt_level=3):
        lib = relay.build(mod, target=target, params=params)







Execute the portable graph on TVM
---------------------------------
Now we can try deploying the compiled model on target.


.. code-block:: default

    target = "cuda"
    with tvm.transform.PassContext(opt_level=10):
        intrp = relay.build_module.create_executor("graph", mod, tvm.cuda(0), target)

    print(type(img))
    print(img.shape)
    tvm_output = intrp.evaluate()(tvm.nd.array(img.astype("float32")), **params)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <class 'numpy.ndarray'>
    (1, 3, 224, 224)



Look up synset name
-------------------
Look up prediction top 1 index in 1000 class synset.


.. code-block:: default

    synset_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_synsets.txt",
        ]
    )
    synset_name = "imagenet_synsets.txt"
    synset_path = download_testdata(synset_url, synset_name, module="data")
    with open(synset_path) as f:
        synsets = f.readlines()

    synsets = [x.strip() for x in synsets]
    splits = [line.split(" ") for line in synsets]
    key_to_classname = {spl[0]: " ".join(spl[1:]) for spl in splits}

    class_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_classes.txt",
        ]
    )
    class_name = "imagenet_classes.txt"
    class_path = download_testdata(class_url, class_name, module="data")
    with open(class_path) as f:
        class_id_to_key = f.readlines()

    class_id_to_key = [x.strip() for x in class_id_to_key]

    # Get top-1 result for TVM
    top1_tvm = np.argmax(tvm_output.numpy()[0])
    tvm_class_key = class_id_to_key[top1_tvm]

    # Convert input to OneFlow variable and get OneFlow result for comparison
    with flow.no_grad():
        torch_img = flow.from_numpy(img)
        output = model(torch_img)

        # Get top-1 result for OneFlow
        top_oneflow = np.argmax(output.numpy())
        oneflow_class_key = class_id_to_key[top_oneflow]

    print("Relay top-1 id: {}, class name: {}".format(top1_tvm, key_to_classname[tvm_class_key]))
    print(
        "OneFlow top-1 id: {}, class name: {}".format(top_oneflow, key_to_classname[oneflow_class_key])
    )




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Relay top-1 id: 281, class name: tabby, tabby cat
    OneFlow top-1 id: 281, class name: tabby, tabby cat




.. _sphx_glr_download_how_to_compile_models_from_oneflow.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: from_oneflow.py <from_oneflow.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: from_oneflow.ipynb <from_oneflow.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
