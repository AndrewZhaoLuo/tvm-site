.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_how_to_compile_models_from_oneflow.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_compile_models_from_oneflow.py:


Compile OneFlow Models
======================
**Author**: `Xiaoyu Zhang <https://github.com/BBuf/>`_

This article is an introductory tutorial to deploy OneFlow models with Relay.

For us to begin with, OneFlow package should be installed.

A quick solution is to install via pip

.. code-block:: bash

    pip install flowvision==0.1.0
    python3 -m pip install -f https://release.oneflow.info oneflow==0.7.0+cpu

or please refer to official site:
https://github.com/Oneflow-Inc/oneflow

Currently, TVM supports OneFlow 0.7.0. Other versions may be unstable.


.. code-block:: default

    import os, math
    from matplotlib import pyplot as plt
    import numpy as np
    from PIL import Image

    # oneflow imports
    import flowvision
    import oneflow as flow
    import oneflow.nn as nn

    import tvm
    from tvm import relay
    from tvm.contrib.download import download_testdata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional_pil.py:193: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      def resize(img, size, interpolation=Image.BILINEAR):
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:65: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
      Image.NEAREST: "nearest",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:66: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      Image.BILINEAR: "bilinear",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:67: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
      Image.BICUBIC: "bicubic",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:68: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
      Image.BOX: "box",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:69: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
      Image.HAMMING: "hamming",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:70: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
      Image.LANCZOS: "lanczos",
    /usr/local/lib/python3.7/dist-packages/flowvision/data/auto_augment.py:28: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      _RANDOM_INTERPOLATION = (Image.BILINEAR, Image.BICUBIC)
    /usr/local/lib/python3.7/dist-packages/flowvision/data/auto_augment.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
      _RANDOM_INTERPOLATION = (Image.BILINEAR, Image.BICUBIC)



Load a pretrained OneFlow model and save model
----------------------------------------------


.. code-block:: default

    model_name = "resnet18"
    model = getattr(flowvision.models, model_name)(pretrained=True)
    model = model.eval()

    model_dir = "resnet18_model"
    if not os.path.exists(model_dir):
        flow.save(model.state_dict(), model_dir)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Downloading: "https://oneflow-public.oss-cn-beijing.aliyuncs.com/model_zoo/flowvision/classification/ResNet/resnet18.zip" to /workspace/.oneflow/flowvision_cache/resnet18.zip
      0%|          | 0.00/41.5M [00:00<?, ?B/s]      0%|          | 16.0k/41.5M [00:00<09:16, 78.1kB/s]      0%|          | 48.0k/41.5M [00:00<05:57, 122kB/s]       0%|          | 96.0k/41.5M [00:00<04:13, 171kB/s]      0%|          | 168k/41.5M [00:00<02:58, 243kB/s]       1%|          | 344k/41.5M [00:01<01:33, 460kB/s]      1%|1         | 552k/41.5M [00:01<01:07, 633kB/s]      2%|2         | 928k/41.5M [00:01<00:42, 997kB/s]      3%|3         | 1.27M/41.5M [00:01<00:33, 1.27MB/s]      4%|3         | 1.64M/41.5M [00:01<00:27, 1.53MB/s]      5%|4         | 2.01M/41.5M [00:02<00:24, 1.68MB/s]      6%|5         | 2.38M/41.5M [00:02<00:23, 1.75MB/s]      7%|6         | 2.75M/41.5M [00:02<00:22, 1.81MB/s]      8%|7         | 3.12M/41.5M [00:02<00:20, 1.93MB/s]      8%|8         | 3.49M/41.5M [00:02<00:20, 1.98MB/s]      9%|9         | 3.86M/41.5M [00:03<00:20, 1.96MB/s]     10%|#         | 4.23M/41.5M [00:03<00:19, 1.98MB/s]     11%|#1        | 4.61M/41.5M [00:03<00:18, 2.06MB/s]     12%|#2        | 4.98M/41.5M [00:03<00:18, 2.08MB/s]     13%|#2        | 5.36M/41.5M [00:03<00:18, 2.03MB/s]     14%|#3        | 5.73M/41.5M [00:03<00:18, 2.01MB/s]     15%|#4        | 6.12M/41.5M [00:04<00:17, 2.09MB/s]     16%|#5        | 6.49M/41.5M [00:04<00:17, 2.09MB/s]     17%|#6        | 6.88M/41.5M [00:04<00:16, 2.19MB/s]     17%|#7        | 7.26M/41.5M [00:04<00:15, 2.38MB/s]     18%|#8        | 7.49M/41.5M [00:04<00:15, 2.34MB/s]     19%|#8        | 7.72M/41.5M [00:04<00:17, 1.99MB/s]     19%|#9        | 8.05M/41.5M [00:05<00:16, 2.15MB/s]     20%|##        | 8.44M/41.5M [00:05<00:13, 2.54MB/s]     21%|##        | 8.70M/41.5M [00:05<00:15, 2.26MB/s]     22%|##1       | 8.93M/41.5M [00:05<00:18, 1.82MB/s]     22%|##2       | 9.26M/41.5M [00:05<00:17, 1.92MB/s]     23%|##3       | 9.68M/41.5M [00:05<00:17, 1.94MB/s]     24%|##4       | 10.1M/41.5M [00:06<00:14, 2.21MB/s]     25%|##5       | 10.5M/41.5M [00:06<00:12, 2.52MB/s]     26%|##5       | 10.7M/41.5M [00:06<00:14, 2.23MB/s]     26%|##6       | 11.0M/41.5M [00:06<00:15, 2.10MB/s]     28%|##7       | 11.4M/41.5M [00:06<00:12, 2.52MB/s]     28%|##8       | 11.7M/41.5M [00:06<00:12, 2.47MB/s]     29%|##8       | 11.9M/41.5M [00:06<00:15, 2.00MB/s]     30%|##9       | 12.4M/41.5M [00:07<00:13, 2.23MB/s]     31%|###       | 12.8M/41.5M [00:07<00:11, 2.65MB/s]     32%|###1      | 13.1M/41.5M [00:07<00:11, 2.57MB/s]     32%|###2      | 13.4M/41.5M [00:07<00:14, 2.03MB/s]     33%|###3      | 13.8M/41.5M [00:07<00:12, 2.34MB/s]     35%|###4      | 14.3M/41.5M [00:07<00:10, 2.63MB/s]     35%|###5      | 14.6M/41.5M [00:08<00:11, 2.53MB/s]     36%|###5      | 14.9M/41.5M [00:08<00:12, 2.24MB/s]     37%|###7      | 15.4M/41.5M [00:08<00:09, 2.88MB/s]     39%|###8      | 16.0M/41.5M [00:08<00:07, 3.49MB/s]     39%|###9      | 16.4M/41.5M [00:08<00:08, 3.08MB/s]     40%|####      | 16.7M/41.5M [00:08<00:10, 2.58MB/s]     41%|####1     | 17.2M/41.5M [00:08<00:08, 2.88MB/s]     43%|####2     | 17.8M/41.5M [00:09<00:07, 3.27MB/s]     44%|####3     | 18.1M/41.5M [00:09<00:07, 3.26MB/s]     44%|####4     | 18.5M/41.5M [00:09<00:08, 2.77MB/s]     46%|####6     | 19.1M/41.5M [00:09<00:07, 3.28MB/s]     48%|####7     | 19.8M/41.5M [00:09<00:05, 3.86MB/s]     49%|####8     | 20.1M/41.5M [00:09<00:06, 3.52MB/s]     49%|####9     | 20.5M/41.5M [00:10<00:07, 2.79MB/s]     51%|#####1    | 21.2M/41.5M [00:10<00:05, 3.73MB/s]     52%|#####2    | 21.6M/41.5M [00:10<00:05, 3.66MB/s]     53%|#####3    | 22.0M/41.5M [00:10<00:06, 3.06MB/s]     55%|#####4    | 22.8M/41.5M [00:10<00:05, 3.91MB/s]     57%|#####6    | 23.6M/41.5M [00:10<00:03, 4.72MB/s]     58%|#####8    | 24.1M/41.5M [00:10<00:03, 4.65MB/s]     59%|#####9    | 24.6M/41.5M [00:11<00:04, 3.82MB/s]     61%|######1   | 25.3M/41.5M [00:11<00:03, 4.32MB/s]     63%|######3   | 26.2M/41.5M [00:11<00:03, 4.95MB/s]     64%|######4   | 26.7M/41.5M [00:11<00:03, 4.82MB/s]     66%|######5   | 27.2M/41.5M [00:11<00:03, 4.05MB/s]     68%|######7   | 28.1M/41.5M [00:11<00:02, 4.95MB/s]     70%|#######   | 29.1M/41.5M [00:11<00:02, 6.14MB/s]     72%|#######1  | 29.8M/41.5M [00:12<00:02, 5.12MB/s]     73%|#######3  | 30.3M/41.5M [00:12<00:02, 4.24MB/s]     75%|#######5  | 31.3M/41.5M [00:12<00:02, 5.08MB/s]     78%|#######8  | 32.4M/41.5M [00:12<00:01, 6.39MB/s]     80%|#######9  | 33.1M/41.5M [00:12<00:01, 5.38MB/s]     81%|########1 | 33.7M/41.5M [00:12<00:01, 4.46MB/s]     84%|########3 | 34.8M/41.5M [00:13<00:01, 5.49MB/s]     87%|########6 | 36.0M/41.5M [00:13<00:00, 6.94MB/s]     89%|########8 | 36.8M/41.5M [00:13<00:00, 5.81MB/s]     90%|######### | 37.5M/41.5M [00:13<00:00, 5.02MB/s]     93%|#########3| 38.8M/41.5M [00:13<00:00, 6.40MB/s]     97%|#########6| 40.2M/41.5M [00:13<00:00, 7.74MB/s]     99%|#########8| 41.0M/41.5M [00:13<00:00, 7.04MB/s]    100%|##########| 41.5M/41.5M [00:13<00:00, 3.11MB/s]



Load a test image
-----------------
Classic cat example!


.. code-block:: default

    from PIL import Image

    img_url = "https://github.com/dmlc/mxnet.js/blob/main/data/cat.png?raw=true"
    img_path = download_testdata(img_url, "cat.png", module="data")
    img = Image.open(img_path).resize((224, 224))

    # Preprocess the image and convert to tensor
    from flowvision import transforms

    my_preprocess = transforms.Compose(
        [
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
        ]
    )
    img = my_preprocess(img)
    img = np.expand_dims(img.numpy(), 0)







Import the graph to Relay
-------------------------
Convert OneFlow graph to Relay graph. The input name can be arbitrary.


.. code-block:: default

    class Graph(flow.nn.Graph):
        def __init__(self, module):
            super().__init__()
            self.m = module

        def build(self, x):
            out = self.m(x)
            return out


    graph = Graph(model)
    _ = graph._compile(flow.randn(1, 3, 224, 224))

    mod, params = relay.frontend.from_oneflow(graph, model_dir)







Relay Build
-----------
Compile the graph to llvm target with given input specification.


.. code-block:: default

    target = tvm.target.Target("llvm", host="llvm")
    dev = tvm.cpu(0)
    with tvm.transform.PassContext(opt_level=3):
        lib = relay.build(mod, target=target, params=params)







Execute the portable graph on TVM
---------------------------------
Now we can try deploying the compiled model on target.


.. code-block:: default

    target = "cuda"
    with tvm.transform.PassContext(opt_level=10):
        intrp = relay.build_module.create_executor("graph", mod, tvm.cuda(0), target)

    print(type(img))
    print(img.shape)
    tvm_output = intrp.evaluate()(tvm.nd.array(img.astype("float32")), **params)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <class 'numpy.ndarray'>
    (1, 3, 224, 224)



Look up synset name
-------------------
Look up prediction top 1 index in 1000 class synset.


.. code-block:: default

    synset_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_synsets.txt",
        ]
    )
    synset_name = "imagenet_synsets.txt"
    synset_path = download_testdata(synset_url, synset_name, module="data")
    with open(synset_path) as f:
        synsets = f.readlines()

    synsets = [x.strip() for x in synsets]
    splits = [line.split(" ") for line in synsets]
    key_to_classname = {spl[0]: " ".join(spl[1:]) for spl in splits}

    class_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_classes.txt",
        ]
    )
    class_name = "imagenet_classes.txt"
    class_path = download_testdata(class_url, class_name, module="data")
    with open(class_path) as f:
        class_id_to_key = f.readlines()

    class_id_to_key = [x.strip() for x in class_id_to_key]

    # Get top-1 result for TVM
    top1_tvm = np.argmax(tvm_output.numpy()[0])
    tvm_class_key = class_id_to_key[top1_tvm]

    # Convert input to OneFlow variable and get OneFlow result for comparison
    with flow.no_grad():
        torch_img = flow.from_numpy(img)
        output = model(torch_img)

        # Get top-1 result for OneFlow
        top_oneflow = np.argmax(output.numpy())
        oneflow_class_key = class_id_to_key[top_oneflow]

    print("Relay top-1 id: {}, class name: {}".format(top1_tvm, key_to_classname[tvm_class_key]))
    print(
        "OneFlow top-1 id: {}, class name: {}".format(top_oneflow, key_to_classname[oneflow_class_key])
    )




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Relay top-1 id: 281, class name: tabby, tabby cat
    OneFlow top-1 id: 281, class name: tabby, tabby cat




.. _sphx_glr_download_how_to_compile_models_from_oneflow.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: from_oneflow.py <from_oneflow.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: from_oneflow.ipynb <from_oneflow.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
