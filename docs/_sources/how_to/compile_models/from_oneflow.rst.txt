
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/compile_models/from_oneflow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_compile_models_from_oneflow.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_compile_models_from_oneflow.py:


Compile OneFlow Models
======================
**Author**: `Xiaoyu Zhang <https://github.com/BBuf/>`_

This article is an introductory tutorial to deploy OneFlow models with Relay.

For us to begin with, OneFlow package should be installed.

A quick solution is to install via pip

.. code-block:: bash

    pip install flowvision==0.1.0
    python3 -m pip install -f https://release.oneflow.info oneflow==0.7.0+cpu

or please refer to official site:
https://github.com/Oneflow-Inc/oneflow

Currently, TVM supports OneFlow 0.7.0. Other versions may be unstable.

.. GENERATED FROM PYTHON SOURCE LINES 38-52

.. code-block:: default

    import os, math
    from matplotlib import pyplot as plt
    import numpy as np
    from PIL import Image

    # oneflow imports
    import flowvision
    import oneflow as flow
    import oneflow.nn as nn

    import tvm
    from tvm import relay
    from tvm.contrib.download import download_testdata





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional_pil.py:193: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      def resize(img, size, interpolation=Image.BILINEAR):
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:65: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
      Image.NEAREST: "nearest",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:66: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      Image.BILINEAR: "bilinear",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:67: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
      Image.BICUBIC: "bicubic",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:68: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
      Image.BOX: "box",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:69: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
      Image.HAMMING: "hamming",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:70: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
      Image.LANCZOS: "lanczos",
    /usr/local/lib/python3.7/dist-packages/flowvision/data/auto_augment.py:28: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      _RANDOM_INTERPOLATION = (Image.BILINEAR, Image.BICUBIC)
    /usr/local/lib/python3.7/dist-packages/flowvision/data/auto_augment.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
      _RANDOM_INTERPOLATION = (Image.BILINEAR, Image.BICUBIC)




.. GENERATED FROM PYTHON SOURCE LINES 53-55

Load a pretrained OneFlow model and save model
----------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 55-63

.. code-block:: default

    model_name = "resnet18"
    model = getattr(flowvision.models, model_name)(pretrained=True)
    model = model.eval()

    model_dir = "resnet18_model"
    if not os.path.exists(model_dir):
        flow.save(model.state_dict(), model_dir)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://oneflow-public.oss-cn-beijing.aliyuncs.com/model_zoo/flowvision/classification/ResNet/resnet18.zip" to /workspace/.oneflow/flowvision_cache/resnet18.zip
      0%|          | 0.00/41.5M [00:00<?, ?B/s]      0%|          | 16.0k/41.5M [00:00<08:16, 87.6kB/s]      0%|          | 48.0k/41.5M [00:00<05:13, 139kB/s]       0%|          | 72.0k/41.5M [00:00<05:21, 135kB/s]      0%|          | 136k/41.5M [00:00<03:17, 220kB/s]       1%|          | 264k/41.5M [00:00<01:50, 392kB/s]      1%|          | 400k/41.5M [00:01<01:24, 511kB/s]      1%|1         | 544k/41.5M [00:01<01:11, 601kB/s]      2%|1         | 696k/41.5M [00:01<01:03, 673kB/s]      2%|2         | 856k/41.5M [00:01<00:57, 735kB/s]      2%|2         | 1.00M/41.5M [00:01<00:53, 791kB/s]      3%|2         | 1.17M/41.5M [00:02<00:50, 842kB/s]      3%|3         | 1.35M/41.5M [00:02<00:47, 891kB/s]      4%|3         | 1.54M/41.5M [00:02<00:44, 938kB/s]      4%|4         | 1.74M/41.5M [00:02<00:41, 997kB/s]      5%|4         | 1.95M/41.5M [00:02<00:39, 1.04MB/s]      5%|5         | 2.17M/41.5M [00:03<00:37, 1.11MB/s]      6%|5         | 2.40M/41.5M [00:03<00:35, 1.15MB/s]      6%|6         | 2.64M/41.5M [00:03<00:33, 1.21MB/s]      7%|6         | 2.89M/41.5M [00:03<00:31, 1.27MB/s]      8%|7         | 3.16M/41.5M [00:03<00:30, 1.33MB/s]      8%|8         | 3.43M/41.5M [00:03<00:28, 1.39MB/s]      9%|8         | 3.70M/41.5M [00:04<00:27, 1.43MB/s]     10%|9         | 4.00M/41.5M [00:04<00:26, 1.50MB/s]     10%|#         | 4.30M/41.5M [00:04<00:24, 1.56MB/s]     11%|#1        | 4.62M/41.5M [00:04<00:23, 1.63MB/s]     12%|#1        | 4.97M/41.5M [00:04<00:22, 1.71MB/s]     13%|#2        | 5.32M/41.5M [00:05<00:21, 1.79MB/s]     14%|#3        | 5.70M/41.5M [00:05<00:19, 1.88MB/s]     15%|#4        | 6.09M/41.5M [00:05<00:18, 1.97MB/s]     16%|#5        | 6.50M/41.5M [00:05<00:17, 2.07MB/s]     17%|#6        | 6.93M/41.5M [00:05<00:16, 2.17MB/s]     18%|#7        | 7.38M/41.5M [00:06<00:15, 2.26MB/s]     19%|#8        | 7.84M/41.5M [00:06<00:14, 2.37MB/s]     20%|##        | 8.34M/41.5M [00:06<00:13, 2.48MB/s]     21%|##1       | 8.84M/41.5M [00:06<00:13, 2.58MB/s]     23%|##2       | 9.37M/41.5M [00:06<00:12, 2.69MB/s]     24%|##3       | 9.91M/41.5M [00:06<00:11, 2.80MB/s]     25%|##5       | 10.5M/41.5M [00:07<00:11, 2.89MB/s]     27%|##6       | 11.1M/41.5M [00:07<00:10, 3.02MB/s]     28%|##8       | 11.7M/41.5M [00:07<00:09, 3.13MB/s]     30%|##9       | 12.3M/41.5M [00:07<00:09, 3.25MB/s]     31%|###1      | 13.0M/41.5M [00:07<00:08, 3.39MB/s]     33%|###2      | 13.7M/41.5M [00:08<00:08, 3.54MB/s]     35%|###4      | 14.4M/41.5M [00:08<00:07, 3.70MB/s]     37%|###6      | 15.2M/41.5M [00:08<00:07, 3.88MB/s]     38%|###8      | 16.0M/41.5M [00:08<00:06, 4.05MB/s]     40%|####      | 16.8M/41.5M [00:08<00:06, 4.21MB/s]     43%|####2     | 17.6M/41.5M [00:09<00:05, 4.38MB/s]     45%|####4     | 18.5M/41.5M [00:09<00:05, 4.55MB/s]     47%|####6     | 19.5M/41.5M [00:09<00:04, 4.74MB/s]     49%|####9     | 20.4M/41.5M [00:09<00:04, 4.93MB/s]     52%|#####1    | 21.4M/41.5M [00:09<00:04, 5.15MB/s]     54%|#####4    | 22.5M/41.5M [00:09<00:03, 5.40MB/s]     57%|#####6    | 23.6M/41.5M [00:10<00:03, 5.65MB/s]     60%|#####9    | 24.8M/41.5M [00:10<00:02, 5.92MB/s]     63%|######2   | 26.0M/41.5M [00:10<00:02, 6.18MB/s]     66%|######5   | 27.3M/41.5M [00:10<00:02, 6.45MB/s]     69%|######8   | 28.6M/41.5M [00:10<00:02, 6.70MB/s]     72%|#######2  | 30.0M/41.5M [00:11<00:01, 6.99MB/s]     76%|#######5  | 31.4M/41.5M [00:11<00:01, 7.31MB/s]     79%|#######9  | 32.9M/41.5M [00:11<00:01, 7.57MB/s]     83%|########2 | 34.3M/41.5M [00:11<00:00, 7.76MB/s]     86%|########6 | 35.8M/41.5M [00:11<00:00, 7.87MB/s]     90%|########9 | 37.3M/41.5M [00:12<00:00, 7.96MB/s]     93%|#########3| 38.7M/41.5M [00:12<00:00, 8.03MB/s]     97%|#########6| 40.2M/41.5M [00:12<00:00, 8.08MB/s]    100%|##########| 41.5M/41.5M [00:12<00:00, 3.50MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 64-67

Load a test image
-----------------
Classic cat example!

.. GENERATED FROM PYTHON SOURCE LINES 67-87

.. code-block:: default

    from PIL import Image

    img_url = "https://github.com/dmlc/mxnet.js/blob/main/data/cat.png?raw=true"
    img_path = download_testdata(img_url, "cat.png", module="data")
    img = Image.open(img_path).resize((224, 224))

    # Preprocess the image and convert to tensor
    from flowvision import transforms

    my_preprocess = transforms.Compose(
        [
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
        ]
    )
    img = my_preprocess(img)
    img = np.expand_dims(img.numpy(), 0)








.. GENERATED FROM PYTHON SOURCE LINES 88-91

Import the graph to Relay
-------------------------
Convert OneFlow graph to Relay graph. The input name can be arbitrary.

.. GENERATED FROM PYTHON SOURCE LINES 91-106

.. code-block:: default

    class Graph(flow.nn.Graph):
        def __init__(self, module):
            super().__init__()
            self.m = module

        def build(self, x):
            out = self.m(x)
            return out


    graph = Graph(model)
    _ = graph._compile(flow.randn(1, 3, 224, 224))

    mod, params = relay.frontend.from_oneflow(graph, model_dir)








.. GENERATED FROM PYTHON SOURCE LINES 107-110

Relay Build
-----------
Compile the graph to llvm target with given input specification.

.. GENERATED FROM PYTHON SOURCE LINES 110-115

.. code-block:: default

    target = tvm.target.Target("llvm", host="llvm")
    dev = tvm.cpu(0)
    with tvm.transform.PassContext(opt_level=3):
        lib = relay.build(mod, target=target, params=params)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /workspace/python/tvm/driver/build_module.py:264: UserWarning: target_host parameter is going to be deprecated. Please pass in tvm.target.Target(target, host=target_host) instead.
      "target_host parameter is going to be deprecated. "




.. GENERATED FROM PYTHON SOURCE LINES 116-119

Execute the portable graph on TVM
---------------------------------
Now we can try deploying the compiled model on target.

.. GENERATED FROM PYTHON SOURCE LINES 119-127

.. code-block:: default

    target = "cuda"
    with tvm.transform.PassContext(opt_level=10):
        intrp = relay.build_module.create_executor("graph", mod, tvm.cuda(0), target)

    print(type(img))
    print(img.shape)
    tvm_output = intrp.evaluate()(tvm.nd.array(img.astype("float32")), **params)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'numpy.ndarray'>
    (1, 3, 224, 224)




.. GENERATED FROM PYTHON SOURCE LINES 128-131

Look up synset name
-------------------
Look up prediction top 1 index in 1000 class synset.

.. GENERATED FROM PYTHON SOURCE LINES 131-178

.. code-block:: default

    synset_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_synsets.txt",
        ]
    )
    synset_name = "imagenet_synsets.txt"
    synset_path = download_testdata(synset_url, synset_name, module="data")
    with open(synset_path) as f:
        synsets = f.readlines()

    synsets = [x.strip() for x in synsets]
    splits = [line.split(" ") for line in synsets]
    key_to_classname = {spl[0]: " ".join(spl[1:]) for spl in splits}

    class_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_classes.txt",
        ]
    )
    class_name = "imagenet_classes.txt"
    class_path = download_testdata(class_url, class_name, module="data")
    with open(class_path) as f:
        class_id_to_key = f.readlines()

    class_id_to_key = [x.strip() for x in class_id_to_key]

    # Get top-1 result for TVM
    top1_tvm = np.argmax(tvm_output.numpy()[0])
    tvm_class_key = class_id_to_key[top1_tvm]

    # Convert input to OneFlow variable and get OneFlow result for comparison
    with flow.no_grad():
        torch_img = flow.from_numpy(img)
        output = model(torch_img)

        # Get top-1 result for OneFlow
        top_oneflow = np.argmax(output.numpy())
        oneflow_class_key = class_id_to_key[top_oneflow]

    print("Relay top-1 id: {}, class name: {}".format(top1_tvm, key_to_classname[tvm_class_key]))
    print(
        "OneFlow top-1 id: {}, class name: {}".format(top_oneflow, key_to_classname[oneflow_class_key])
    )




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Relay top-1 id: 281, class name: tabby, tabby cat
    OneFlow top-1 id: 281, class name: tabby, tabby cat





.. _sphx_glr_download_how_to_compile_models_from_oneflow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: from_oneflow.py <from_oneflow.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: from_oneflow.ipynb <from_oneflow.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
