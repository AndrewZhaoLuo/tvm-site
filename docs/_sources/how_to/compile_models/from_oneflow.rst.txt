
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/compile_models/from_oneflow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_compile_models_from_oneflow.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_compile_models_from_oneflow.py:


Compile OneFlow Models
======================
**Author**: `Xiaoyu Zhang <https://github.com/BBuf/>`_

This article is an introductory tutorial to deploy OneFlow models with Relay.

For us to begin with, OneFlow package should be installed.

A quick solution is to install via pip

.. code-block:: bash

    pip install flowvision==0.1.0
    python3 -m pip install -f https://release.oneflow.info oneflow==0.7.0+cpu

or please refer to official site:
https://github.com/Oneflow-Inc/oneflow

Currently, TVM supports OneFlow 0.7.0. Other versions may be unstable.

.. GENERATED FROM PYTHON SOURCE LINES 38-52

.. code-block:: default

    import os, math
    from matplotlib import pyplot as plt
    import numpy as np
    from PIL import Image

    # oneflow imports
    import flowvision
    import oneflow as flow
    import oneflow.nn as nn

    import tvm
    from tvm import relay
    from tvm.contrib.download import download_testdata





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional_pil.py:193: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      def resize(img, size, interpolation=Image.BILINEAR):
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:65: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
      Image.NEAREST: "nearest",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:66: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      Image.BILINEAR: "bilinear",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:67: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
      Image.BICUBIC: "bicubic",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:68: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
      Image.BOX: "box",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:69: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
      Image.HAMMING: "hamming",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:70: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
      Image.LANCZOS: "lanczos",
    /usr/local/lib/python3.7/dist-packages/flowvision/data/auto_augment.py:28: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      _RANDOM_INTERPOLATION = (Image.BILINEAR, Image.BICUBIC)
    /usr/local/lib/python3.7/dist-packages/flowvision/data/auto_augment.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
      _RANDOM_INTERPOLATION = (Image.BILINEAR, Image.BICUBIC)




.. GENERATED FROM PYTHON SOURCE LINES 53-55

Load a pretrained OneFlow model and save model
----------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 55-63

.. code-block:: default

    model_name = "resnet18"
    model = getattr(flowvision.models, model_name)(pretrained=True)
    model = model.eval()

    model_dir = "resnet18_model"
    if not os.path.exists(model_dir):
        flow.save(model.state_dict(), model_dir)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://oneflow-public.oss-cn-beijing.aliyuncs.com/model_zoo/flowvision/classification/ResNet/resnet18.zip" to /workspace/.oneflow/flowvision_cache/resnet18.zip
      0%|          | 0.00/41.5M [00:00<?, ?B/s]      0%|          | 16.0k/41.5M [00:00<07:48, 92.8kB/s]      0%|          | 48.0k/41.5M [00:00<05:07, 141kB/s]       0%|          | 80.0k/41.5M [00:00<04:48, 151kB/s]      0%|          | 160k/41.5M [00:00<02:55, 247kB/s]       1%|          | 256k/41.5M [00:00<02:07, 338kB/s]      1%|          | 352k/41.5M [00:01<01:46, 404kB/s]      1%|1         | 440k/41.5M [00:01<01:42, 419kB/s]      1%|1         | 536k/41.5M [00:01<01:39, 434kB/s]      1%|1         | 624k/41.5M [00:01<01:39, 430kB/s]      2%|1         | 720k/41.5M [00:01<01:33, 457kB/s]      2%|1         | 816k/41.5M [00:02<01:31, 464kB/s]      2%|2         | 912k/41.5M [00:02<01:32, 460kB/s]      2%|2         | 0.98M/41.5M [00:02<01:33, 456kB/s]      3%|2         | 1.08M/41.5M [00:02<01:29, 472kB/s]      3%|2         | 1.17M/41.5M [00:03<01:27, 481kB/s]      3%|3         | 1.27M/41.5M [00:03<01:26, 486kB/s]      3%|3         | 1.37M/41.5M [00:03<01:29, 470kB/s]      4%|3         | 1.47M/41.5M [00:03<01:25, 491kB/s]      4%|3         | 1.57M/41.5M [00:03<01:21, 516kB/s]      4%|4         | 1.68M/41.5M [00:04<01:19, 528kB/s]      4%|4         | 1.79M/41.5M [00:04<01:18, 527kB/s]      5%|4         | 1.91M/41.5M [00:04<01:15, 547kB/s]      5%|4         | 2.02M/41.5M [00:04<01:11, 581kB/s]      5%|5         | 2.15M/41.5M [00:04<01:08, 600kB/s]      5%|5         | 2.28M/41.5M [00:05<01:06, 616kB/s]      6%|5         | 2.41M/41.5M [00:05<01:05, 623kB/s]      6%|6         | 2.55M/41.5M [00:05<01:01, 668kB/s]      7%|6         | 2.71M/41.5M [00:05<00:56, 725kB/s]      7%|6         | 2.87M/41.5M [00:05<00:54, 739kB/s]      7%|7         | 3.03M/41.5M [00:06<00:53, 753kB/s]      8%|7         | 3.20M/41.5M [00:06<00:50, 801kB/s]      8%|8         | 3.39M/41.5M [00:06<00:45, 884kB/s]      9%|8         | 3.59M/41.5M [00:06<00:42, 928kB/s]      9%|9         | 3.79M/41.5M [00:06<00:41, 954kB/s]     10%|9         | 3.97M/41.5M [00:07<00:46, 850kB/s]     10%|9         | 4.05M/41.5M [00:07<00:45, 854kB/s]     11%|#         | 4.36M/41.5M [00:07<00:30, 1.26MB/s]     11%|#         | 4.50M/41.5M [00:07<00:30, 1.26MB/s]     11%|#1        | 4.64M/41.5M [00:07<00:33, 1.15MB/s]     11%|#1        | 4.77M/41.5M [00:07<00:40, 949kB/s]      12%|#1        | 4.88M/41.5M [00:07<00:40, 951kB/s]     12%|#2        | 5.01M/41.5M [00:08<00:37, 1.03MB/s]     12%|#2        | 5.12M/41.5M [00:08<00:39, 968kB/s]      13%|#2        | 5.27M/41.5M [00:08<00:42, 904kB/s]     13%|#3        | 5.46M/41.5M [00:08<00:35, 1.07MB/s]     13%|#3        | 5.57M/41.5M [00:08<00:36, 1.04MB/s]     14%|#3        | 5.68M/41.5M [00:08<00:40, 926kB/s]      14%|#4        | 5.87M/41.5M [00:08<00:33, 1.11MB/s]     15%|#4        | 6.08M/41.5M [00:09<00:32, 1.16MB/s]     15%|#4        | 6.20M/41.5M [00:09<00:32, 1.15MB/s]     15%|#5        | 6.31M/41.5M [00:09<00:36, 1.02MB/s]     16%|#5        | 6.51M/41.5M [00:09<00:34, 1.06MB/s]     16%|#6        | 6.73M/41.5M [00:09<00:28, 1.28MB/s]     17%|#6        | 6.86M/41.5M [00:09<00:31, 1.15MB/s]     17%|#6        | 6.98M/41.5M [00:10<00:33, 1.07MB/s]     17%|#7        | 7.18M/41.5M [00:10<00:32, 1.12MB/s]     18%|#7        | 7.29M/41.5M [00:10<00:41, 856kB/s]      18%|#8        | 7.56M/41.5M [00:10<00:33, 1.06MB/s]     19%|#8        | 7.72M/41.5M [00:10<00:30, 1.16MB/s]     19%|#8        | 7.84M/41.5M [00:10<00:32, 1.07MB/s]     19%|#9        | 7.95M/41.5M [00:11<00:38, 902kB/s]      19%|#9        | 8.06M/41.5M [00:11<00:39, 886kB/s]     20%|#9        | 8.23M/41.5M [00:11<00:34, 1.02MB/s]     20%|##        | 8.34M/41.5M [00:11<00:39, 883kB/s]      20%|##        | 8.43M/41.5M [00:11<00:42, 815kB/s]     21%|##        | 8.59M/41.5M [00:11<00:37, 912kB/s]     21%|##1       | 8.77M/41.5M [00:11<00:31, 1.10MB/s]     21%|##1       | 8.88M/41.5M [00:12<00:34, 982kB/s]      22%|##1       | 8.98M/41.5M [00:12<00:39, 871kB/s]     22%|##2       | 9.14M/41.5M [00:12<00:35, 959kB/s]     22%|##2       | 9.24M/41.5M [00:12<00:35, 955kB/s]     23%|##2       | 9.34M/41.5M [00:12<00:35, 939kB/s]     23%|##2       | 9.52M/41.5M [00:12<00:32, 1.04MB/s]     23%|##3       | 9.62M/41.5M [00:12<00:33, 999kB/s]      23%|##3       | 9.72M/41.5M [00:13<00:35, 941kB/s]     24%|##3       | 9.89M/41.5M [00:13<00:29, 1.11MB/s]     24%|##4       | 10.0M/41.5M [00:13<00:35, 927kB/s]      24%|##4       | 10.1M/41.5M [00:13<00:36, 891kB/s]     25%|##4       | 10.3M/41.5M [00:13<00:31, 1.05MB/s]     25%|##5       | 10.4M/41.5M [00:13<00:31, 1.04MB/s]     25%|##5       | 10.5M/41.5M [00:13<00:35, 913kB/s]      26%|##5       | 10.7M/41.5M [00:13<00:31, 1.02MB/s]     26%|##5       | 10.8M/41.5M [00:14<00:33, 956kB/s]      26%|##6       | 10.9M/41.5M [00:14<00:35, 904kB/s]     27%|##6       | 11.0M/41.5M [00:14<00:28, 1.11MB/s]     27%|##6       | 11.1M/41.5M [00:14<00:31, 997kB/s]      27%|##7       | 11.2M/41.5M [00:14<00:32, 975kB/s]     28%|##7       | 11.4M/41.5M [00:14<00:27, 1.14MB/s]     28%|##7       | 11.5M/41.5M [00:14<00:32, 966kB/s]      28%|##8       | 11.6M/41.5M [00:15<00:34, 913kB/s]     28%|##8       | 11.8M/41.5M [00:15<00:29, 1.06MB/s]     29%|##8       | 11.9M/41.5M [00:15<00:33, 932kB/s]      29%|##8       | 12.0M/41.5M [00:15<00:32, 941kB/s]     29%|##9       | 12.2M/41.5M [00:15<00:27, 1.14MB/s]     30%|##9       | 12.3M/41.5M [00:15<00:31, 972kB/s]      30%|##9       | 12.4M/41.5M [00:15<00:33, 918kB/s]     30%|###       | 12.6M/41.5M [00:15<00:28, 1.06MB/s]     31%|###       | 12.7M/41.5M [00:16<00:33, 906kB/s]      31%|###       | 12.8M/41.5M [00:16<00:33, 904kB/s]     31%|###1      | 13.0M/41.5M [00:16<00:28, 1.06MB/s]     32%|###1      | 13.1M/41.5M [00:16<00:28, 1.04MB/s]     32%|###1      | 13.2M/41.5M [00:16<00:30, 976kB/s]      32%|###2      | 13.3M/41.5M [00:16<00:26, 1.12MB/s]     32%|###2      | 13.4M/41.5M [00:16<00:31, 927kB/s]      33%|###2      | 13.6M/41.5M [00:17<00:31, 934kB/s]     33%|###3      | 13.7M/41.5M [00:17<00:25, 1.13MB/s]     33%|###3      | 13.9M/41.5M [00:17<00:28, 1.03MB/s]     34%|###3      | 14.0M/41.5M [00:17<00:28, 1.01MB/s]     34%|###4      | 14.1M/41.5M [00:17<00:24, 1.19MB/s]     34%|###4      | 14.3M/41.5M [00:17<00:28, 1.01MB/s]     35%|###4      | 14.4M/41.5M [00:17<00:29, 967kB/s]      35%|###5      | 14.6M/41.5M [00:17<00:24, 1.17MB/s]     35%|###5      | 14.7M/41.5M [00:18<00:26, 1.05MB/s]     36%|###5      | 14.8M/41.5M [00:18<00:26, 1.04MB/s]     36%|###6      | 15.0M/41.5M [00:18<00:22, 1.21MB/s]     36%|###6      | 15.1M/41.5M [00:18<00:27, 1.01MB/s]     37%|###6      | 15.3M/41.5M [00:18<00:27, 1.01MB/s]     37%|###7      | 15.5M/41.5M [00:18<00:22, 1.22MB/s]     38%|###7      | 15.6M/41.5M [00:18<00:24, 1.10MB/s]     38%|###7      | 15.7M/41.5M [00:19<00:22, 1.17MB/s]     38%|###8      | 16.0M/41.5M [00:19<00:19, 1.41MB/s]     39%|###8      | 16.1M/41.5M [00:19<00:21, 1.21MB/s]     39%|###9      | 16.2M/41.5M [00:19<00:23, 1.14MB/s]     40%|###9      | 16.5M/41.5M [00:19<00:19, 1.37MB/s]     40%|####      | 16.6M/41.5M [00:19<00:21, 1.19MB/s]     40%|####      | 16.8M/41.5M [00:19<00:20, 1.28MB/s]     41%|####1     | 17.0M/41.5M [00:20<00:17, 1.46MB/s]     41%|####1     | 17.2M/41.5M [00:20<00:18, 1.40MB/s]     42%|####1     | 17.4M/41.5M [00:20<00:20, 1.25MB/s]     42%|####2     | 17.6M/41.5M [00:20<00:16, 1.52MB/s]     43%|####2     | 17.8M/41.5M [00:20<00:17, 1.41MB/s]     43%|####3     | 18.0M/41.5M [00:20<00:17, 1.38MB/s]     44%|####4     | 18.3M/41.5M [00:20<00:14, 1.74MB/s]     44%|####4     | 18.4M/41.5M [00:21<00:14, 1.64MB/s]     45%|####4     | 18.6M/41.5M [00:21<00:16, 1.48MB/s]     46%|####5     | 19.0M/41.5M [00:21<00:13, 1.81MB/s]     46%|####6     | 19.2M/41.5M [00:21<00:14, 1.65MB/s]     47%|####6     | 19.4M/41.5M [00:21<00:14, 1.59MB/s]     48%|####7     | 19.7M/41.5M [00:21<00:11, 2.04MB/s]     48%|####8     | 20.0M/41.5M [00:21<00:11, 2.02MB/s]     49%|####8     | 20.2M/41.5M [00:22<00:11, 1.88MB/s]     50%|####9     | 20.6M/41.5M [00:22<00:09, 2.30MB/s]     50%|#####     | 20.8M/41.5M [00:22<00:10, 2.12MB/s]     51%|#####     | 21.1M/41.5M [00:22<00:11, 1.94MB/s]     52%|#####1    | 21.4M/41.5M [00:22<00:09, 2.14MB/s]     52%|#####2    | 21.7M/41.5M [00:22<00:08, 2.32MB/s]     53%|#####3    | 22.0M/41.5M [00:22<00:08, 2.53MB/s]     54%|#####3    | 22.4M/41.5M [00:22<00:08, 2.47MB/s]     54%|#####4    | 22.6M/41.5M [00:23<00:08, 2.32MB/s]     55%|#####5    | 22.9M/41.5M [00:23<00:08, 2.37MB/s]     56%|#####5    | 23.1M/41.5M [00:23<00:08, 2.34MB/s]     57%|#####6    | 23.5M/41.5M [00:23<00:07, 2.53MB/s]     57%|#####7    | 23.8M/41.5M [00:23<00:06, 2.71MB/s]     58%|#####8    | 24.2M/41.5M [00:23<00:06, 2.86MB/s]     59%|#####9    | 24.6M/41.5M [00:23<00:05, 3.11MB/s]     60%|######    | 25.0M/41.5M [00:23<00:05, 3.20MB/s]     61%|######1   | 25.5M/41.5M [00:24<00:05, 3.19MB/s]     62%|######2   | 25.9M/41.5M [00:24<00:04, 3.46MB/s]     63%|######3   | 26.2M/41.5M [00:24<00:04, 3.26MB/s]     64%|######4   | 26.6M/41.5M [00:24<00:04, 3.39MB/s]     65%|######5   | 27.1M/41.5M [00:24<00:04, 3.56MB/s]     66%|######6   | 27.6M/41.5M [00:24<00:03, 3.68MB/s]     68%|######7   | 28.1M/41.5M [00:24<00:03, 3.86MB/s]     69%|######8   | 28.5M/41.5M [00:24<00:03, 3.85MB/s]     70%|######9   | 28.9M/41.5M [00:25<00:03, 3.92MB/s]     71%|#######   | 29.3M/41.5M [00:25<00:03, 3.83MB/s]     72%|#######1  | 29.7M/41.5M [00:25<00:03, 3.95MB/s]     73%|#######2  | 30.2M/41.5M [00:25<00:02, 4.10MB/s]     75%|#######4  | 30.9M/41.5M [00:25<00:02, 4.22MB/s]     76%|#######5  | 31.3M/41.5M [00:25<00:03, 3.08MB/s]     79%|#######8  | 32.6M/41.5M [00:25<00:02, 4.57MB/s]     80%|#######9  | 33.1M/41.5M [00:26<00:01, 4.45MB/s]     81%|########  | 33.5M/41.5M [00:26<00:02, 3.99MB/s]     82%|########1 | 34.0M/41.5M [00:26<00:02, 3.76MB/s]     83%|########3 | 34.5M/41.5M [00:26<00:01, 4.08MB/s]     84%|########4 | 34.9M/41.5M [00:26<00:01, 3.82MB/s]     85%|########5 | 35.4M/41.5M [00:26<00:01, 4.04MB/s]     86%|########6 | 35.8M/41.5M [00:26<00:01, 4.01MB/s]     87%|########7 | 36.2M/41.5M [00:26<00:01, 3.39MB/s]     88%|########8 | 36.6M/41.5M [00:27<00:01, 3.66MB/s]     89%|########9 | 37.1M/41.5M [00:27<00:01, 3.78MB/s]     91%|######### | 37.7M/41.5M [00:27<00:00, 4.15MB/s]     92%|#########2| 38.2M/41.5M [00:27<00:00, 4.21MB/s]     93%|#########3| 38.6M/41.5M [00:27<00:00, 3.96MB/s]     94%|#########4| 39.0M/41.5M [00:27<00:00, 3.95MB/s]     95%|#########4| 39.4M/41.5M [00:27<00:00, 3.88MB/s]     96%|#########6| 39.8M/41.5M [00:27<00:00, 3.89MB/s]     97%|#########6| 40.2M/41.5M [00:28<00:00, 3.87MB/s]     98%|#########8| 40.7M/41.5M [00:28<00:00, 4.07MB/s]     99%|#########9| 41.1M/41.5M [00:28<00:00, 4.21MB/s]    100%|##########| 41.5M/41.5M [00:28<00:00, 1.54MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 64-67

Load a test image
-----------------
Classic cat example!

.. GENERATED FROM PYTHON SOURCE LINES 67-87

.. code-block:: default

    from PIL import Image

    img_url = "https://github.com/dmlc/mxnet.js/blob/main/data/cat.png?raw=true"
    img_path = download_testdata(img_url, "cat.png", module="data")
    img = Image.open(img_path).resize((224, 224))

    # Preprocess the image and convert to tensor
    from flowvision import transforms

    my_preprocess = transforms.Compose(
        [
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
        ]
    )
    img = my_preprocess(img)
    img = np.expand_dims(img.numpy(), 0)








.. GENERATED FROM PYTHON SOURCE LINES 88-91

Import the graph to Relay
-------------------------
Convert OneFlow graph to Relay graph. The input name can be arbitrary.

.. GENERATED FROM PYTHON SOURCE LINES 91-106

.. code-block:: default

    class Graph(flow.nn.Graph):
        def __init__(self, module):
            super().__init__()
            self.m = module

        def build(self, x):
            out = self.m(x)
            return out


    graph = Graph(model)
    _ = graph._compile(flow.randn(1, 3, 224, 224))

    mod, params = relay.frontend.from_oneflow(graph, model_dir)








.. GENERATED FROM PYTHON SOURCE LINES 107-110

Relay Build
-----------
Compile the graph to llvm target with given input specification.

.. GENERATED FROM PYTHON SOURCE LINES 110-115

.. code-block:: default

    target = tvm.target.Target("llvm", host="llvm")
    dev = tvm.cpu(0)
    with tvm.transform.PassContext(opt_level=3):
        lib = relay.build(mod, target=target, params=params)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /workspace/python/tvm/driver/build_module.py:264: UserWarning: target_host parameter is going to be deprecated. Please pass in tvm.target.Target(target, host=target_host) instead.
      "target_host parameter is going to be deprecated. "




.. GENERATED FROM PYTHON SOURCE LINES 116-119

Execute the portable graph on TVM
---------------------------------
Now we can try deploying the compiled model on target.

.. GENERATED FROM PYTHON SOURCE LINES 119-127

.. code-block:: default

    target = "cuda"
    with tvm.transform.PassContext(opt_level=10):
        intrp = relay.build_module.create_executor("graph", mod, tvm.cuda(0), target)

    print(type(img))
    print(img.shape)
    tvm_output = intrp.evaluate()(tvm.nd.array(img.astype("float32")), **params)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'numpy.ndarray'>
    (1, 3, 224, 224)




.. GENERATED FROM PYTHON SOURCE LINES 128-131

Look up synset name
-------------------
Look up prediction top 1 index in 1000 class synset.

.. GENERATED FROM PYTHON SOURCE LINES 131-178

.. code-block:: default

    synset_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_synsets.txt",
        ]
    )
    synset_name = "imagenet_synsets.txt"
    synset_path = download_testdata(synset_url, synset_name, module="data")
    with open(synset_path) as f:
        synsets = f.readlines()

    synsets = [x.strip() for x in synsets]
    splits = [line.split(" ") for line in synsets]
    key_to_classname = {spl[0]: " ".join(spl[1:]) for spl in splits}

    class_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_classes.txt",
        ]
    )
    class_name = "imagenet_classes.txt"
    class_path = download_testdata(class_url, class_name, module="data")
    with open(class_path) as f:
        class_id_to_key = f.readlines()

    class_id_to_key = [x.strip() for x in class_id_to_key]

    # Get top-1 result for TVM
    top1_tvm = np.argmax(tvm_output.numpy()[0])
    tvm_class_key = class_id_to_key[top1_tvm]

    # Convert input to OneFlow variable and get OneFlow result for comparison
    with flow.no_grad():
        torch_img = flow.from_numpy(img)
        output = model(torch_img)

        # Get top-1 result for OneFlow
        top_oneflow = np.argmax(output.numpy())
        oneflow_class_key = class_id_to_key[top_oneflow]

    print("Relay top-1 id: {}, class name: {}".format(top1_tvm, key_to_classname[tvm_class_key]))
    print(
        "OneFlow top-1 id: {}, class name: {}".format(top_oneflow, key_to_classname[oneflow_class_key])
    )




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Relay top-1 id: 281, class name: tabby, tabby cat
    OneFlow top-1 id: 281, class name: tabby, tabby cat





.. _sphx_glr_download_how_to_compile_models_from_oneflow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: from_oneflow.py <from_oneflow.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: from_oneflow.ipynb <from_oneflow.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
