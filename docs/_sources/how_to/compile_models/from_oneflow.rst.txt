.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_how_to_compile_models_from_oneflow.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_compile_models_from_oneflow.py:


Compile OneFlow Models
======================
**Author**: `Xiaoyu Zhang <https://github.com/BBuf/>`_

This article is an introductory tutorial to deploy OneFlow models with Relay.

For us to begin with, OneFlow package should be installed.

A quick solution is to install via pip

.. code-block:: bash

    pip install flowvision==0.1.0
    python3 -m pip install -f https://release.oneflow.info oneflow==0.7.0+cpu

or please refer to official site:
https://github.com/Oneflow-Inc/oneflow

Currently, TVM supports OneFlow 0.7.0. Other versions may be unstable.


.. code-block:: default

    import os, math
    from matplotlib import pyplot as plt
    import numpy as np
    from PIL import Image

    # oneflow imports
    import flowvision
    import oneflow as flow
    import oneflow.nn as nn

    import tvm
    from tvm import relay
    from tvm.contrib.download import download_testdata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional_pil.py:193: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      def resize(img, size, interpolation=Image.BILINEAR):
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:65: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
      Image.NEAREST: "nearest",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:66: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      Image.BILINEAR: "bilinear",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:67: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
      Image.BICUBIC: "bicubic",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:68: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
      Image.BOX: "box",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:69: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
      Image.HAMMING: "hamming",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:70: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
      Image.LANCZOS: "lanczos",
    /usr/local/lib/python3.7/dist-packages/flowvision/data/auto_augment.py:28: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      _RANDOM_INTERPOLATION = (Image.BILINEAR, Image.BICUBIC)
    /usr/local/lib/python3.7/dist-packages/flowvision/data/auto_augment.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
      _RANDOM_INTERPOLATION = (Image.BILINEAR, Image.BICUBIC)



Load a pretrained OneFlow model and save model
----------------------------------------------


.. code-block:: default

    model_name = "resnet18"
    model = getattr(flowvision.models, model_name)(pretrained=True)
    model = model.eval()

    model_dir = "resnet18_model"
    if not os.path.exists(model_dir):
        flow.save(model.state_dict(), model_dir)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Downloading: "https://oneflow-public.oss-cn-beijing.aliyuncs.com/model_zoo/flowvision/classification/ResNet/resnet18.zip" to /workspace/.oneflow/flowvision_cache/resnet18.zip
      0%|          | 0.00/41.5M [00:00<?, ?B/s]      0%|          | 16.0k/41.5M [00:00<07:39, 94.6kB/s]      0%|          | 32.0k/41.5M [00:00<07:41, 94.2kB/s]      0%|          | 48.0k/41.5M [00:00<07:41, 94.1kB/s]      0%|          | 64.0k/41.5M [00:00<07:41, 94.1kB/s]      0%|          | 80.0k/41.5M [00:00<07:41, 94.0kB/s]      0%|          | 96.0k/41.5M [00:01<07:41, 94.0kB/s]      0%|          | 112k/41.5M [00:01<07:41, 94.0kB/s]       0%|          | 128k/41.5M [00:01<07:41, 94.0kB/s]      0%|          | 144k/41.5M [00:01<07:41, 94.0kB/s]      0%|          | 168k/41.5M [00:01<06:39, 109kB/s]       0%|          | 184k/41.5M [00:01<06:56, 104kB/s]      0%|          | 208k/41.5M [00:02<06:15, 115kB/s]      1%|          | 232k/41.5M [00:02<05:51, 123kB/s]      1%|          | 256k/41.5M [00:02<05:36, 129kB/s]      1%|          | 280k/41.5M [00:02<05:26, 132kB/s]      1%|          | 304k/41.5M [00:02<05:20, 135kB/s]      1%|          | 328k/41.5M [00:02<05:15, 137kB/s]      1%|          | 360k/41.5M [00:03<04:43, 152kB/s]      1%|          | 392k/41.5M [00:03<04:24, 163kB/s]      1%|          | 424k/41.5M [00:03<04:12, 170kB/s]      1%|1         | 464k/41.5M [00:03<03:46, 190kB/s]      1%|1         | 496k/41.5M [00:03<03:47, 189kB/s]      1%|1         | 544k/41.5M [00:04<03:17, 217kB/s]      1%|1         | 592k/41.5M [00:04<03:01, 237kB/s]      2%|1         | 648k/41.5M [00:04<02:42, 264kB/s]      2%|1         | 704k/41.5M [00:04<02:30, 284kB/s]      2%|1         | 768k/41.5M [00:04<02:17, 311kB/s]      2%|1         | 840k/41.5M [00:04<02:03, 345kB/s]      2%|2         | 920k/41.5M [00:05<01:51, 382kB/s]      2%|2         | 0.98M/41.5M [00:05<01:43, 409kB/s]      3%|2         | 1.06M/41.5M [00:05<01:36, 441kB/s]      3%|2         | 1.16M/41.5M [00:05<01:25, 492kB/s]      3%|3         | 1.27M/41.5M [00:05<01:19, 528kB/s]      3%|3         | 1.38M/41.5M [00:05<01:12, 581kB/s]      4%|3         | 1.51M/41.5M [00:06<01:06, 632kB/s]      4%|3         | 1.64M/41.5M [00:06<01:01, 682kB/s]      4%|4         | 1.79M/41.5M [00:06<00:55, 745kB/s]      5%|4         | 1.95M/41.5M [00:06<00:51, 804kB/s]      5%|5         | 2.12M/41.5M [00:06<00:47, 873kB/s]      6%|5         | 2.30M/41.5M [00:06<00:43, 935kB/s]      6%|5         | 2.48M/41.5M [00:07<00:41, 994kB/s]      6%|6         | 2.70M/41.5M [00:07<00:37, 1.08MB/s]      7%|7         | 2.91M/41.5M [00:07<00:35, 1.15MB/s]      8%|7         | 3.16M/41.5M [00:07<00:32, 1.24MB/s]      8%|8         | 3.41M/41.5M [00:07<00:30, 1.32MB/s]      9%|8         | 3.68M/41.5M [00:08<00:27, 1.42MB/s]     10%|9         | 3.97M/41.5M [00:08<00:25, 1.51MB/s]     10%|#         | 4.27M/41.5M [00:08<00:24, 1.61MB/s]     11%|#1        | 4.60M/41.5M [00:08<00:22, 1.72MB/s]     12%|#1        | 4.95M/41.5M [00:08<00:21, 1.82MB/s]     13%|#2        | 5.31M/41.5M [00:08<00:19, 1.94MB/s]     14%|#3        | 5.70M/41.5M [00:09<00:18, 2.06MB/s]     15%|#4        | 6.12M/41.5M [00:09<00:16, 2.19MB/s]     16%|#5        | 6.55M/41.5M [00:09<00:15, 2.31MB/s]     17%|#6        | 7.01M/41.5M [00:09<00:14, 2.45MB/s]     18%|#8        | 7.49M/41.5M [00:09<00:13, 2.59MB/s]     19%|#9        | 8.01M/41.5M [00:09<00:12, 2.74MB/s]     21%|##        | 8.55M/41.5M [00:10<00:11, 2.89MB/s]     22%|##1       | 9.12M/41.5M [00:10<00:11, 3.05MB/s]     23%|##3       | 9.72M/41.5M [00:10<00:10, 3.22MB/s]     25%|##4       | 10.3M/41.5M [00:10<00:09, 3.39MB/s]     27%|##6       | 11.0M/41.5M [00:10<00:08, 3.57MB/s]     28%|##8       | 11.7M/41.5M [00:10<00:08, 3.75MB/s]     30%|##9       | 12.4M/41.5M [00:11<00:07, 3.94MB/s]     32%|###1      | 13.2M/41.5M [00:11<00:07, 4.14MB/s]     34%|###3      | 14.0M/41.5M [00:11<00:06, 4.36MB/s]     36%|###5      | 14.9M/41.5M [00:11<00:06, 4.58MB/s]     38%|###7      | 15.7M/41.5M [00:11<00:05, 4.81MB/s]     40%|####      | 16.7M/41.5M [00:12<00:05, 5.04MB/s]     43%|####2     | 17.7M/41.5M [00:12<00:04, 5.30MB/s]     45%|####5     | 18.7M/41.5M [00:12<00:04, 5.54MB/s]     48%|####7     | 19.8M/41.5M [00:12<00:03, 5.84MB/s]     50%|#####     | 20.9M/41.5M [00:12<00:03, 6.13MB/s]     53%|#####3    | 22.1M/41.5M [00:12<00:02, 7.11MB/s]     56%|#####6    | 23.3M/41.5M [00:13<00:02, 7.24MB/s]     59%|#####9    | 24.6M/41.5M [00:13<00:02, 6.77MB/s]     63%|######2   | 26.0M/41.5M [00:13<00:02, 7.22MB/s]     66%|######6   | 27.5M/41.5M [00:13<00:01, 7.64MB/s]     70%|######9   | 28.9M/41.5M [00:13<00:01, 7.99MB/s]     73%|#######3  | 30.4M/41.5M [00:13<00:01, 8.24MB/s]     77%|#######6  | 31.9M/41.5M [00:14<00:01, 8.44MB/s]     80%|########  | 33.4M/41.5M [00:14<00:00, 8.58MB/s]     84%|########3 | 34.8M/41.5M [00:14<00:00, 8.66MB/s]     87%|########7 | 36.3M/41.5M [00:14<00:00, 8.71MB/s]     91%|#########1| 37.8M/41.5M [00:14<00:00, 8.76MB/s]     95%|#########4| 39.2M/41.5M [00:14<00:00, 8.78MB/s]     98%|#########8| 40.7M/41.5M [00:15<00:00, 8.78MB/s]    100%|##########| 41.5M/41.5M [00:15<00:00, 2.87MB/s]



Load a test image
-----------------
Classic cat example!


.. code-block:: default

    from PIL import Image

    img_url = "https://github.com/dmlc/mxnet.js/blob/main/data/cat.png?raw=true"
    img_path = download_testdata(img_url, "cat.png", module="data")
    img = Image.open(img_path).resize((224, 224))

    # Preprocess the image and convert to tensor
    from flowvision import transforms

    my_preprocess = transforms.Compose(
        [
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
        ]
    )
    img = my_preprocess(img)
    img = np.expand_dims(img.numpy(), 0)







Import the graph to Relay
-------------------------
Convert OneFlow graph to Relay graph. The input name can be arbitrary.


.. code-block:: default

    class Graph(flow.nn.Graph):
        def __init__(self, module):
            super().__init__()
            self.m = module

        def build(self, x):
            out = self.m(x)
            return out


    graph = Graph(model)
    _ = graph._compile(flow.randn(1, 3, 224, 224))

    mod, params = relay.frontend.from_oneflow(graph, model_dir)







Relay Build
-----------
Compile the graph to llvm target with given input specification.


.. code-block:: default

    target = tvm.target.Target("llvm", host="llvm")
    dev = tvm.cpu(0)
    with tvm.transform.PassContext(opt_level=3):
        lib = relay.build(mod, target=target, params=params)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /workspace/python/tvm/driver/build_module.py:264: UserWarning: target_host parameter is going to be deprecated. Please pass in tvm.target.Target(target, host=target_host) instead.
      "target_host parameter is going to be deprecated. "



Execute the portable graph on TVM
---------------------------------
Now we can try deploying the compiled model on target.


.. code-block:: default

    target = "cuda"
    with tvm.transform.PassContext(opt_level=10):
        intrp = relay.build_module.create_executor("graph", mod, tvm.cuda(0), target)

    print(type(img))
    print(img.shape)
    tvm_output = intrp.evaluate()(tvm.nd.array(img.astype("float32")), **params)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <class 'numpy.ndarray'>
    (1, 3, 224, 224)



Look up synset name
-------------------
Look up prediction top 1 index in 1000 class synset.


.. code-block:: default

    synset_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_synsets.txt",
        ]
    )
    synset_name = "imagenet_synsets.txt"
    synset_path = download_testdata(synset_url, synset_name, module="data")
    with open(synset_path) as f:
        synsets = f.readlines()

    synsets = [x.strip() for x in synsets]
    splits = [line.split(" ") for line in synsets]
    key_to_classname = {spl[0]: " ".join(spl[1:]) for spl in splits}

    class_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_classes.txt",
        ]
    )
    class_name = "imagenet_classes.txt"
    class_path = download_testdata(class_url, class_name, module="data")
    with open(class_path) as f:
        class_id_to_key = f.readlines()

    class_id_to_key = [x.strip() for x in class_id_to_key]

    # Get top-1 result for TVM
    top1_tvm = np.argmax(tvm_output.numpy()[0])
    tvm_class_key = class_id_to_key[top1_tvm]

    # Convert input to OneFlow variable and get OneFlow result for comparison
    with flow.no_grad():
        torch_img = flow.from_numpy(img)
        output = model(torch_img)

        # Get top-1 result for OneFlow
        top_oneflow = np.argmax(output.numpy())
        oneflow_class_key = class_id_to_key[top_oneflow]

    print("Relay top-1 id: {}, class name: {}".format(top1_tvm, key_to_classname[tvm_class_key]))
    print(
        "OneFlow top-1 id: {}, class name: {}".format(top_oneflow, key_to_classname[oneflow_class_key])
    )




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Relay top-1 id: 281, class name: tabby, tabby cat
    OneFlow top-1 id: 281, class name: tabby, tabby cat




.. _sphx_glr_download_how_to_compile_models_from_oneflow.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: from_oneflow.py <from_oneflow.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: from_oneflow.ipynb <from_oneflow.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
