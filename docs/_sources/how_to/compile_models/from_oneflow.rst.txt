
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/compile_models/from_oneflow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_compile_models_from_oneflow.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_compile_models_from_oneflow.py:


Compile OneFlow Models
======================
**Author**: `Xiaoyu Zhang <https://github.com/BBuf/>`_

This article is an introductory tutorial to deploy OneFlow models with Relay.

For us to begin with, OneFlow package should be installed.

A quick solution is to install via pip

.. code-block:: bash

    pip install flowvision==0.1.0
    python3 -m pip install -f https://release.oneflow.info oneflow==0.7.0+cpu

or please refer to official site:
https://github.com/Oneflow-Inc/oneflow

Currently, TVM supports OneFlow 0.7.0. Other versions may be unstable.

.. GENERATED FROM PYTHON SOURCE LINES 38-52

.. code-block:: default

    import os, math
    from matplotlib import pyplot as plt
    import numpy as np
    from PIL import Image

    # oneflow imports
    import flowvision
    import oneflow as flow
    import oneflow.nn as nn

    import tvm
    from tvm import relay
    from tvm.contrib.download import download_testdata





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional_pil.py:193: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      def resize(img, size, interpolation=Image.BILINEAR):
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:65: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
      Image.NEAREST: "nearest",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:66: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      Image.BILINEAR: "bilinear",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:67: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
      Image.BICUBIC: "bicubic",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:68: DeprecationWarning: BOX is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BOX instead.
      Image.BOX: "box",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:69: DeprecationWarning: HAMMING is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.HAMMING instead.
      Image.HAMMING: "hamming",
    /usr/local/lib/python3.7/dist-packages/flowvision/transforms/functional.py:70: DeprecationWarning: LANCZOS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.
      Image.LANCZOS: "lanczos",
    /usr/local/lib/python3.7/dist-packages/flowvision/data/auto_augment.py:28: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      _RANDOM_INTERPOLATION = (Image.BILINEAR, Image.BICUBIC)
    /usr/local/lib/python3.7/dist-packages/flowvision/data/auto_augment.py:28: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
      _RANDOM_INTERPOLATION = (Image.BILINEAR, Image.BICUBIC)




.. GENERATED FROM PYTHON SOURCE LINES 53-55

Load a pretrained OneFlow model and save model
----------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 55-63

.. code-block:: default

    model_name = "resnet18"
    model = getattr(flowvision.models, model_name)(pretrained=True)
    model = model.eval()

    model_dir = "resnet18_model"
    if not os.path.exists(model_dir):
        flow.save(model.state_dict(), model_dir)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://oneflow-public.oss-cn-beijing.aliyuncs.com/model_zoo/flowvision/classification/ResNet/resnet18.zip" to /workspace/.oneflow/flowvision_cache/resnet18.zip
      0%|          | 0.00/41.5M [00:00<?, ?B/s]      0%|          | 16.0k/41.5M [00:00<08:13, 88.2kB/s]      0%|          | 48.0k/41.5M [00:00<05:11, 140kB/s]       0%|          | 104k/41.5M [00:00<03:21, 216kB/s]       0%|          | 208k/41.5M [00:00<02:01, 356kB/s]      1%|1         | 432k/41.5M [00:00<01:04, 671kB/s]      2%|2         | 872k/41.5M [00:01<00:33, 1.26MB/s]      3%|3         | 1.40M/41.5M [00:01<00:22, 1.85MB/s]      5%|4         | 1.97M/41.5M [00:01<00:18, 2.28MB/s]      6%|6         | 2.57M/41.5M [00:01<00:15, 2.63MB/s]      8%|7         | 3.20M/41.5M [00:01<00:13, 2.91MB/s]      9%|9         | 3.86M/41.5M [00:02<00:12, 3.15MB/s]     11%|#         | 4.54M/41.5M [00:02<00:11, 3.35MB/s]     13%|#2        | 5.26M/41.5M [00:02<00:10, 3.56MB/s]     14%|#4        | 5.99M/41.5M [00:02<00:09, 3.73MB/s]     16%|#6        | 6.77M/41.5M [00:02<00:09, 3.93MB/s]     18%|#8        | 7.60M/41.5M [00:02<00:08, 4.14MB/s]     20%|##        | 8.45M/41.5M [00:03<00:07, 4.33MB/s]     23%|##2       | 9.35M/41.5M [00:03<00:07, 4.54MB/s]     25%|##4       | 10.3M/41.5M [00:03<00:05, 5.45MB/s]     26%|##6       | 10.9M/41.5M [00:03<00:06, 5.28MB/s]     27%|##7       | 11.4M/41.5M [00:03<00:06, 4.89MB/s]     29%|##8       | 11.9M/41.5M [00:03<00:07, 4.10MB/s]     31%|###1      | 13.0M/41.5M [00:04<00:06, 4.84MB/s]     33%|###3      | 13.7M/41.5M [00:04<00:06, 4.56MB/s]     35%|###4      | 14.4M/41.5M [00:04<00:06, 4.42MB/s]     37%|###6      | 15.2M/41.5M [00:04<00:06, 4.38MB/s]     39%|###8      | 16.0M/41.5M [00:04<00:06, 4.37MB/s]     40%|####      | 16.8M/41.5M [00:05<00:05, 4.40MB/s]     42%|####2     | 17.6M/41.5M [00:05<00:05, 4.45MB/s]     44%|####4     | 18.4M/41.5M [00:05<00:05, 4.51MB/s]     46%|####6     | 19.3M/41.5M [00:05<00:04, 5.21MB/s]     48%|####7     | 19.8M/41.5M [00:05<00:04, 5.07MB/s]     49%|####8     | 20.3M/41.5M [00:05<00:04, 4.68MB/s]     51%|#####     | 21.0M/41.5M [00:05<00:04, 4.69MB/s]     53%|#####2    | 21.9M/41.5M [00:06<00:03, 5.68MB/s]     54%|#####4    | 22.4M/41.5M [00:06<00:03, 5.00MB/s]     55%|#####5    | 23.0M/41.5M [00:06<00:04, 4.64MB/s]     57%|#####7    | 23.7M/41.5M [00:06<00:04, 4.41MB/s]     59%|#####9    | 24.6M/41.5M [00:06<00:03, 4.65MB/s]     61%|######1   | 25.5M/41.5M [00:06<00:03, 4.82MB/s]     64%|######3   | 26.4M/41.5M [00:07<00:03, 4.96MB/s]     66%|######5   | 27.4M/41.5M [00:07<00:02, 5.04MB/s]     68%|######8   | 28.3M/41.5M [00:07<00:02, 5.14MB/s]     71%|#######   | 29.3M/41.5M [00:07<00:02, 5.22MB/s]     73%|#######2  | 30.2M/41.5M [00:07<00:02, 5.27MB/s]     75%|#######5  | 31.2M/41.5M [00:07<00:01, 5.83MB/s]     77%|#######6  | 31.8M/41.5M [00:08<00:01, 5.91MB/s]     78%|#######8  | 32.4M/41.5M [00:08<00:01, 5.41MB/s]     80%|#######9  | 33.1M/41.5M [00:08<00:01, 5.64MB/s]     81%|########1 | 33.7M/41.5M [00:08<00:01, 5.78MB/s]     83%|########2 | 34.3M/41.5M [00:08<00:01, 5.24MB/s]     85%|########4 | 35.1M/41.5M [00:08<00:01, 5.02MB/s]     87%|########7 | 36.1M/41.5M [00:08<00:01, 5.19MB/s]     89%|########9 | 37.1M/41.5M [00:09<00:00, 5.32MB/s]     92%|#########1| 38.1M/41.5M [00:09<00:00, 5.41MB/s]     94%|#########4| 39.1M/41.5M [00:09<00:00, 5.48MB/s]     97%|#########6| 40.1M/41.5M [00:09<00:00, 6.05MB/s]     99%|#########8| 40.9M/41.5M [00:09<00:00, 6.50MB/s]    100%|##########| 41.5M/41.5M [00:09<00:00, 4.39MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 64-67

Load a test image
-----------------
Classic cat example!

.. GENERATED FROM PYTHON SOURCE LINES 67-87

.. code-block:: default

    from PIL import Image

    img_url = "https://github.com/dmlc/mxnet.js/blob/main/data/cat.png?raw=true"
    img_path = download_testdata(img_url, "cat.png", module="data")
    img = Image.open(img_path).resize((224, 224))

    # Preprocess the image and convert to tensor
    from flowvision import transforms

    my_preprocess = transforms.Compose(
        [
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
        ]
    )
    img = my_preprocess(img)
    img = np.expand_dims(img.numpy(), 0)








.. GENERATED FROM PYTHON SOURCE LINES 88-91

Import the graph to Relay
-------------------------
Convert OneFlow graph to Relay graph. The input name can be arbitrary.

.. GENERATED FROM PYTHON SOURCE LINES 91-106

.. code-block:: default

    class Graph(flow.nn.Graph):
        def __init__(self, module):
            super().__init__()
            self.m = module

        def build(self, x):
            out = self.m(x)
            return out


    graph = Graph(model)
    _ = graph._compile(flow.randn(1, 3, 224, 224))

    mod, params = relay.frontend.from_oneflow(graph, model_dir)








.. GENERATED FROM PYTHON SOURCE LINES 107-110

Relay Build
-----------
Compile the graph to llvm target with given input specification.

.. GENERATED FROM PYTHON SOURCE LINES 110-115

.. code-block:: default

    target = tvm.target.Target("llvm", host="llvm")
    dev = tvm.cpu(0)
    with tvm.transform.PassContext(opt_level=3):
        lib = relay.build(mod, target=target, params=params)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /workspace/python/tvm/driver/build_module.py:264: UserWarning: target_host parameter is going to be deprecated. Please pass in tvm.target.Target(target, host=target_host) instead.
      "target_host parameter is going to be deprecated. "




.. GENERATED FROM PYTHON SOURCE LINES 116-119

Execute the portable graph on TVM
---------------------------------
Now we can try deploying the compiled model on target.

.. GENERATED FROM PYTHON SOURCE LINES 119-127

.. code-block:: default

    target = "cuda"
    with tvm.transform.PassContext(opt_level=10):
        intrp = relay.build_module.create_executor("graph", mod, tvm.cuda(0), target)

    print(type(img))
    print(img.shape)
    tvm_output = intrp.evaluate()(tvm.nd.array(img.astype("float32")), **params)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'numpy.ndarray'>
    (1, 3, 224, 224)




.. GENERATED FROM PYTHON SOURCE LINES 128-131

Look up synset name
-------------------
Look up prediction top 1 index in 1000 class synset.

.. GENERATED FROM PYTHON SOURCE LINES 131-178

.. code-block:: default

    synset_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_synsets.txt",
        ]
    )
    synset_name = "imagenet_synsets.txt"
    synset_path = download_testdata(synset_url, synset_name, module="data")
    with open(synset_path) as f:
        synsets = f.readlines()

    synsets = [x.strip() for x in synsets]
    splits = [line.split(" ") for line in synsets]
    key_to_classname = {spl[0]: " ".join(spl[1:]) for spl in splits}

    class_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_classes.txt",
        ]
    )
    class_name = "imagenet_classes.txt"
    class_path = download_testdata(class_url, class_name, module="data")
    with open(class_path) as f:
        class_id_to_key = f.readlines()

    class_id_to_key = [x.strip() for x in class_id_to_key]

    # Get top-1 result for TVM
    top1_tvm = np.argmax(tvm_output.numpy()[0])
    tvm_class_key = class_id_to_key[top1_tvm]

    # Convert input to OneFlow variable and get OneFlow result for comparison
    with flow.no_grad():
        torch_img = flow.from_numpy(img)
        output = model(torch_img)

        # Get top-1 result for OneFlow
        top_oneflow = np.argmax(output.numpy())
        oneflow_class_key = class_id_to_key[top_oneflow]

    print("Relay top-1 id: {}, class name: {}".format(top1_tvm, key_to_classname[tvm_class_key]))
    print(
        "OneFlow top-1 id: {}, class name: {}".format(top_oneflow, key_to_classname[oneflow_class_key])
    )




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Relay top-1 id: 281, class name: tabby, tabby cat
    OneFlow top-1 id: 281, class name: tabby, tabby cat





.. _sphx_glr_download_how_to_compile_models_from_oneflow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: from_oneflow.py <from_oneflow.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: from_oneflow.ipynb <from_oneflow.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
