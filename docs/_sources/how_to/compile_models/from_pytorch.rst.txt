.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_how_to_compile_models_from_pytorch.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_compile_models_from_pytorch.py:


Compile PyTorch Models
======================
**Author**: `Alex Wong <https://github.com/alexwong/>`_

This article is an introductory tutorial to deploy PyTorch models with Relay.

For us to begin with, PyTorch should be installed.
TorchVision is also required since we will be using it as our model zoo.

A quick solution is to install via pip

.. code-block:: bash

    pip install torch==1.7.0
    pip install torchvision==0.8.1

or please refer to official site
https://pytorch.org/get-started/locally/

PyTorch versions should be backwards compatible but should be used
with the proper TorchVision version.

Currently, TVM supports PyTorch 1.7 and 1.4. Other versions may
be unstable.


.. code-block:: default


    import tvm
    from tvm import relay

    import numpy as np

    from tvm.contrib.download import download_testdata

    # PyTorch imports
    import torch
    import torchvision







Load a pretrained PyTorch model
-------------------------------


.. code-block:: default

    model_name = "resnet18"
    model = getattr(torchvision.models, model_name)(pretrained=True)
    model = model.eval()

    # We grab the TorchScripted model via tracing
    input_shape = [1, 3, 224, 224]
    input_data = torch.randn(input_shape)
    scripted_model = torch.jit.trace(model, input_data).eval()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/resnet18-f37072fd.pth" to /workspace/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth
      0%|          | 0.00/44.7M [00:00<?, ?B/s]      0%|          | 40.0k/44.7M [00:00<04:38, 168kB/s]      0%|          | 80.0k/44.7M [00:00<03:03, 255kB/s]      0%|          | 112k/44.7M [00:00<03:21, 232kB/s]       0%|          | 184k/44.7M [00:00<02:08, 362kB/s]      1%|          | 248k/44.7M [00:00<01:45, 442kB/s]      1%|          | 344k/44.7M [00:00<01:21, 569kB/s]      1%|1         | 464k/44.7M [00:00<01:01, 754kB/s]      1%|1         | 664k/44.7M [00:01<00:41, 1.10MB/s]      2%|1         | 896k/44.7M [00:01<00:31, 1.45MB/s]      3%|2         | 1.19M/44.7M [00:01<00:23, 1.97MB/s]      4%|3         | 1.62M/44.7M [00:01<00:16, 2.72MB/s]      5%|4         | 2.21M/44.7M [00:01<00:12, 3.71MB/s]      7%|6         | 2.99M/44.7M [00:01<00:08, 5.02MB/s]      8%|7         | 3.54M/44.7M [00:01<00:08, 5.22MB/s]     10%|9         | 4.25M/44.7M [00:01<00:07, 5.88MB/s]     11%|#         | 4.86M/44.7M [00:01<00:06, 5.98MB/s]     12%|#2        | 5.55M/44.7M [00:01<00:06, 6.30MB/s]     14%|#3        | 6.22M/44.7M [00:02<00:06, 6.50MB/s]     15%|#5        | 6.84M/44.7M [00:02<00:06, 6.49MB/s]     17%|#6        | 7.58M/44.7M [00:02<00:05, 6.85MB/s]     18%|#8        | 8.23M/44.7M [00:02<00:05, 6.58MB/s]     20%|##        | 9.00M/44.7M [00:02<00:05, 6.99MB/s]     22%|##1       | 9.67M/44.7M [00:02<00:05, 6.58MB/s]     23%|##3       | 10.4M/44.7M [00:02<00:05, 6.73MB/s]     25%|##4       | 11.0M/44.7M [00:02<00:05, 6.70MB/s]     26%|##6       | 11.7M/44.7M [00:02<00:05, 6.78MB/s]     28%|##7       | 12.3M/44.7M [00:03<00:05, 6.75MB/s]     29%|##9       | 13.0M/44.7M [00:03<00:04, 6.81MB/s]     31%|###       | 13.7M/44.7M [00:03<00:04, 6.88MB/s]     32%|###2      | 14.3M/44.7M [00:03<00:04, 6.81MB/s]     34%|###3      | 15.0M/44.7M [00:03<00:04, 6.88MB/s]     35%|###5      | 15.7M/44.7M [00:03<00:04, 6.75MB/s]     37%|###6      | 16.4M/44.7M [00:03<00:04, 6.85MB/s]     38%|###8      | 17.0M/44.7M [00:03<00:04, 6.83MB/s]     40%|###9      | 17.7M/44.7M [00:03<00:04, 6.83MB/s]     41%|####1     | 18.3M/44.7M [00:03<00:04, 6.82MB/s]     43%|####2     | 19.0M/44.7M [00:04<00:03, 6.85MB/s]     44%|####4     | 19.7M/44.7M [00:04<00:03, 6.87MB/s]     46%|####5     | 20.3M/44.7M [00:04<00:03, 6.83MB/s]     47%|####7     | 21.0M/44.7M [00:04<00:03, 6.87MB/s]     49%|####8     | 21.7M/44.7M [00:04<00:03, 6.80MB/s]     50%|#####     | 22.4M/44.7M [00:04<00:03, 6.87MB/s]     52%|#####1    | 23.0M/44.7M [00:04<00:03, 6.80MB/s]     53%|#####3    | 23.7M/44.7M [00:04<00:03, 6.84MB/s]     54%|#####4    | 24.3M/44.7M [00:04<00:03, 6.79MB/s]     56%|#####5    | 25.0M/44.7M [00:04<00:03, 6.85MB/s]     58%|#####7    | 25.7M/44.7M [00:05<00:02, 6.85MB/s]     59%|#####8    | 26.3M/44.7M [00:05<00:02, 6.81MB/s]     61%|######    | 27.0M/44.7M [00:05<00:02, 6.90MB/s]     62%|######1   | 27.7M/44.7M [00:05<00:02, 6.80MB/s]     64%|######3   | 28.4M/44.7M [00:05<00:02, 6.89MB/s]     65%|######5   | 29.0M/44.7M [00:05<00:02, 6.86MB/s]     67%|######6   | 29.7M/44.7M [00:05<00:02, 6.84MB/s]     68%|######7   | 30.4M/44.7M [00:05<00:02, 6.83MB/s]     69%|######9   | 31.0M/44.7M [00:05<00:02, 6.87MB/s]     71%|#######   | 31.7M/44.7M [00:05<00:01, 6.85MB/s]     72%|#######2  | 32.3M/44.7M [00:06<00:01, 6.83MB/s]     74%|#######3  | 33.0M/44.7M [00:06<00:01, 6.89MB/s]     75%|#######5  | 33.7M/44.7M [00:06<00:01, 6.77MB/s]     77%|#######6  | 34.4M/44.7M [00:06<00:01, 6.89MB/s]     78%|#######8  | 35.0M/44.7M [00:06<00:01, 6.83MB/s]     80%|#######9  | 35.7M/44.7M [00:06<00:01, 6.87MB/s]     81%|########1 | 36.4M/44.7M [00:06<00:01, 6.83MB/s]     83%|########2 | 37.0M/44.7M [00:06<00:01, 6.89MB/s]     84%|########4 | 37.7M/44.7M [00:06<00:01, 6.85MB/s]     86%|########5 | 38.4M/44.7M [00:06<00:00, 6.79MB/s]     87%|########7 | 39.0M/44.7M [00:07<00:00, 6.89MB/s]     89%|########8 | 39.7M/44.7M [00:07<00:00, 6.83MB/s]     90%|######### | 40.4M/44.7M [00:07<00:00, 6.86MB/s]     92%|#########1| 41.0M/44.7M [00:07<00:00, 6.80MB/s]     93%|#########3| 41.7M/44.7M [00:07<00:00, 6.83MB/s]     95%|#########4| 42.4M/44.7M [00:07<00:00, 6.83MB/s]     96%|#########6| 43.0M/44.7M [00:07<00:00, 6.89MB/s]     98%|#########7| 43.7M/44.7M [00:07<00:00, 6.91MB/s]     99%|#########9| 44.4M/44.7M [00:07<00:00, 6.80MB/s]    100%|##########| 44.7M/44.7M [00:07<00:00, 5.88MB/s]



Load a test image
-----------------
Classic cat example!


.. code-block:: default

    from PIL import Image

    img_url = "https://github.com/dmlc/mxnet.js/blob/main/data/cat.png?raw=true"
    img_path = download_testdata(img_url, "cat.png", module="data")
    img = Image.open(img_path).resize((224, 224))

    # Preprocess the image and convert to tensor
    from torchvision import transforms

    my_preprocess = transforms.Compose(
        [
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
        ]
    )
    img = my_preprocess(img)
    img = np.expand_dims(img, 0)







Import the graph to Relay
-------------------------
Convert PyTorch graph to Relay graph. The input name can be arbitrary.


.. code-block:: default

    input_name = "input0"
    shape_list = [(input_name, img.shape)]
    mod, params = relay.frontend.from_pytorch(scripted_model, shape_list)







Relay Build
-----------
Compile the graph to llvm target with given input specification.


.. code-block:: default

    target = tvm.target.Target("llvm", host="llvm")
    dev = tvm.cpu(0)
    with tvm.transform.PassContext(opt_level=3):
        lib = relay.build(mod, target=target, params=params)







Execute the portable graph on TVM
---------------------------------
Now we can try deploying the compiled model on target.


.. code-block:: default

    from tvm.contrib import graph_executor

    dtype = "float32"
    m = graph_executor.GraphModule(lib["default"](dev))
    # Set inputs
    m.set_input(input_name, tvm.nd.array(img.astype(dtype)))
    # Execute
    m.run()
    # Get outputs
    tvm_output = m.get_output(0)







Look up synset name
-------------------
Look up prediction top 1 index in 1000 class synset.


.. code-block:: default

    synset_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_synsets.txt",
        ]
    )
    synset_name = "imagenet_synsets.txt"
    synset_path = download_testdata(synset_url, synset_name, module="data")
    with open(synset_path) as f:
        synsets = f.readlines()

    synsets = [x.strip() for x in synsets]
    splits = [line.split(" ") for line in synsets]
    key_to_classname = {spl[0]: " ".join(spl[1:]) for spl in splits}

    class_url = "".join(
        [
            "https://raw.githubusercontent.com/Cadene/",
            "pretrained-models.pytorch/master/data/",
            "imagenet_classes.txt",
        ]
    )
    class_name = "imagenet_classes.txt"
    class_path = download_testdata(class_url, class_name, module="data")
    with open(class_path) as f:
        class_id_to_key = f.readlines()

    class_id_to_key = [x.strip() for x in class_id_to_key]

    # Get top-1 result for TVM
    top1_tvm = np.argmax(tvm_output.numpy()[0])
    tvm_class_key = class_id_to_key[top1_tvm]

    # Convert input to PyTorch variable and get PyTorch result for comparison
    with torch.no_grad():
        torch_img = torch.from_numpy(img)
        output = model(torch_img)

        # Get top-1 result for PyTorch
        top1_torch = np.argmax(output.numpy())
        torch_class_key = class_id_to_key[top1_torch]

    print("Relay top-1 id: {}, class name: {}".format(top1_tvm, key_to_classname[tvm_class_key]))
    print("Torch top-1 id: {}, class name: {}".format(top1_torch, key_to_classname[torch_class_key]))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Relay top-1 id: 281, class name: tabby, tabby cat
    Torch top-1 id: 281, class name: tabby, tabby cat




.. _sphx_glr_download_how_to_compile_models_from_pytorch.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: from_pytorch.py <from_pytorch.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: from_pytorch.ipynb <from_pytorch.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
