.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    compute(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (compute[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the master process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.


.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none






We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Lowered TIR:
    primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"global_symbol": "main", "tir.noalias": True}
      buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [1, 512, 7, 7], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [1, 512, 1, 1], []),
                 data: Buffer(data_2: Pointer(float32), float32, [1, 512, 7, 7], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [512, 512, 3, 3], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 16;
      attr [compute_3: Pointer(local float32)] "storage_scope" = "local";
      allocate(compute_3, float32, [14]);
      attr [pad_temp.shared: Pointer(shared float32)] "storage_scope" = "shared";
      allocate(pad_temp.shared, float32, [252]);
      attr [kernel.shared: Pointer(shared float32)] "storage_scope" = "shared";
      allocate(kernel.shared, float32, [384]);
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112 {
        compute_3[0] = 0f32
        compute_3[7] = 0f32
        compute_3[1] = 0f32
        compute_3[8] = 0f32
        compute_3[2] = 0f32
        compute_3[9] = 0f32
        compute_3[3] = 0f32
        compute_3[10] = 0f32
        compute_3[4] = 0f32
        compute_3[11] = 0f32
        compute_3[5] = 0f32
        compute_3[12] = 0f32
        compute_3[6] = 0f32
        compute_3[13] = 0f32
        for (rc.outer.outer: int32, 0, 128) {
          for (rx.outer.outer: int32, 0, 3) {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            pad_temp.shared[threadIdx.x_1] = @tir.if_then_else(((((7 <= floormod(threadIdx.x_1, 63)) && (floormod(threadIdx.x_1, 63) < 56)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), (float32*)data_2[(((((rc.outer.outer*196) + (floordiv(threadIdx.x_1, 63)*49)) + rx.outer.outer) + floormod(threadIdx.x_1, 63)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            pad_temp.shared[(threadIdx.x_1 + 112)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 7) + 7), 9)) && (floormod((floordiv(threadIdx.x_1, 7) + 7), 9) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), (float32*)data_2[((((((rc.outer.outer*196) + (floordiv((floordiv(threadIdx.x_1, 7) + 16), 9)*49)) + (floormod((floordiv(threadIdx.x_1, 7) + 7), 9)*7)) + rx.outer.outer) + floormod(threadIdx.x_1, 7)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            if @tir.likely((threadIdx.x_1 < 28), dtype=bool) {
              pad_temp.shared[(threadIdx.x_1 + 224)] = @tir.if_then_else((((floormod((floordiv(threadIdx.x_1, 7) + 5), 9) < 8) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), (float32*)data_2[((((((rc.outer.outer*196) + (floordiv((floordiv(threadIdx.x_1, 7) + 32), 9)*49)) + (floormod((floordiv(threadIdx.x_1, 7) + 5), 9)*7)) + rx.outer.outer) + floormod(threadIdx.x_1, 7)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared[threadIdx.x_2] = (float32*)kernel_2[(((((blockIdx.x*147456) + (floordiv(threadIdx.x_2, 12)*4608)) + (rc.outer.outer*36)) + (floormod(threadIdx.x_2, 12)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared[(threadIdx.x_2 + 112)] = (float32*)kernel_2[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 112), 12)*4608)) + (rc.outer.outer*36)) + (floormod((threadIdx.x_2 + 4), 12)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared[(threadIdx.x_2 + 224)] = (float32*)kernel_2[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 224), 12)*4608)) + (rc.outer.outer*36)) + (floormod((threadIdx.x_2 + 8), 12)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            if @tir.likely((threadIdx.x_2 < 48), dtype=bool) {
              kernel.shared[(threadIdx.x_2 + 336)] = (float32*)kernel_2[((((((blockIdx.x*147456) + (floordiv(threadIdx.x_2, 12)*4608)) + (rc.outer.outer*36)) + (floormod(threadIdx.x_2, 12)*3)) + rx.outer.outer) + 129024)]
            }
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[floormod(threadIdx.x, 7)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*12)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[floormod(threadIdx.x, 7)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 192)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 7)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*12)]))
            compute_3[8] = ((float32*)compute_3[8] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 7)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 192)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 14)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*12)]))
            compute_3[9] = ((float32*)compute_3[9] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 14)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 192)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 21)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*12)]))
            compute_3[10] = ((float32*)compute_3[10] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 21)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 192)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 28)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*12)]))
            compute_3[11] = ((float32*)compute_3[11] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 28)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 192)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 35)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*12)]))
            compute_3[12] = ((float32*)compute_3[12] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 35)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 192)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 42)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*12)]))
            compute_3[13] = ((float32*)compute_3[13] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 42)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 192)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 63)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 3)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 63)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 195)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 70)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 3)]))
            compute_3[8] = ((float32*)compute_3[8] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 70)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 195)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 77)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 3)]))
            compute_3[9] = ((float32*)compute_3[9] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 77)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 195)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 84)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 3)]))
            compute_3[10] = ((float32*)compute_3[10] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 84)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 195)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 91)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 3)]))
            compute_3[11] = ((float32*)compute_3[11] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 91)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 195)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 98)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 3)]))
            compute_3[12] = ((float32*)compute_3[12] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 98)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 195)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 105)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 3)]))
            compute_3[13] = ((float32*)compute_3[13] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 105)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 195)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 7)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 1)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 7)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 193)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 14)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 1)]))
            compute_3[8] = ((float32*)compute_3[8] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 14)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 193)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 21)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 1)]))
            compute_3[9] = ((float32*)compute_3[9] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 21)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 193)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 28)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 1)]))
            compute_3[10] = ((float32*)compute_3[10] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 28)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 193)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 35)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 1)]))
            compute_3[11] = ((float32*)compute_3[11] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 35)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 193)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 42)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 1)]))
            compute_3[12] = ((float32*)compute_3[12] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 42)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 193)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 49)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 1)]))
            compute_3[13] = ((float32*)compute_3[13] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 49)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 193)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 70)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 4)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 70)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 196)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 77)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 4)]))
            compute_3[8] = ((float32*)compute_3[8] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 77)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 196)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 84)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 4)]))
            compute_3[9] = ((float32*)compute_3[9] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 84)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 196)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 91)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 4)]))
            compute_3[10] = ((float32*)compute_3[10] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 91)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 196)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 98)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 4)]))
            compute_3[11] = ((float32*)compute_3[11] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 98)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 196)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 105)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 4)]))
            compute_3[12] = ((float32*)compute_3[12] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 105)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 196)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 112)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 4)]))
            compute_3[13] = ((float32*)compute_3[13] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 112)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 196)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 14)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 2)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 14)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 194)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 21)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 2)]))
            compute_3[8] = ((float32*)compute_3[8] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 21)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 194)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 28)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 2)]))
            compute_3[9] = ((float32*)compute_3[9] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 28)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 194)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 35)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 2)]))
            compute_3[10] = ((float32*)compute_3[10] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 35)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 194)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 42)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 2)]))
            compute_3[11] = ((float32*)compute_3[11] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 42)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 194)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 49)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 2)]))
            compute_3[12] = ((float32*)compute_3[12] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 49)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 194)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 56)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 2)]))
            compute_3[13] = ((float32*)compute_3[13] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 56)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 194)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 77)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 5)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 77)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 197)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 84)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 5)]))
            compute_3[8] = ((float32*)compute_3[8] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 84)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 197)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 91)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 5)]))
            compute_3[9] = ((float32*)compute_3[9] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 91)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 197)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 98)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 5)]))
            compute_3[10] = ((float32*)compute_3[10] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 98)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 197)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 105)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 5)]))
            compute_3[11] = ((float32*)compute_3[11] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 105)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 197)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 112)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 5)]))
            compute_3[12] = ((float32*)compute_3[12] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 112)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 197)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 119)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 5)]))
            compute_3[13] = ((float32*)compute_3[13] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 119)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 197)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 126)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 6)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 126)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 198)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 133)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 6)]))
            compute_3[8] = ((float32*)compute_3[8] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 133)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 198)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 140)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 6)]))
            compute_3[9] = ((float32*)compute_3[9] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 140)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 198)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 147)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 6)]))
            compute_3[10] = ((float32*)compute_3[10] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 147)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 198)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 154)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 6)]))
            compute_3[11] = ((float32*)compute_3[11] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 154)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 198)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 161)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 6)]))
            compute_3[12] = ((float32*)compute_3[12] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 161)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 198)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 168)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 6)]))
            compute_3[13] = ((float32*)compute_3[13] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 168)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 198)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 189)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 9)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 189)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 201)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 196)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 9)]))
            compute_3[8] = ((float32*)compute_3[8] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 196)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 201)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 203)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 9)]))
            compute_3[9] = ((float32*)compute_3[9] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 203)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 201)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 210)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 9)]))
            compute_3[10] = ((float32*)compute_3[10] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 210)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 201)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 217)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 9)]))
            compute_3[11] = ((float32*)compute_3[11] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 217)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 201)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 224)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 9)]))
            compute_3[12] = ((float32*)compute_3[12] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 224)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 201)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 231)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 9)]))
            compute_3[13] = ((float32*)compute_3[13] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 231)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 201)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 133)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 7)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 133)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 199)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 140)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 7)]))
            compute_3[8] = ((float32*)compute_3[8] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 140)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 199)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 147)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 7)]))
            compute_3[9] = ((float32*)compute_3[9] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 147)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 199)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 154)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 7)]))
            compute_3[10] = ((float32*)compute_3[10] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 154)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 199)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 161)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 7)]))
            compute_3[11] = ((float32*)compute_3[11] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 161)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 199)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 168)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 7)]))
            compute_3[12] = ((float32*)compute_3[12] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 168)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 199)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 175)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 7)]))
            compute_3[13] = ((float32*)compute_3[13] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 175)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 199)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 196)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 10)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 196)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 202)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 203)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 10)]))
            compute_3[8] = ((float32*)compute_3[8] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 203)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 202)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 210)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 10)]))
            compute_3[9] = ((float32*)compute_3[9] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 210)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 202)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 217)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 10)]))
            compute_3[10] = ((float32*)compute_3[10] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 217)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 202)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 224)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 10)]))
            compute_3[11] = ((float32*)compute_3[11] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 224)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 202)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 231)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 10)]))
            compute_3[12] = ((float32*)compute_3[12] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 231)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 202)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 238)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 10)]))
            compute_3[13] = ((float32*)compute_3[13] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 238)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 202)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 140)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 8)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 140)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 200)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 147)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 8)]))
            compute_3[8] = ((float32*)compute_3[8] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 147)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 200)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 154)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 8)]))
            compute_3[9] = ((float32*)compute_3[9] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 154)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 200)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 161)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 8)]))
            compute_3[10] = ((float32*)compute_3[10] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 161)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 200)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 168)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 8)]))
            compute_3[11] = ((float32*)compute_3[11] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 168)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 200)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 175)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 8)]))
            compute_3[12] = ((float32*)compute_3[12] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 175)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 200)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 182)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 8)]))
            compute_3[13] = ((float32*)compute_3[13] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 182)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 200)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 203)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 11)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 203)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 203)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 210)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 11)]))
            compute_3[8] = ((float32*)compute_3[8] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 210)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 203)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 217)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 11)]))
            compute_3[9] = ((float32*)compute_3[9] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 217)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 203)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 224)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 11)]))
            compute_3[10] = ((float32*)compute_3[10] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 224)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 203)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 231)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 11)]))
            compute_3[11] = ((float32*)compute_3[11] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 231)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 203)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 238)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 11)]))
            compute_3[12] = ((float32*)compute_3[12] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 238)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 203)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 245)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 11)]))
            compute_3[13] = ((float32*)compute_3[13] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 245)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*12) + 203)]))
          }
        }
        for (i2.inner: int32, 0, 7) {
          compute_2[((((blockIdx.x*1568) + (floordiv(threadIdx.x, 7)*49)) + (i2.inner*7)) + floormod(threadIdx.x, 7))] = max(((float32*)compute_3[i2.inner] + (float32*)bias_2[((blockIdx.x*32) + floordiv(threadIdx.x, 7))]), 0f32)
          compute_2[(((((blockIdx.x*1568) + (floordiv(threadIdx.x, 7)*49)) + (i2.inner*7)) + floormod(threadIdx.x, 7)) + 784)] = max(((float32*)compute_3[(i2.inner + 7)] + (float32*)bias_2[(((blockIdx.x*32) + floordiv(threadIdx.x, 7)) + 16)]), 0f32)
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.410 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.


.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    compute_nn, compute_ff, compute_yy, compute_xx, compute_rc, compute_ry, compute_rx = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    compute_nn_o_i, compute_nn_i = s[compute].split(compute_nn, factor=1)
    compute_nn_o_o_i, compute_nn_o_i = s[compute].split(compute_nn_o_i, factor=1)
    compute_nn_o_o_o_i, compute_nn_o_o_i = s[compute].split(compute_nn_o_o_i, factor=1)
    compute_nn_o_o_o_o, compute_nn_o_o_o_i = s[compute].split(compute_nn_o_o_o_i, factor=1)
    compute_ff_o_i, compute_ff_i = s[compute].split(compute_ff, factor=1)
    compute_ff_o_o_i, compute_ff_o_i = s[compute].split(compute_ff_o_i, factor=1)
    compute_ff_o_o_o_i, compute_ff_o_o_i = s[compute].split(compute_ff_o_o_i, factor=16)
    compute_ff_o_o_o_o, compute_ff_o_o_o_i = s[compute].split(compute_ff_o_o_o_i, factor=2)
    compute_yy_o_i, compute_yy_i = s[compute].split(compute_yy, factor=7)
    compute_yy_o_o_i, compute_yy_o_i = s[compute].split(compute_yy_o_i, factor=1)
    compute_yy_o_o_o_i, compute_yy_o_o_i = s[compute].split(compute_yy_o_o_i, factor=1)
    compute_yy_o_o_o_o, compute_yy_o_o_o_i = s[compute].split(compute_yy_o_o_o_i, factor=1)
    compute_xx_o_i, compute_xx_i = s[compute].split(compute_xx, factor=1)
    compute_xx_o_o_i, compute_xx_o_i = s[compute].split(compute_xx_o_i, factor=1)
    compute_xx_o_o_o_i, compute_xx_o_o_i = s[compute].split(compute_xx_o_o_i, factor=7)
    compute_xx_o_o_o_o, compute_xx_o_o_o_i = s[compute].split(compute_xx_o_o_o_i, factor=1)
    compute_rc_o_i, compute_rc_i = s[compute].split(compute_rc, factor=2)
    compute_rc_o_o, compute_rc_o_i = s[compute].split(compute_rc_o_i, factor=2)
    compute_ry_o_i, compute_ry_i = s[compute].split(compute_ry, factor=1)
    compute_ry_o_o, compute_ry_o_i = s[compute].split(compute_ry_o_i, factor=3)
    compute_rx_o_i, compute_rx_i = s[compute].split(compute_rx, factor=1)
    compute_rx_o_o, compute_rx_o_i = s[compute].split(compute_rx_o_i, factor=1)
    s[compute].reorder(compute_nn_o_o_o_o, compute_ff_o_o_o_o, compute_yy_o_o_o_o, compute_xx_o_o_o_o, compute_nn_o_o_o_i, compute_ff_o_o_o_i, compute_yy_o_o_o_i, compute_xx_o_o_o_i, compute_nn_o_o_i, compute_ff_o_o_i, compute_yy_o_o_i, compute_xx_o_o_i, compute_rc_o_o, compute_ry_o_o, compute_rx_o_o, compute_rc_o_i, compute_ry_o_i, compute_rx_o_i, compute_nn_o_i, compute_ff_o_i, compute_yy_o_i, compute_xx_o_i, compute_rc_i, compute_ry_i, compute_rx_i, compute_nn_i, compute_ff_i, compute_yy_i, compute_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=16)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=2)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=7)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[compute].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [compute])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[compute], compute_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [compute])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[compute], compute_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=112)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=112)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[compute].pragma(compute_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[compute].pragma(compute_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float compute1[14];
      __shared__ float pad_temp_shared[252];
      __shared__ float kernel_shared[384];
      compute1[(0)] = 0.000000e+00f;
      compute1[(7)] = 0.000000e+00f;
      compute1[(1)] = 0.000000e+00f;
      compute1[(8)] = 0.000000e+00f;
      compute1[(2)] = 0.000000e+00f;
      compute1[(9)] = 0.000000e+00f;
      compute1[(3)] = 0.000000e+00f;
      compute1[(10)] = 0.000000e+00f;
      compute1[(4)] = 0.000000e+00f;
      compute1[(11)] = 0.000000e+00f;
      compute1[(5)] = 0.000000e+00f;
      compute1[(12)] = 0.000000e+00f;
      compute1[(6)] = 0.000000e+00f;
      compute1[(13)] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 128; ++rc_outer_outer) {
        for (int rx_outer_outer = 0; rx_outer_outer < 3; ++rx_outer_outer) {
          __syncthreads();
          pad_temp_shared[(((int)threadIdx.x))] = (((((7 <= (((int)threadIdx.x) % 63)) && ((((int)threadIdx.x) % 63) < 56)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 196) + ((((int)threadIdx.x) / 63) * 49)) + rx_outer_outer) + (((int)threadIdx.x) % 63)) - 8))] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) + 112))] = (((((1 <= (((((int)threadIdx.x) / 7) + 7) % 9)) && ((((((int)threadIdx.x) / 7) + 7) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 112) / 63) * 49)) + ((((((int)threadIdx.x) / 7) + 7) % 9) * 7)) + rx_outer_outer) + (((int)threadIdx.x) % 7)) - 8))] : 0.000000e+00f);
          if (((int)threadIdx.x) < 28) {
            pad_temp_shared[((((int)threadIdx.x) + 224))] = ((((((int)threadIdx.x) < 21) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 224) / 63) * 49)) + (((((int)threadIdx.x) / 7) + 5) * 7)) + rx_outer_outer) + (((int)threadIdx.x) % 7)) - 8))] : 0.000000e+00f);
          }
          kernel_shared[(((int)threadIdx.x))] = kernel[((((((((int)blockIdx.x) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) % 12) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 112))] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 112) / 12) * 4608)) + (rc_outer_outer * 36)) + (((((int)threadIdx.x) + 4) % 12) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 224))] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 224) / 12) * 4608)) + (rc_outer_outer * 36)) + (((((int)threadIdx.x) + 8) % 12) * 3)) + rx_outer_outer))];
          if (((int)threadIdx.x) < 48) {
            kernel_shared[((((int)threadIdx.x) + 336))] = kernel[(((((((((int)blockIdx.x) * 147456) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) % 12) * 3)) + rx_outer_outer) + 129024))];
          }
          __syncthreads();
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((int)threadIdx.x) % 7))] * kernel_shared[(((((int)threadIdx.x) / 7) * 12))]));
          compute1[(7)] = (compute1[(7)] + (pad_temp_shared[((((int)threadIdx.x) % 7))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 192))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 7))] * kernel_shared[(((((int)threadIdx.x) / 7) * 12))]));
          compute1[(8)] = (compute1[(8)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 7))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 192))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 14))] * kernel_shared[(((((int)threadIdx.x) / 7) * 12))]));
          compute1[(9)] = (compute1[(9)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 14))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 192))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 21))] * kernel_shared[(((((int)threadIdx.x) / 7) * 12))]));
          compute1[(10)] = (compute1[(10)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 21))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 192))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 28))] * kernel_shared[(((((int)threadIdx.x) / 7) * 12))]));
          compute1[(11)] = (compute1[(11)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 28))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 192))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 35))] * kernel_shared[(((((int)threadIdx.x) / 7) * 12))]));
          compute1[(12)] = (compute1[(12)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 35))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 192))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 42))] * kernel_shared[(((((int)threadIdx.x) / 7) * 12))]));
          compute1[(13)] = (compute1[(13)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 42))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 192))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 63))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 3))]));
          compute1[(7)] = (compute1[(7)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 63))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 195))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 70))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 3))]));
          compute1[(8)] = (compute1[(8)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 70))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 195))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 77))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 3))]));
          compute1[(9)] = (compute1[(9)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 77))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 195))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 84))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 3))]));
          compute1[(10)] = (compute1[(10)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 84))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 195))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 91))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 3))]));
          compute1[(11)] = (compute1[(11)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 91))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 195))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 98))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 3))]));
          compute1[(12)] = (compute1[(12)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 98))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 195))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 105))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 3))]));
          compute1[(13)] = (compute1[(13)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 105))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 195))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 7))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 1))]));
          compute1[(7)] = (compute1[(7)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 7))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 193))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 14))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 1))]));
          compute1[(8)] = (compute1[(8)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 14))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 193))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 21))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 1))]));
          compute1[(9)] = (compute1[(9)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 21))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 193))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 28))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 1))]));
          compute1[(10)] = (compute1[(10)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 28))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 193))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 35))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 1))]));
          compute1[(11)] = (compute1[(11)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 35))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 193))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 42))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 1))]));
          compute1[(12)] = (compute1[(12)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 42))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 193))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 49))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 1))]));
          compute1[(13)] = (compute1[(13)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 49))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 193))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 70))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 4))]));
          compute1[(7)] = (compute1[(7)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 70))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 196))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 77))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 4))]));
          compute1[(8)] = (compute1[(8)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 77))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 196))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 84))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 4))]));
          compute1[(9)] = (compute1[(9)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 84))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 196))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 91))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 4))]));
          compute1[(10)] = (compute1[(10)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 91))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 196))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 98))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 4))]));
          compute1[(11)] = (compute1[(11)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 98))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 196))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 105))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 4))]));
          compute1[(12)] = (compute1[(12)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 105))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 196))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 112))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 4))]));
          compute1[(13)] = (compute1[(13)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 112))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 196))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 14))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 2))]));
          compute1[(7)] = (compute1[(7)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 14))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 194))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 21))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 2))]));
          compute1[(8)] = (compute1[(8)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 21))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 194))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 28))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 2))]));
          compute1[(9)] = (compute1[(9)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 28))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 194))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 35))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 2))]));
          compute1[(10)] = (compute1[(10)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 35))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 194))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 42))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 2))]));
          compute1[(11)] = (compute1[(11)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 42))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 194))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 49))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 2))]));
          compute1[(12)] = (compute1[(12)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 49))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 194))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 56))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 2))]));
          compute1[(13)] = (compute1[(13)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 56))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 194))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 77))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 5))]));
          compute1[(7)] = (compute1[(7)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 77))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 197))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 84))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 5))]));
          compute1[(8)] = (compute1[(8)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 84))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 197))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 91))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 5))]));
          compute1[(9)] = (compute1[(9)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 91))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 197))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 98))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 5))]));
          compute1[(10)] = (compute1[(10)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 98))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 197))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 105))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 5))]));
          compute1[(11)] = (compute1[(11)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 105))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 197))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 112))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 5))]));
          compute1[(12)] = (compute1[(12)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 112))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 197))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 119))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 5))]));
          compute1[(13)] = (compute1[(13)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 119))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 197))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 126))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 6))]));
          compute1[(7)] = (compute1[(7)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 126))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 198))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 133))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 6))]));
          compute1[(8)] = (compute1[(8)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 133))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 198))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 140))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 6))]));
          compute1[(9)] = (compute1[(9)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 140))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 198))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 147))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 6))]));
          compute1[(10)] = (compute1[(10)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 147))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 198))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 154))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 6))]));
          compute1[(11)] = (compute1[(11)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 154))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 198))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 161))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 6))]));
          compute1[(12)] = (compute1[(12)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 161))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 198))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 168))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 6))]));
          compute1[(13)] = (compute1[(13)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 168))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 198))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 189))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 9))]));
          compute1[(7)] = (compute1[(7)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 189))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 201))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 196))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 9))]));
          compute1[(8)] = (compute1[(8)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 196))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 201))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 203))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 9))]));
          compute1[(9)] = (compute1[(9)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 203))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 201))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 210))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 9))]));
          compute1[(10)] = (compute1[(10)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 210))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 201))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 217))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 9))]));
          compute1[(11)] = (compute1[(11)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 217))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 201))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 224))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 9))]));
          compute1[(12)] = (compute1[(12)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 224))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 201))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 231))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 9))]));
          compute1[(13)] = (compute1[(13)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 231))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 201))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 133))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 7))]));
          compute1[(7)] = (compute1[(7)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 133))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 199))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 140))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 7))]));
          compute1[(8)] = (compute1[(8)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 140))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 199))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 147))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 7))]));
          compute1[(9)] = (compute1[(9)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 147))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 199))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 154))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 7))]));
          compute1[(10)] = (compute1[(10)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 154))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 199))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 161))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 7))]));
          compute1[(11)] = (compute1[(11)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 161))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 199))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 168))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 7))]));
          compute1[(12)] = (compute1[(12)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 168))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 199))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 175))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 7))]));
          compute1[(13)] = (compute1[(13)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 175))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 199))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 196))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 10))]));
          compute1[(7)] = (compute1[(7)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 196))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 202))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 203))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 10))]));
          compute1[(8)] = (compute1[(8)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 203))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 202))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 210))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 10))]));
          compute1[(9)] = (compute1[(9)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 210))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 202))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 217))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 10))]));
          compute1[(10)] = (compute1[(10)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 217))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 202))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 224))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 10))]));
          compute1[(11)] = (compute1[(11)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 224))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 202))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 231))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 10))]));
          compute1[(12)] = (compute1[(12)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 231))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 202))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 238))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 10))]));
          compute1[(13)] = (compute1[(13)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 238))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 202))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 140))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 8))]));
          compute1[(7)] = (compute1[(7)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 140))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 200))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 147))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 8))]));
          compute1[(8)] = (compute1[(8)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 147))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 200))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 154))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 8))]));
          compute1[(9)] = (compute1[(9)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 154))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 200))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 161))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 8))]));
          compute1[(10)] = (compute1[(10)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 161))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 200))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 168))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 8))]));
          compute1[(11)] = (compute1[(11)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 168))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 200))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 175))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 8))]));
          compute1[(12)] = (compute1[(12)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 175))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 200))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 182))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 8))]));
          compute1[(13)] = (compute1[(13)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 182))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 200))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 203))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 11))]));
          compute1[(7)] = (compute1[(7)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 203))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 203))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 210))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 11))]));
          compute1[(8)] = (compute1[(8)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 210))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 203))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 217))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 11))]));
          compute1[(9)] = (compute1[(9)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 217))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 203))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 224))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 11))]));
          compute1[(10)] = (compute1[(10)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 224))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 203))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 231))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 11))]));
          compute1[(11)] = (compute1[(11)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 231))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 203))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 238))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 11))]));
          compute1[(12)] = (compute1[(12)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 238))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 203))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 245))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 11))]));
          compute1[(13)] = (compute1[(13)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) + 245))] * kernel_shared[((((((int)threadIdx.x) / 7) * 12) + 203))]));
        }
      }
      for (int i2_inner = 0; i2_inner < 7; ++i2_inner) {
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 49)) + (i2_inner * 7)) + (((int)threadIdx.x) % 7)))] = max((compute1[(i2_inner)] + bias[(((((int)blockIdx.x) * 32) + (((int)threadIdx.x) / 7)))]), 0.000000e+00f);
        compute[((((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 49)) + (i2_inner * 7)) + (((int)threadIdx.x) % 7)) + 784))] = max((compute1[((i2_inner + 7))] + bias[((((((int)blockIdx.x) * 32) + (((int)threadIdx.x) / 7)) + 16))]), 0.000000e+00f);
      }
    }





A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.6/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  14.873 seconds)


.. _sphx_glr_download_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
