.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.create_task(conv2d_layer, (N, H, W, CO, CI, KH, KW, strides, padding), target)

    # Inspect the computational graph
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    compute(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (compute[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the master process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value > 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, it will return the best schedule it found.


.. code-block:: default


    sch, args = auto_scheduler.auto_schedule(task, tuning_options=tune_option)

    # Kill the process for measurement
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none





We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"global_symbol": "main", "tir.noalias": True}
      buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [1, 512, 7, 7], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [1, 512, 1, 1], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [512, 512, 3, 3], []),
                 data: Buffer(data_2: Pointer(float32), float32, [1, 512, 7, 7], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 128;
      attr [compute_3: Pointer(float32)] "storage_scope" = "local";
      allocate(compute_3, float32, [4]);
      attr [pad_temp.shared: Pointer(float32)] "storage_scope" = "shared";
      allocate(pad_temp.shared, float32, [2016]);
      attr [kernel.shared: Pointer(float32)] "storage_scope" = "shared";
      allocate(kernel.shared, float32, [384]);
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
        compute_3[0] = 0f32
        compute_3[1] = 0f32
        compute_3[2] = 0f32
        compute_3[3] = 0f32
        for (rc.outer.outer: int32, 0, 16) {
          for (ry.outer.outer: int32, 0, 3) {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[threadIdx.x_1] = @tir.if_then_else((((1 <= (floordiv(threadIdx.x_1, 9) + ry.outer.outer)) && (1 <= floormod(threadIdx.x_1, 9))) && (floormod(threadIdx.x_1, 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 9)*7)) + (ry.outer.outer*7)) + floormod(threadIdx.x_1, 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 49)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 49), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 49), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 4), 9))) && (floormod((threadIdx.x_1 + 4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 49), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 4), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 98)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 35), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 35), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 8), 9))) && (floormod((threadIdx.x_1 + 8), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 98), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 8), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 147)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 21), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 21), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 3), 9))) && (floormod((threadIdx.x_1 + 3), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 147), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 3), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 196)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 7), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 7), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 7), 9))) && (floormod((threadIdx.x_1 + 7), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 196), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 7), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 245)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 56), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 56), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 2), 9))) && (floormod((threadIdx.x_1 + 2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 245), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 2), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 294)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 42), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 42), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 6), 9))) && (floormod((threadIdx.x_1 + 6), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 294), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 6), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 343)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 28), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 28), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 1), 9))) && (floormod((threadIdx.x_1 + 1), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 343), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 1), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 392)] = @tir.if_then_else(((((floordiv(floormod((threadIdx.x_1 + 14), 63), 9) + ry.outer.outer) < 8) && (1 <= floormod((threadIdx.x_1 + 5), 9))) && (floormod((threadIdx.x_1 + 5), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 392), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 5), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 441)] = @tir.if_then_else((((1 <= (floordiv(threadIdx.x_1, 9) + ry.outer.outer)) && (1 <= floormod(threadIdx.x_1, 9))) && (floormod(threadIdx.x_1, 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 9)*7)) + (ry.outer.outer*7)) + floormod(threadIdx.x_1, 9)) + 335)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 490)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 49), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 49), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 4), 9))) && (floormod((threadIdx.x_1 + 4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 490), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 4), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 539)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 35), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 35), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 8), 9))) && (floormod((threadIdx.x_1 + 8), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 539), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 8), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 588)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 21), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 21), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 3), 9))) && (floormod((threadIdx.x_1 + 3), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 588), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 3), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 637)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 7), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 7), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 7), 9))) && (floormod((threadIdx.x_1 + 7), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 637), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 7), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 686)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 56), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 56), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 2), 9))) && (floormod((threadIdx.x_1 + 2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 686), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 2), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 735)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 42), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 42), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 6), 9))) && (floormod((threadIdx.x_1 + 6), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 735), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 6), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 784)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 28), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 28), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 1), 9))) && (floormod((threadIdx.x_1 + 1), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 784), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 1), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 833)] = @tir.if_then_else(((((floordiv(floormod((threadIdx.x_1 + 14), 63), 9) + ry.outer.outer) < 8) && (1 <= floormod((threadIdx.x_1 + 5), 9))) && (floormod((threadIdx.x_1 + 5), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 833), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 5), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 882)] = @tir.if_then_else((((1 <= (floordiv(threadIdx.x_1, 9) + ry.outer.outer)) && (1 <= floormod(threadIdx.x_1, 9))) && (floormod(threadIdx.x_1, 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 9)*7)) + (ry.outer.outer*7)) + floormod(threadIdx.x_1, 9)) + 678)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 931)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 49), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 49), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 4), 9))) && (floormod((threadIdx.x_1 + 4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 931), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 4), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 980)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 35), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 35), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 8), 9))) && (floormod((threadIdx.x_1 + 8), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 980), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 8), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1029)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 21), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 21), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 3), 9))) && (floormod((threadIdx.x_1 + 3), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1029), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 3), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1078)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 7), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 7), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 7), 9))) && (floormod((threadIdx.x_1 + 7), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1078), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 7), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1127)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 56), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 56), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 2), 9))) && (floormod((threadIdx.x_1 + 2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1127), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 2), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1176)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 42), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 42), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 6), 9))) && (floormod((threadIdx.x_1 + 6), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1176), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 6), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1225)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 28), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 28), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 1), 9))) && (floormod((threadIdx.x_1 + 1), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1225), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 1), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1274)] = @tir.if_then_else(((((floordiv(floormod((threadIdx.x_1 + 14), 63), 9) + ry.outer.outer) < 8) && (1 <= floormod((threadIdx.x_1 + 5), 9))) && (floormod((threadIdx.x_1 + 5), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1274), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 5), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1323)] = @tir.if_then_else((((1 <= (floordiv(threadIdx.x_1, 9) + ry.outer.outer)) && (1 <= floormod(threadIdx.x_1, 9))) && (floormod(threadIdx.x_1, 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 9)*7)) + (ry.outer.outer*7)) + floormod(threadIdx.x_1, 9)) + 1021)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1372)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 49), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 49), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 4), 9))) && (floormod((threadIdx.x_1 + 4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1372), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 4), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1421)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 35), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 35), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 8), 9))) && (floormod((threadIdx.x_1 + 8), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1421), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 8), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1470)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 21), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 21), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 3), 9))) && (floormod((threadIdx.x_1 + 3), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1470), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 3), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1519)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 7), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 7), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 7), 9))) && (floormod((threadIdx.x_1 + 7), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1519), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 7), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1568)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 56), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 56), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 2), 9))) && (floormod((threadIdx.x_1 + 2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1568), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 2), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1617)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 42), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 42), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 6), 9))) && (floormod((threadIdx.x_1 + 6), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1617), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 6), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1666)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 28), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 28), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 1), 9))) && (floormod((threadIdx.x_1 + 1), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1666), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 1), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1715)] = @tir.if_then_else(((((floordiv(floormod((threadIdx.x_1 + 14), 63), 9) + ry.outer.outer) < 8) && (1 <= floormod((threadIdx.x_1 + 5), 9))) && (floormod((threadIdx.x_1 + 5), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1715), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 5), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1764)] = @tir.if_then_else((((1 <= (floordiv(threadIdx.x_1, 9) + ry.outer.outer)) && (1 <= floormod(threadIdx.x_1, 9))) && (floormod(threadIdx.x_1, 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 9)*7)) + (ry.outer.outer*7)) + floormod(threadIdx.x_1, 9)) + 1364)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1813)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 49), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 49), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 4), 9))) && (floormod((threadIdx.x_1 + 4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1813), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 4), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1862)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 35), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 35), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 8), 9))) && (floormod((threadIdx.x_1 + 8), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1862), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 8), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1911)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 21), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 21), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 3), 9))) && (floormod((threadIdx.x_1 + 3), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1911), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 3), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared[(threadIdx.x_1 + 1960)] = @tir.if_then_else(((((1 <= (floordiv(floormod((threadIdx.x_1 + 7), 63), 9) + ry.outer.outer)) && ((floordiv(floormod((threadIdx.x_1 + 7), 63), 9) + ry.outer.outer) < 8)) && (1 <= floormod((threadIdx.x_1 + 7), 9))) && (floormod((threadIdx.x_1 + 7), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 1960), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 7), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            if @tir.likely((threadIdx.x_1 < 7), dtype=bool) {
              pad_temp.shared[(threadIdx.x_1 + 2009)] = @tir.if_then_else((((floordiv(floormod((threadIdx.x_1 + 56), 63), 9) + ry.outer.outer) < 8) && (floormod((threadIdx.x_1 + 2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*1568) + (floordiv((threadIdx.x_1 + 2009), 9)*7)) + (ry.outer.outer*7)) + floormod((threadIdx.x_1 + 2), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared[(threadIdx.x_2*2)] = (float32*)kernel_2[((((((blockIdx.x*18432) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*288)) + (floordiv((floormod(threadIdx.x_2, 48)*2), 3)*9)) + (ry.outer.outer*3)) + floormod((threadIdx.x_2*2), 3))]
              kernel.shared[((threadIdx.x_2*2) + 1)] = (float32*)kernel_2[((((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 1), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*2) + 1), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*2) + 1), 3))]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared[((threadIdx.x_2*2) + 98)] = (float32*)kernel_2[((((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 98), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*2) + 2), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*2) + 2), 3))]
              kernel.shared[((threadIdx.x_2*2) + 99)] = (float32*)kernel_2[((((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 99), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*2) + 3), 96), 3)*9)) + (ry.outer.outer*3)) + floormod((threadIdx.x_2*2), 3))]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              kernel.shared[((threadIdx.x_2*2) + 196)] = (float32*)kernel_2[((((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 196), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*2) + 4), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*2) + 1), 3))]
              kernel.shared[((threadIdx.x_2*2) + 197)] = (float32*)kernel_2[((((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 197), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*2) + 5), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*2) + 2), 3))]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
              if @tir.likely((threadIdx.x_2 < 45), dtype=bool) {
                kernel.shared[((threadIdx.x_2*2) + 294)] = (float32*)kernel_2[((((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 294), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*2) + 6), 96), 3)*9)) + (ry.outer.outer*3)) + floormod((threadIdx.x_2*2), 3))]
              }
              if @tir.likely(((threadIdx.x_2*2) < 89), dtype=bool) {
                if @tir.likely((threadIdx.x_2 < 45), dtype=bool) {
                  kernel.shared[((threadIdx.x_2*2) + 295)] = (float32*)kernel_2[((((((blockIdx.x*18432) + (floordiv(((threadIdx.x_2*2) + 295), 96)*4608)) + (rc.outer.outer*288)) + (floordiv(floormod(((threadIdx.x_2*2) + 7), 96), 3)*9)) + (ry.outer.outer*3)) + floormod(((threadIdx.x_2*2) + 1), 3))]
                }
              }
            }
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*(float32*)kernel.shared[0]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*(float32*)kernel.shared[96]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 63)]*(float32*)kernel.shared[3]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 63)]*(float32*)kernel.shared[99]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 126)]*(float32*)kernel.shared[6]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 126)]*(float32*)kernel.shared[102]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 189)]*(float32*)kernel.shared[9]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 189)]*(float32*)kernel.shared[105]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 252)]*(float32*)kernel.shared[12]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 252)]*(float32*)kernel.shared[108]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 315)]*(float32*)kernel.shared[15]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 315)]*(float32*)kernel.shared[111]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 378)]*(float32*)kernel.shared[18]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 378)]*(float32*)kernel.shared[114]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 441)]*(float32*)kernel.shared[21]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 441)]*(float32*)kernel.shared[117]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 504)]*(float32*)kernel.shared[24]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 504)]*(float32*)kernel.shared[120]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 567)]*(float32*)kernel.shared[27]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 567)]*(float32*)kernel.shared[123]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 630)]*(float32*)kernel.shared[30]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 630)]*(float32*)kernel.shared[126]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 693)]*(float32*)kernel.shared[33]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 693)]*(float32*)kernel.shared[129]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 756)]*(float32*)kernel.shared[36]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 756)]*(float32*)kernel.shared[132]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 819)]*(float32*)kernel.shared[39]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 819)]*(float32*)kernel.shared[135]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 882)]*(float32*)kernel.shared[42]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 882)]*(float32*)kernel.shared[138]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 945)]*(float32*)kernel.shared[45]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 945)]*(float32*)kernel.shared[141]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1008)]*(float32*)kernel.shared[48]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1008)]*(float32*)kernel.shared[144]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1071)]*(float32*)kernel.shared[51]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1071)]*(float32*)kernel.shared[147]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1134)]*(float32*)kernel.shared[54]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1134)]*(float32*)kernel.shared[150]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1197)]*(float32*)kernel.shared[57]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1197)]*(float32*)kernel.shared[153]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1260)]*(float32*)kernel.shared[60]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1260)]*(float32*)kernel.shared[156]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1323)]*(float32*)kernel.shared[63]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1323)]*(float32*)kernel.shared[159]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1386)]*(float32*)kernel.shared[66]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1386)]*(float32*)kernel.shared[162]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1449)]*(float32*)kernel.shared[69]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1449)]*(float32*)kernel.shared[165]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1512)]*(float32*)kernel.shared[72]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1512)]*(float32*)kernel.shared[168]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1575)]*(float32*)kernel.shared[75]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1575)]*(float32*)kernel.shared[171]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1638)]*(float32*)kernel.shared[78]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1638)]*(float32*)kernel.shared[174]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1701)]*(float32*)kernel.shared[81]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1701)]*(float32*)kernel.shared[177]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1764)]*(float32*)kernel.shared[84]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1764)]*(float32*)kernel.shared[180]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1827)]*(float32*)kernel.shared[87]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1827)]*(float32*)kernel.shared[183]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1890)]*(float32*)kernel.shared[90]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1890)]*(float32*)kernel.shared[186]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1953)]*(float32*)kernel.shared[93]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1953)]*(float32*)kernel.shared[189]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*(float32*)kernel.shared[192]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*(float32*)kernel.shared[288]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 63)]*(float32*)kernel.shared[195]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 63)]*(float32*)kernel.shared[291]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 126)]*(float32*)kernel.shared[198]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 126)]*(float32*)kernel.shared[294]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 189)]*(float32*)kernel.shared[201]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 189)]*(float32*)kernel.shared[297]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 252)]*(float32*)kernel.shared[204]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 252)]*(float32*)kernel.shared[300]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 315)]*(float32*)kernel.shared[207]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 315)]*(float32*)kernel.shared[303]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 378)]*(float32*)kernel.shared[210]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 378)]*(float32*)kernel.shared[306]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 441)]*(float32*)kernel.shared[213]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 441)]*(float32*)kernel.shared[309]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 504)]*(float32*)kernel.shared[216]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 504)]*(float32*)kernel.shared[312]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 567)]*(float32*)kernel.shared[219]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 567)]*(float32*)kernel.shared[315]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 630)]*(float32*)kernel.shared[222]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 630)]*(float32*)kernel.shared[318]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 693)]*(float32*)kernel.shared[225]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 693)]*(float32*)kernel.shared[321]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 756)]*(float32*)kernel.shared[228]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 756)]*(float32*)kernel.shared[324]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 819)]*(float32*)kernel.shared[231]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 819)]*(float32*)kernel.shared[327]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 882)]*(float32*)kernel.shared[234]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 882)]*(float32*)kernel.shared[330]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 945)]*(float32*)kernel.shared[237]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 945)]*(float32*)kernel.shared[333]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1008)]*(float32*)kernel.shared[240]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1008)]*(float32*)kernel.shared[336]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1071)]*(float32*)kernel.shared[243]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1071)]*(float32*)kernel.shared[339]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1134)]*(float32*)kernel.shared[246]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1134)]*(float32*)kernel.shared[342]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1197)]*(float32*)kernel.shared[249]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1197)]*(float32*)kernel.shared[345]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1260)]*(float32*)kernel.shared[252]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1260)]*(float32*)kernel.shared[348]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1323)]*(float32*)kernel.shared[255]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1323)]*(float32*)kernel.shared[351]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1386)]*(float32*)kernel.shared[258]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1386)]*(float32*)kernel.shared[354]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1449)]*(float32*)kernel.shared[261]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1449)]*(float32*)kernel.shared[357]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1512)]*(float32*)kernel.shared[264]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1512)]*(float32*)kernel.shared[360]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1575)]*(float32*)kernel.shared[267]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1575)]*(float32*)kernel.shared[363]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1638)]*(float32*)kernel.shared[270]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1638)]*(float32*)kernel.shared[366]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1701)]*(float32*)kernel.shared[273]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1701)]*(float32*)kernel.shared[369]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1764)]*(float32*)kernel.shared[276]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1764)]*(float32*)kernel.shared[372]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1827)]*(float32*)kernel.shared[279]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1827)]*(float32*)kernel.shared[375]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1890)]*(float32*)kernel.shared[282]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1890)]*(float32*)kernel.shared[378]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1953)]*(float32*)kernel.shared[285]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1953)]*(float32*)kernel.shared[381]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*(float32*)kernel.shared[1]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*(float32*)kernel.shared[97]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 64)]*(float32*)kernel.shared[4]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 64)]*(float32*)kernel.shared[100]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 127)]*(float32*)kernel.shared[7]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 127)]*(float32*)kernel.shared[103]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 190)]*(float32*)kernel.shared[10]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 190)]*(float32*)kernel.shared[106]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 253)]*(float32*)kernel.shared[13]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 253)]*(float32*)kernel.shared[109]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 316)]*(float32*)kernel.shared[16]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 316)]*(float32*)kernel.shared[112]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 379)]*(float32*)kernel.shared[19]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 379)]*(float32*)kernel.shared[115]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 442)]*(float32*)kernel.shared[22]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 442)]*(float32*)kernel.shared[118]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 505)]*(float32*)kernel.shared[25]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 505)]*(float32*)kernel.shared[121]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 568)]*(float32*)kernel.shared[28]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 568)]*(float32*)kernel.shared[124]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 631)]*(float32*)kernel.shared[31]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 631)]*(float32*)kernel.shared[127]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 694)]*(float32*)kernel.shared[34]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 694)]*(float32*)kernel.shared[130]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 757)]*(float32*)kernel.shared[37]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 757)]*(float32*)kernel.shared[133]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 820)]*(float32*)kernel.shared[40]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 820)]*(float32*)kernel.shared[136]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 883)]*(float32*)kernel.shared[43]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 883)]*(float32*)kernel.shared[139]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 946)]*(float32*)kernel.shared[46]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 946)]*(float32*)kernel.shared[142]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1009)]*(float32*)kernel.shared[49]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1009)]*(float32*)kernel.shared[145]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1072)]*(float32*)kernel.shared[52]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1072)]*(float32*)kernel.shared[148]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1135)]*(float32*)kernel.shared[55]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1135)]*(float32*)kernel.shared[151]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1198)]*(float32*)kernel.shared[58]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1198)]*(float32*)kernel.shared[154]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1261)]*(float32*)kernel.shared[61]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1261)]*(float32*)kernel.shared[157]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1324)]*(float32*)kernel.shared[64]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1324)]*(float32*)kernel.shared[160]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1387)]*(float32*)kernel.shared[67]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1387)]*(float32*)kernel.shared[163]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1450)]*(float32*)kernel.shared[70]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1450)]*(float32*)kernel.shared[166]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1513)]*(float32*)kernel.shared[73]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1513)]*(float32*)kernel.shared[169]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1576)]*(float32*)kernel.shared[76]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1576)]*(float32*)kernel.shared[172]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1639)]*(float32*)kernel.shared[79]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1639)]*(float32*)kernel.shared[175]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1702)]*(float32*)kernel.shared[82]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1702)]*(float32*)kernel.shared[178]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1765)]*(float32*)kernel.shared[85]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1765)]*(float32*)kernel.shared[181]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1828)]*(float32*)kernel.shared[88]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1828)]*(float32*)kernel.shared[184]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1891)]*(float32*)kernel.shared[91]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1891)]*(float32*)kernel.shared[187]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1954)]*(float32*)kernel.shared[94]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1954)]*(float32*)kernel.shared[190]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*(float32*)kernel.shared[193]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*(float32*)kernel.shared[289]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 64)]*(float32*)kernel.shared[196]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 64)]*(float32*)kernel.shared[292]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 127)]*(float32*)kernel.shared[199]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 127)]*(float32*)kernel.shared[295]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 190)]*(float32*)kernel.shared[202]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 190)]*(float32*)kernel.shared[298]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 253)]*(float32*)kernel.shared[205]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 253)]*(float32*)kernel.shared[301]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 316)]*(float32*)kernel.shared[208]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 316)]*(float32*)kernel.shared[304]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 379)]*(float32*)kernel.shared[211]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 379)]*(float32*)kernel.shared[307]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 442)]*(float32*)kernel.shared[214]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 442)]*(float32*)kernel.shared[310]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 505)]*(float32*)kernel.shared[217]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 505)]*(float32*)kernel.shared[313]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 568)]*(float32*)kernel.shared[220]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 568)]*(float32*)kernel.shared[316]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 631)]*(float32*)kernel.shared[223]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 631)]*(float32*)kernel.shared[319]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 694)]*(float32*)kernel.shared[226]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 694)]*(float32*)kernel.shared[322]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 757)]*(float32*)kernel.shared[229]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 757)]*(float32*)kernel.shared[325]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 820)]*(float32*)kernel.shared[232]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 820)]*(float32*)kernel.shared[328]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 883)]*(float32*)kernel.shared[235]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 883)]*(float32*)kernel.shared[331]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 946)]*(float32*)kernel.shared[238]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 946)]*(float32*)kernel.shared[334]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1009)]*(float32*)kernel.shared[241]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1009)]*(float32*)kernel.shared[337]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1072)]*(float32*)kernel.shared[244]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1072)]*(float32*)kernel.shared[340]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1135)]*(float32*)kernel.shared[247]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1135)]*(float32*)kernel.shared[343]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1198)]*(float32*)kernel.shared[250]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1198)]*(float32*)kernel.shared[346]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1261)]*(float32*)kernel.shared[253]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1261)]*(float32*)kernel.shared[349]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1324)]*(float32*)kernel.shared[256]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1324)]*(float32*)kernel.shared[352]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1387)]*(float32*)kernel.shared[259]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1387)]*(float32*)kernel.shared[355]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1450)]*(float32*)kernel.shared[262]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1450)]*(float32*)kernel.shared[358]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1513)]*(float32*)kernel.shared[265]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1513)]*(float32*)kernel.shared[361]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1576)]*(float32*)kernel.shared[268]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1576)]*(float32*)kernel.shared[364]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1639)]*(float32*)kernel.shared[271]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1639)]*(float32*)kernel.shared[367]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1702)]*(float32*)kernel.shared[274]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1702)]*(float32*)kernel.shared[370]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1765)]*(float32*)kernel.shared[277]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1765)]*(float32*)kernel.shared[373]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1828)]*(float32*)kernel.shared[280]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1828)]*(float32*)kernel.shared[376]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1891)]*(float32*)kernel.shared[283]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1891)]*(float32*)kernel.shared[379]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1954)]*(float32*)kernel.shared[286]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1954)]*(float32*)kernel.shared[382]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*(float32*)kernel.shared[2]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*(float32*)kernel.shared[98]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 65)]*(float32*)kernel.shared[5]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 65)]*(float32*)kernel.shared[101]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 128)]*(float32*)kernel.shared[8]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 128)]*(float32*)kernel.shared[104]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 191)]*(float32*)kernel.shared[11]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 191)]*(float32*)kernel.shared[107]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 254)]*(float32*)kernel.shared[14]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 254)]*(float32*)kernel.shared[110]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 317)]*(float32*)kernel.shared[17]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 317)]*(float32*)kernel.shared[113]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 380)]*(float32*)kernel.shared[20]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 380)]*(float32*)kernel.shared[116]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 443)]*(float32*)kernel.shared[23]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 443)]*(float32*)kernel.shared[119]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 506)]*(float32*)kernel.shared[26]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 506)]*(float32*)kernel.shared[122]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 569)]*(float32*)kernel.shared[29]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 569)]*(float32*)kernel.shared[125]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 632)]*(float32*)kernel.shared[32]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 632)]*(float32*)kernel.shared[128]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 695)]*(float32*)kernel.shared[35]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 695)]*(float32*)kernel.shared[131]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 758)]*(float32*)kernel.shared[38]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 758)]*(float32*)kernel.shared[134]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 821)]*(float32*)kernel.shared[41]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 821)]*(float32*)kernel.shared[137]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 884)]*(float32*)kernel.shared[44]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 884)]*(float32*)kernel.shared[140]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 947)]*(float32*)kernel.shared[47]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 947)]*(float32*)kernel.shared[143]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1010)]*(float32*)kernel.shared[50]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1010)]*(float32*)kernel.shared[146]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1073)]*(float32*)kernel.shared[53]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1073)]*(float32*)kernel.shared[149]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1136)]*(float32*)kernel.shared[56]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1136)]*(float32*)kernel.shared[152]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1199)]*(float32*)kernel.shared[59]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1199)]*(float32*)kernel.shared[155]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1262)]*(float32*)kernel.shared[62]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1262)]*(float32*)kernel.shared[158]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1325)]*(float32*)kernel.shared[65]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1325)]*(float32*)kernel.shared[161]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1388)]*(float32*)kernel.shared[68]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1388)]*(float32*)kernel.shared[164]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1451)]*(float32*)kernel.shared[71]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1451)]*(float32*)kernel.shared[167]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1514)]*(float32*)kernel.shared[74]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1514)]*(float32*)kernel.shared[170]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1577)]*(float32*)kernel.shared[77]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1577)]*(float32*)kernel.shared[173]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1640)]*(float32*)kernel.shared[80]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1640)]*(float32*)kernel.shared[176]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1703)]*(float32*)kernel.shared[83]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1703)]*(float32*)kernel.shared[179]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1766)]*(float32*)kernel.shared[86]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1766)]*(float32*)kernel.shared[182]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1829)]*(float32*)kernel.shared[89]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1829)]*(float32*)kernel.shared[185]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1892)]*(float32*)kernel.shared[92]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1892)]*(float32*)kernel.shared[188]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1955)]*(float32*)kernel.shared[95]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1955)]*(float32*)kernel.shared[191]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*(float32*)kernel.shared[194]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*(float32*)kernel.shared[290]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 65)]*(float32*)kernel.shared[197]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 65)]*(float32*)kernel.shared[293]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 128)]*(float32*)kernel.shared[200]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 128)]*(float32*)kernel.shared[296]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 191)]*(float32*)kernel.shared[203]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 191)]*(float32*)kernel.shared[299]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 254)]*(float32*)kernel.shared[206]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 254)]*(float32*)kernel.shared[302]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 317)]*(float32*)kernel.shared[209]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 317)]*(float32*)kernel.shared[305]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 380)]*(float32*)kernel.shared[212]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 380)]*(float32*)kernel.shared[308]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 443)]*(float32*)kernel.shared[215]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 443)]*(float32*)kernel.shared[311]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 506)]*(float32*)kernel.shared[218]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 506)]*(float32*)kernel.shared[314]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 569)]*(float32*)kernel.shared[221]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 569)]*(float32*)kernel.shared[317]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 632)]*(float32*)kernel.shared[224]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 632)]*(float32*)kernel.shared[320]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 695)]*(float32*)kernel.shared[227]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 695)]*(float32*)kernel.shared[323]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 758)]*(float32*)kernel.shared[230]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 758)]*(float32*)kernel.shared[326]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 821)]*(float32*)kernel.shared[233]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 821)]*(float32*)kernel.shared[329]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 884)]*(float32*)kernel.shared[236]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 884)]*(float32*)kernel.shared[332]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 947)]*(float32*)kernel.shared[239]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 947)]*(float32*)kernel.shared[335]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1010)]*(float32*)kernel.shared[242]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1010)]*(float32*)kernel.shared[338]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1073)]*(float32*)kernel.shared[245]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1073)]*(float32*)kernel.shared[341]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1136)]*(float32*)kernel.shared[248]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1136)]*(float32*)kernel.shared[344]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1199)]*(float32*)kernel.shared[251]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1199)]*(float32*)kernel.shared[347]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1262)]*(float32*)kernel.shared[254]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1262)]*(float32*)kernel.shared[350]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1325)]*(float32*)kernel.shared[257]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1325)]*(float32*)kernel.shared[353]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1388)]*(float32*)kernel.shared[260]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1388)]*(float32*)kernel.shared[356]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1451)]*(float32*)kernel.shared[263]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1451)]*(float32*)kernel.shared[359]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1514)]*(float32*)kernel.shared[266]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1514)]*(float32*)kernel.shared[362]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1577)]*(float32*)kernel.shared[269]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1577)]*(float32*)kernel.shared[365]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1640)]*(float32*)kernel.shared[272]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1640)]*(float32*)kernel.shared[368]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1703)]*(float32*)kernel.shared[275]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1703)]*(float32*)kernel.shared[371]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1766)]*(float32*)kernel.shared[278]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1766)]*(float32*)kernel.shared[374]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1829)]*(float32*)kernel.shared[281]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1829)]*(float32*)kernel.shared[377]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1892)]*(float32*)kernel.shared[284]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1892)]*(float32*)kernel.shared[380]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1955)]*(float32*)kernel.shared[287]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1955)]*(float32*)kernel.shared[383]))
          }
        }
        for (i1.inner: int32, 0, 4) {
          compute_2[(((blockIdx.x*196) + (i1.inner*49)) + threadIdx.x)] = max(((float32*)compute_3[i1.inner] + (float32*)bias_2[((blockIdx.x*4) + i1.inner)]), 0f32)
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    ctx = tvm.gpu()
    data_tvm = tvm.nd.array(data_np, ctx=ctx)
    weight_tvm = tvm.nd.array(weight_np, ctx=ctx)
    bias_tvm = tvm.nd.array(bias_np, ctx=ctx)
    out_tvm = tvm.nd.empty(out_np.shape, ctx=ctx)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.asnumpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, ctx, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.655 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measuremnt records are dumpped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API, and build the binary again.


.. code-block:: default


    # Load the measuremnt record for the best schedule
    inp, res = auto_scheduler.load_best(log_file, task.workload_key)

    # Print equivalent python schedule API. This can be used for debugging and
    # learning the behavior of the auto-scheduler.
    print("Equivalent python schedule:")
    print(task.compute_dag.print_python_code_from_state(inp.state))

    # Rebuild the binary. This shows how you can apply the best schedule from a
    # log file without reruning the search again.
    sch, args = task.compute_dag.apply_steps_from_state(inp.state)
    func = tvm.build(sch, args, target)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    compute_nn, compute_ff, compute_yy, compute_xx, compute_rc, compute_ry, compute_rx = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    compute_nn_o_i, compute_nn_i = s[compute].split(compute_nn, factor=1)
    compute_nn_o_o_i, compute_nn_o_i = s[compute].split(compute_nn_o_i, factor=1)
    compute_nn_o_o_o_i, compute_nn_o_o_i = s[compute].split(compute_nn_o_o_i, factor=1)
    compute_nn_o_o_o_o, compute_nn_o_o_o_i = s[compute].split(compute_nn_o_o_o_i, factor=1)
    compute_ff_o_i, compute_ff_i = s[compute].split(compute_ff, factor=1)
    compute_ff_o_o_i, compute_ff_o_i = s[compute].split(compute_ff_o_i, factor=2)
    compute_ff_o_o_o_i, compute_ff_o_o_i = s[compute].split(compute_ff_o_o_i, factor=64)
    compute_ff_o_o_o_o, compute_ff_o_o_o_i = s[compute].split(compute_ff_o_o_o_i, factor=1)
    compute_yy_o_i, compute_yy_i = s[compute].split(compute_yy, factor=1)
    compute_yy_o_o_i, compute_yy_o_i = s[compute].split(compute_yy_o_i, factor=1)
    compute_yy_o_o_o_i, compute_yy_o_o_i = s[compute].split(compute_yy_o_o_i, factor=1)
    compute_yy_o_o_o_o, compute_yy_o_o_o_i = s[compute].split(compute_yy_o_o_o_i, factor=1)
    compute_xx_o_i, compute_xx_i = s[compute].split(compute_xx, factor=1)
    compute_xx_o_o_i, compute_xx_o_i = s[compute].split(compute_xx_o_i, factor=7)
    compute_xx_o_o_o_i, compute_xx_o_o_i = s[compute].split(compute_xx_o_o_i, factor=1)
    compute_xx_o_o_o_o, compute_xx_o_o_o_i = s[compute].split(compute_xx_o_o_o_i, factor=1)
    compute_rc_o_i, compute_rc_i = s[compute].split(compute_rc, factor=2)
    compute_rc_o_o, compute_rc_o_i = s[compute].split(compute_rc_o_i, factor=4)
    compute_ry_o_i, compute_ry_i = s[compute].split(compute_ry, factor=1)
    compute_ry_o_o, compute_ry_o_i = s[compute].split(compute_ry_o_i, factor=1)
    compute_rx_o_i, compute_rx_i = s[compute].split(compute_rx, factor=1)
    compute_rx_o_o, compute_rx_o_i = s[compute].split(compute_rx_o_i, factor=3)
    s[compute].reorder(compute_nn_o_o_o_o, compute_ff_o_o_o_o, compute_yy_o_o_o_o, compute_xx_o_o_o_o, compute_nn_o_o_o_i, compute_ff_o_o_o_i, compute_yy_o_o_o_i, compute_xx_o_o_o_i, compute_nn_o_o_i, compute_ff_o_o_i, compute_yy_o_o_i, compute_xx_o_o_i, compute_rc_o_o, compute_ry_o_o, compute_rx_o_o, compute_rc_o_i, compute_ry_o_i, compute_rx_o_i, compute_nn_o_i, compute_ff_o_i, compute_yy_o_i, compute_xx_o_i, compute_rc_i, compute_ry_i, compute_rx_i, compute_nn_i, compute_ff_i, compute_yy_i, compute_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=2)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=64)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=7)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[compute].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [compute])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[compute], compute_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [compute])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[compute], compute_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=64)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=4)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=64)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[compute].pragma(compute_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[compute].pragma(compute_nn_o_o_o_o, "unroll_explicit", True)




A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default


    cost_model = auto_scheduler.XGBModel()
    cost_model.update_from_file(log_file)
    search_policy = auto_scheduler.SketchPolicy(
        task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
    )
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=5,
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
    )
    sch, args = auto_scheduler.auto_schedule(task, search_policy, tuning_options=tune_option)

    # Kill the measurement process
    del measure_ctx




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  40.877 seconds)


.. _sphx_glr_download_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
