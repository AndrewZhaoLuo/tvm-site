.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a convolution layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_


Different from the existing :ref:`autotvm <tutorials-autotvm-sec>` which relies on 
manual templates to define the search space, the auto-scheduler does not require any templates.
The auto-scheduler is template-free, so users only need to write the computation declaration without
any schedule commands or templates.
The auto-scheduler can automatically generate a large
search space and find a good schedule in the space.

We use a convolution layer as an example in this tutorial.


.. code-block:: default


    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # the last layer in resnet
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.create_task(conv2d_layer, (N, H, W, CO, CI, KH, KW, strides, padding), target)

    # Inspect the computational graph
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    compute(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (compute[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search and auto-tuning.

* :code:`measure_ctx` launches a different process for measurement. This
  provides an isolation. It can protect the master process from GPU crashes
  happended during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value > 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile("conv2d.json")],
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, it will return the best schedule it found.


.. code-block:: default


    sch, args = auto_scheduler.auto_schedule(task, tuning_options=tune_option)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none





We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"global_symbol": "main", "tir.noalias": True}
      buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [1, 512, 7, 7], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [1, 512, 1, 1], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [512, 512, 3, 3], []),
                 data: Buffer(data_2: Pointer(float32), float32, [1, 512, 7, 7], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 64;
      attr [compute_3: Pointer(float32)] "storage_scope" = "local";
      allocate(compute_3, float32, [8]);
      attr [pad_temp.shared: Pointer(float32)] "storage_scope" = "shared";
      allocate(pad_temp.shared, float32, [1296]);
      attr [kernel.shared: Pointer(float32)] "storage_scope" = "shared";
      allocate(kernel.shared, float32, [1152]);
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
        compute_3[0] = 0f32
        compute_3[1] = 0f32
        compute_3[2] = 0f32
        compute_3[3] = 0f32
        compute_3[4] = 0f32
        compute_3[5] = 0f32
        compute_3[6] = 0f32
        compute_3[7] = 0f32
        for (rc.outer.outer: int32, 0, 32) {
          attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
            pad_temp.shared[(threadIdx.x_1*4)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1*4), 81)) && (floormod((threadIdx.x_1*4), 81) < 72)) && (1 <= floormod((threadIdx.x_1*4), 9))) && (floormod((threadIdx.x_1*4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv((threadIdx.x_1*4), 81)*49)) + (floordiv(floormod((threadIdx.x_1*4), 81), 9)*7)) + floormod((threadIdx.x_1*4), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 1)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 1), 81)) && (floormod(((threadIdx.x_1*4) + 1), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 1), 9))) && (floormod(((threadIdx.x_1*4) + 1), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 1), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 1), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 1), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 2)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 2), 81)) && (floormod(((threadIdx.x_1*4) + 2), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 2), 9))) && (floormod(((threadIdx.x_1*4) + 2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 2), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 2), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 2), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 3)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 3), 81)) && (floormod(((threadIdx.x_1*4) + 3), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 3), 9))) && (floormod(((threadIdx.x_1*4) + 3), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 3), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 3), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 3), 9)) - 8)], 0f32, dtype=float32)
          }
          attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
            pad_temp.shared[((threadIdx.x_1*4) + 196)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 34), 81)) && (floormod(((threadIdx.x_1*4) + 34), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 7), 9))) && (floormod(((threadIdx.x_1*4) + 7), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 196), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 34), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 7), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 197)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 35), 81)) && (floormod(((threadIdx.x_1*4) + 35), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 8), 9))) && (floormod(((threadIdx.x_1*4) + 8), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 197), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 35), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 8), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 198)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 36), 81)) && (floormod(((threadIdx.x_1*4) + 36), 81) < 72)) && (1 <= floormod((threadIdx.x_1*4), 9))) && (floormod((threadIdx.x_1*4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 198), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 36), 81), 9)*7)) + floormod((threadIdx.x_1*4), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 199)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 37), 81)) && (floormod(((threadIdx.x_1*4) + 37), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 1), 9))) && (floormod(((threadIdx.x_1*4) + 1), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 199), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 37), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 1), 9)) - 8)], 0f32, dtype=float32)
          }
          attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
            pad_temp.shared[((threadIdx.x_1*4) + 392)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 68), 81)) && (floormod(((threadIdx.x_1*4) + 68), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 5), 9))) && (floormod(((threadIdx.x_1*4) + 5), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 392), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 68), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 5), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 393)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 69), 81)) && (floormod(((threadIdx.x_1*4) + 69), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 6), 9))) && (floormod(((threadIdx.x_1*4) + 6), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 393), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 69), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 6), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 394)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 70), 81)) && (floormod(((threadIdx.x_1*4) + 70), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 7), 9))) && (floormod(((threadIdx.x_1*4) + 7), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 394), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 70), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 7), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 395)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 71), 81)) && (floormod(((threadIdx.x_1*4) + 71), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 8), 9))) && (floormod(((threadIdx.x_1*4) + 8), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 395), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 71), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 8), 9)) - 8)], 0f32, dtype=float32)
          }
          attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
            pad_temp.shared[((threadIdx.x_1*4) + 588)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 21), 81)) && (floormod(((threadIdx.x_1*4) + 21), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 3), 9))) && (floormod(((threadIdx.x_1*4) + 3), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 588), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 21), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 3), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 589)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 22), 81)) && (floormod(((threadIdx.x_1*4) + 22), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 4), 9))) && (floormod(((threadIdx.x_1*4) + 4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 589), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 22), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 4), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 590)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 23), 81)) && (floormod(((threadIdx.x_1*4) + 23), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 5), 9))) && (floormod(((threadIdx.x_1*4) + 5), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 590), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 23), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 5), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 591)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 24), 81)) && (floormod(((threadIdx.x_1*4) + 24), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 6), 9))) && (floormod(((threadIdx.x_1*4) + 6), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 591), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 24), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 6), 9)) - 8)], 0f32, dtype=float32)
          }
          attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
            pad_temp.shared[((threadIdx.x_1*4) + 784)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 55), 81)) && (floormod(((threadIdx.x_1*4) + 55), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 1), 9))) && (floormod(((threadIdx.x_1*4) + 1), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 784), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 55), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 1), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 785)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 56), 81)) && (floormod(((threadIdx.x_1*4) + 56), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 2), 9))) && (floormod(((threadIdx.x_1*4) + 2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 785), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 56), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 2), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 786)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 57), 81)) && (floormod(((threadIdx.x_1*4) + 57), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 3), 9))) && (floormod(((threadIdx.x_1*4) + 3), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 786), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 57), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 3), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 787)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 58), 81)) && (floormod(((threadIdx.x_1*4) + 58), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 4), 9))) && (floormod(((threadIdx.x_1*4) + 4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 787), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 58), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 4), 9)) - 8)], 0f32, dtype=float32)
          }
          attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
            pad_temp.shared[((threadIdx.x_1*4) + 980)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 8), 81)) && (floormod(((threadIdx.x_1*4) + 8), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 8), 9))) && (floormod(((threadIdx.x_1*4) + 8), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 980), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 8), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 8), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 981)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 9), 81)) && (floormod(((threadIdx.x_1*4) + 9), 81) < 72)) && (1 <= floormod((threadIdx.x_1*4), 9))) && (floormod((threadIdx.x_1*4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 981), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 9), 81), 9)*7)) + floormod((threadIdx.x_1*4), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 982)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 10), 81)) && (floormod(((threadIdx.x_1*4) + 10), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 1), 9))) && (floormod(((threadIdx.x_1*4) + 1), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 982), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 10), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 1), 9)) - 8)], 0f32, dtype=float32)
            pad_temp.shared[((threadIdx.x_1*4) + 983)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 11), 81)) && (floormod(((threadIdx.x_1*4) + 11), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 2), 9))) && (floormod(((threadIdx.x_1*4) + 2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 983), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 11), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 2), 9)) - 8)], 0f32, dtype=float32)
          }
          attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
            if @tir.likely((threadIdx.x_1 < 30), dtype=bool) {
              pad_temp.shared[((threadIdx.x_1*4) + 1176)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 42), 81)) && (floormod(((threadIdx.x_1*4) + 42), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 6), 9))) && (floormod(((threadIdx.x_1*4) + 6), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 1176), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 42), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 6), 9)) - 8)], 0f32, dtype=float32)
            }
            if @tir.likely(((threadIdx.x_1*4) < 119), dtype=bool) {
              if @tir.likely((threadIdx.x_1 < 30), dtype=bool) {
                pad_temp.shared[((threadIdx.x_1*4) + 1177)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 43), 81)) && (floormod(((threadIdx.x_1*4) + 43), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 7), 9))) && (floormod(((threadIdx.x_1*4) + 7), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 1177), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 43), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 7), 9)) - 8)], 0f32, dtype=float32)
              }
            }
            if @tir.likely(((threadIdx.x_1*4) < 118), dtype=bool) {
              if @tir.likely((threadIdx.x_1 < 30), dtype=bool) {
                pad_temp.shared[((threadIdx.x_1*4) + 1178)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 44), 81)) && (floormod(((threadIdx.x_1*4) + 44), 81) < 72)) && (1 <= floormod(((threadIdx.x_1*4) + 8), 9))) && (floormod(((threadIdx.x_1*4) + 8), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 1178), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 44), 81), 9)*7)) + floormod(((threadIdx.x_1*4) + 8), 9)) - 8)], 0f32, dtype=float32)
              }
            }
            if @tir.likely(((threadIdx.x_1*4) < 117), dtype=bool) {
              if @tir.likely((threadIdx.x_1 < 30), dtype=bool) {
                pad_temp.shared[((threadIdx.x_1*4) + 1179)] = @tir.if_then_else(((((9 <= floormod(((threadIdx.x_1*4) + 45), 81)) && (floormod(((threadIdx.x_1*4) + 45), 81) < 72)) && (1 <= floormod((threadIdx.x_1*4), 9))) && (floormod((threadIdx.x_1*4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*784) + (floordiv(((threadIdx.x_1*4) + 1179), 81)*49)) + (floordiv(floormod(((threadIdx.x_1*4) + 45), 81), 9)*7)) + floormod((threadIdx.x_1*4), 9)) - 8)], 0f32, dtype=float32)
              }
            }
          }
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[threadIdx.x_2] = (float32*)kernel_2[(((blockIdx.x*36864) + (rc.outer.outer*144)) + threadIdx.x_2)]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 49)] = (float32*)kernel_2[(((blockIdx.x*36864) + (rc.outer.outer*144)) + (threadIdx.x_2 + 49))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 98)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 98), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 98), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 147)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 147), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 3), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 196)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 196), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 52), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 245)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 245), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 101), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 294)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 294), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 6), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 343)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 343), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 55), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 392)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 392), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 104), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 441)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 441), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 9), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 490)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 490), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 58), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 539)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 539), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 107), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 588)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 588), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 12), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 637)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 637), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 61), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 686)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 686), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 110), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 735)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 735), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 15), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 784)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 784), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 64), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 833)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 833), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 113), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 882)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 882), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 18), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 931)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 931), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 67), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 980)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 980), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 116), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 1029)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1029), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 21), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          kernel.shared[(threadIdx.x_2 + 1078)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1078), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 70), 144))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
          if @tir.likely((threadIdx.x_2 < 25), dtype=bool) {
            kernel.shared[(threadIdx.x_2 + 1127)] = (float32*)kernel_2[((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1127), 144)*4608)) + (rc.outer.outer*144)) + floormod((threadIdx.x_2 + 119), 144))]
          }
          for (rc.outer.inner: int32, 0, 8) {
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*(float32*)kernel.shared[(rc.outer.inner*18)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*(float32*)kernel.shared[((rc.outer.inner*18) + 144)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*(float32*)kernel.shared[((rc.outer.inner*18) + 288)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*(float32*)kernel.shared[((rc.outer.inner*18) + 432)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*(float32*)kernel.shared[((rc.outer.inner*18) + 145)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*(float32*)kernel.shared[((rc.outer.inner*18) + 289)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*(float32*)kernel.shared[((rc.outer.inner*18) + 433)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*(float32*)kernel.shared[((rc.outer.inner*18) + 2)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*(float32*)kernel.shared[((rc.outer.inner*18) + 146)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*(float32*)kernel.shared[((rc.outer.inner*18) + 290)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*(float32*)kernel.shared[((rc.outer.inner*18) + 434)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*(float32*)kernel.shared[((rc.outer.inner*18) + 3)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*(float32*)kernel.shared[((rc.outer.inner*18) + 147)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*(float32*)kernel.shared[((rc.outer.inner*18) + 291)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*(float32*)kernel.shared[((rc.outer.inner*18) + 435)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*(float32*)kernel.shared[((rc.outer.inner*18) + 4)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*(float32*)kernel.shared[((rc.outer.inner*18) + 148)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*(float32*)kernel.shared[((rc.outer.inner*18) + 292)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*(float32*)kernel.shared[((rc.outer.inner*18) + 436)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*(float32*)kernel.shared[((rc.outer.inner*18) + 5)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*(float32*)kernel.shared[((rc.outer.inner*18) + 149)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*(float32*)kernel.shared[((rc.outer.inner*18) + 293)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*(float32*)kernel.shared[((rc.outer.inner*18) + 437)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*(float32*)kernel.shared[((rc.outer.inner*18) + 6)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*(float32*)kernel.shared[((rc.outer.inner*18) + 150)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*(float32*)kernel.shared[((rc.outer.inner*18) + 294)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*(float32*)kernel.shared[((rc.outer.inner*18) + 438)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*(float32*)kernel.shared[((rc.outer.inner*18) + 7)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*(float32*)kernel.shared[((rc.outer.inner*18) + 151)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*(float32*)kernel.shared[((rc.outer.inner*18) + 295)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*(float32*)kernel.shared[((rc.outer.inner*18) + 439)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*(float32*)kernel.shared[((rc.outer.inner*18) + 8)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*(float32*)kernel.shared[((rc.outer.inner*18) + 152)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*(float32*)kernel.shared[((rc.outer.inner*18) + 296)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*(float32*)kernel.shared[((rc.outer.inner*18) + 440)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*(float32*)kernel.shared[((rc.outer.inner*18) + 9)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*(float32*)kernel.shared[((rc.outer.inner*18) + 153)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*(float32*)kernel.shared[((rc.outer.inner*18) + 297)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*(float32*)kernel.shared[((rc.outer.inner*18) + 441)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*(float32*)kernel.shared[((rc.outer.inner*18) + 10)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*(float32*)kernel.shared[((rc.outer.inner*18) + 154)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*(float32*)kernel.shared[((rc.outer.inner*18) + 298)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*(float32*)kernel.shared[((rc.outer.inner*18) + 442)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*(float32*)kernel.shared[((rc.outer.inner*18) + 11)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*(float32*)kernel.shared[((rc.outer.inner*18) + 155)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*(float32*)kernel.shared[((rc.outer.inner*18) + 299)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*(float32*)kernel.shared[((rc.outer.inner*18) + 443)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*(float32*)kernel.shared[((rc.outer.inner*18) + 12)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*(float32*)kernel.shared[((rc.outer.inner*18) + 156)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*(float32*)kernel.shared[((rc.outer.inner*18) + 300)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*(float32*)kernel.shared[((rc.outer.inner*18) + 444)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*(float32*)kernel.shared[((rc.outer.inner*18) + 13)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*(float32*)kernel.shared[((rc.outer.inner*18) + 157)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*(float32*)kernel.shared[((rc.outer.inner*18) + 301)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*(float32*)kernel.shared[((rc.outer.inner*18) + 445)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*(float32*)kernel.shared[((rc.outer.inner*18) + 14)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*(float32*)kernel.shared[((rc.outer.inner*18) + 158)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*(float32*)kernel.shared[((rc.outer.inner*18) + 302)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*(float32*)kernel.shared[((rc.outer.inner*18) + 446)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*(float32*)kernel.shared[((rc.outer.inner*18) + 15)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*(float32*)kernel.shared[((rc.outer.inner*18) + 159)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*(float32*)kernel.shared[((rc.outer.inner*18) + 303)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*(float32*)kernel.shared[((rc.outer.inner*18) + 447)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*(float32*)kernel.shared[((rc.outer.inner*18) + 16)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*(float32*)kernel.shared[((rc.outer.inner*18) + 160)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*(float32*)kernel.shared[((rc.outer.inner*18) + 304)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*(float32*)kernel.shared[((rc.outer.inner*18) + 448)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*(float32*)kernel.shared[((rc.outer.inner*18) + 17)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*(float32*)kernel.shared[((rc.outer.inner*18) + 161)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*(float32*)kernel.shared[((rc.outer.inner*18) + 305)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*(float32*)kernel.shared[((rc.outer.inner*18) + 449)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*(float32*)kernel.shared[((rc.outer.inner*18) + 576)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*(float32*)kernel.shared[((rc.outer.inner*18) + 720)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*(float32*)kernel.shared[((rc.outer.inner*18) + 864)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[(((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7))]*(float32*)kernel.shared[((rc.outer.inner*18) + 1008)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*(float32*)kernel.shared[((rc.outer.inner*18) + 577)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*(float32*)kernel.shared[((rc.outer.inner*18) + 721)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*(float32*)kernel.shared[((rc.outer.inner*18) + 865)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 1)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1009)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*(float32*)kernel.shared[((rc.outer.inner*18) + 578)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*(float32*)kernel.shared[((rc.outer.inner*18) + 722)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*(float32*)kernel.shared[((rc.outer.inner*18) + 866)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 2)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1010)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*(float32*)kernel.shared[((rc.outer.inner*18) + 579)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*(float32*)kernel.shared[((rc.outer.inner*18) + 723)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*(float32*)kernel.shared[((rc.outer.inner*18) + 867)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 9)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1011)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*(float32*)kernel.shared[((rc.outer.inner*18) + 580)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*(float32*)kernel.shared[((rc.outer.inner*18) + 724)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*(float32*)kernel.shared[((rc.outer.inner*18) + 868)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 10)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1012)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*(float32*)kernel.shared[((rc.outer.inner*18) + 581)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*(float32*)kernel.shared[((rc.outer.inner*18) + 725)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*(float32*)kernel.shared[((rc.outer.inner*18) + 869)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 11)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1013)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*(float32*)kernel.shared[((rc.outer.inner*18) + 582)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*(float32*)kernel.shared[((rc.outer.inner*18) + 726)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*(float32*)kernel.shared[((rc.outer.inner*18) + 870)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 18)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1014)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*(float32*)kernel.shared[((rc.outer.inner*18) + 583)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*(float32*)kernel.shared[((rc.outer.inner*18) + 727)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*(float32*)kernel.shared[((rc.outer.inner*18) + 871)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 19)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1015)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*(float32*)kernel.shared[((rc.outer.inner*18) + 584)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*(float32*)kernel.shared[((rc.outer.inner*18) + 728)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*(float32*)kernel.shared[((rc.outer.inner*18) + 872)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 20)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1016)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*(float32*)kernel.shared[((rc.outer.inner*18) + 585)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*(float32*)kernel.shared[((rc.outer.inner*18) + 729)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*(float32*)kernel.shared[((rc.outer.inner*18) + 873)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 81)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1017)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*(float32*)kernel.shared[((rc.outer.inner*18) + 586)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*(float32*)kernel.shared[((rc.outer.inner*18) + 730)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*(float32*)kernel.shared[((rc.outer.inner*18) + 874)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 82)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1018)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*(float32*)kernel.shared[((rc.outer.inner*18) + 587)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*(float32*)kernel.shared[((rc.outer.inner*18) + 731)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*(float32*)kernel.shared[((rc.outer.inner*18) + 875)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 83)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1019)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*(float32*)kernel.shared[((rc.outer.inner*18) + 588)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*(float32*)kernel.shared[((rc.outer.inner*18) + 732)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*(float32*)kernel.shared[((rc.outer.inner*18) + 876)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 90)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1020)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*(float32*)kernel.shared[((rc.outer.inner*18) + 589)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*(float32*)kernel.shared[((rc.outer.inner*18) + 733)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*(float32*)kernel.shared[((rc.outer.inner*18) + 877)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 91)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1021)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*(float32*)kernel.shared[((rc.outer.inner*18) + 590)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*(float32*)kernel.shared[((rc.outer.inner*18) + 734)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*(float32*)kernel.shared[((rc.outer.inner*18) + 878)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 92)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1022)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*(float32*)kernel.shared[((rc.outer.inner*18) + 591)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*(float32*)kernel.shared[((rc.outer.inner*18) + 735)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*(float32*)kernel.shared[((rc.outer.inner*18) + 879)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 99)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1023)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*(float32*)kernel.shared[((rc.outer.inner*18) + 592)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*(float32*)kernel.shared[((rc.outer.inner*18) + 736)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*(float32*)kernel.shared[((rc.outer.inner*18) + 880)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 100)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1024)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*(float32*)kernel.shared[((rc.outer.inner*18) + 593)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*(float32*)kernel.shared[((rc.outer.inner*18) + 737)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*(float32*)kernel.shared[((rc.outer.inner*18) + 881)]))
            compute_3[7] = ((float32*)compute_3[7] + ((float32*)pad_temp.shared[((((rc.outer.inner*162) + (floordiv(threadIdx.x, 7)*9)) + floormod(threadIdx.x, 7)) + 101)]*(float32*)kernel.shared[((rc.outer.inner*18) + 1025)]))
          }
        }
        for (i1.inner: int32, 0, 8) {
          compute_2[(((blockIdx.x*392) + (i1.inner*49)) + threadIdx.x)] = max(((float32*)compute_3[i1.inner] + (float32*)bias_2[((blockIdx.x*8) + i1.inner)]), 0f32)
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    ctx = tvm.gpu()
    data_tvm = tvm.nd.array(data_np, ctx=ctx)
    weight_tvm = tvm.nd.array(weight_np, ctx=ctx)
    bias_tvm = tvm.nd.array(bias_np, ctx=ctx)
    out_tvm = tvm.nd.empty(out_np.shape, ctx=ctx)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.asnumpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, ctx, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.153 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measuremnt records are dumpped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API, and build the binary again.


.. code-block:: default


    # Load the measuremnt record for the best schedule
    inp, res = auto_scheduler.load_best("conv2d.json", task.workload_key)

    # Print equivalent python schedule API. This can be used for debugging and
    # learning the behavior of the auto-scheduler.
    print("Equivalent python schedule:")
    print(task.compute_dag.print_python_code_from_state(inp.state))

    # Rebuild the binary. This shows how you can apply the best schedule from a
    # log file without reruning the search again.
    sch, args = task.compute_dag.apply_steps_from_state(inp.state)
    func = tvm.build(sch, args, target)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    compute_nn, compute_ff, compute_yy, compute_xx, compute_rc, compute_ry, compute_rx = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    compute_nn_o_i, compute_nn_i = s[compute].split(compute_nn, factor=1)
    compute_nn_o_o_i, compute_nn_o_i = s[compute].split(compute_nn_o_i, factor=1)
    compute_nn_o_o_o_i, compute_nn_o_o_i = s[compute].split(compute_nn_o_o_i, factor=1)
    compute_nn_o_o_o_o, compute_nn_o_o_o_i = s[compute].split(compute_nn_o_o_o_i, factor=1)
    compute_ff_o_i, compute_ff_i = s[compute].split(compute_ff, factor=1)
    compute_ff_o_o_i, compute_ff_o_i = s[compute].split(compute_ff_o_i, factor=1)
    compute_ff_o_o_o_i, compute_ff_o_o_i = s[compute].split(compute_ff_o_o_i, factor=16)
    compute_ff_o_o_o_o, compute_ff_o_o_o_i = s[compute].split(compute_ff_o_o_o_i, factor=1)
    compute_yy_o_i, compute_yy_i = s[compute].split(compute_yy, factor=7)
    compute_yy_o_o_i, compute_yy_o_i = s[compute].split(compute_yy_o_i, factor=1)
    compute_yy_o_o_o_i, compute_yy_o_o_i = s[compute].split(compute_yy_o_o_i, factor=1)
    compute_yy_o_o_o_o, compute_yy_o_o_o_i = s[compute].split(compute_yy_o_o_o_i, factor=1)
    compute_xx_o_i, compute_xx_i = s[compute].split(compute_xx, factor=1)
    compute_xx_o_o_i, compute_xx_o_i = s[compute].split(compute_xx_o_i, factor=1)
    compute_xx_o_o_o_i, compute_xx_o_o_i = s[compute].split(compute_xx_o_o_i, factor=7)
    compute_xx_o_o_o_o, compute_xx_o_o_o_i = s[compute].split(compute_xx_o_o_o_i, factor=1)
    compute_rc_o_i, compute_rc_i = s[compute].split(compute_rc, factor=2)
    compute_rc_o_o, compute_rc_o_i = s[compute].split(compute_rc_o_i, factor=8)
    compute_ry_o_i, compute_ry_i = s[compute].split(compute_ry, factor=1)
    compute_ry_o_o, compute_ry_o_i = s[compute].split(compute_ry_o_i, factor=3)
    compute_rx_o_i, compute_rx_i = s[compute].split(compute_rx, factor=3)
    compute_rx_o_o, compute_rx_o_i = s[compute].split(compute_rx_o_i, factor=1)
    s[compute].reorder(compute_nn_o_o_o_o, compute_ff_o_o_o_o, compute_yy_o_o_o_o, compute_xx_o_o_o_o, compute_nn_o_o_o_i, compute_ff_o_o_o_i, compute_yy_o_o_o_i, compute_xx_o_o_o_i, compute_nn_o_o_i, compute_ff_o_o_i, compute_yy_o_o_i, compute_xx_o_o_i, compute_rc_o_o, compute_ry_o_o, compute_rx_o_o, compute_rc_o_i, compute_ry_o_i, compute_rx_o_i, compute_nn_o_i, compute_ff_o_i, compute_yy_o_i, compute_xx_o_i, compute_rc_i, compute_ry_i, compute_rx_i, compute_nn_i, compute_ff_i, compute_yy_i, compute_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=16)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=7)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[compute].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [compute])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[compute], compute_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [compute])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[compute], compute_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=6)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=112)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=3)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=112)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[compute].pragma(compute_nn_o_o_o_o, "auto_unroll_max_step", 1024)
    s[compute].pragma(compute_nn_o_o_o_o, "unroll_explicit", True)




A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default



    log_file = "conv2d.json"
    cost_model = auto_scheduler.XGBModel()
    cost_model.update_from_file(log_file)
    search_policy = auto_scheduler.SketchPolicy(
        task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
    )
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=5,
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
    )
    sch, args = auto_scheduler.auto_schedule(task, search_policy, tuning_options=tune_option)

    # kill the measurement process
    del measure_ctx




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  57.640 seconds)


.. _sphx_glr_download_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
