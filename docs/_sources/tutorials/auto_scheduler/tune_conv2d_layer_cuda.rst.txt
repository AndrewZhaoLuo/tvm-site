.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.create_task(conv2d_layer, (N, H, W, CO, CI, KH, KW, strides, padding), target)

    # Inspect the computational graph
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    compute(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (compute[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the master process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value > 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, it will return the best schedule it found.


.. code-block:: default


    sch, args = auto_scheduler.auto_schedule(task, tuning_options=tune_option)

    # Kill the process for measurement
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none





We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"global_symbol": "main", "tir.noalias": True}
      buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [1, 512, 7, 7], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [1, 512, 1, 1], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [512, 512, 3, 3], []),
                 data: Buffer(data_2: Pointer(float32), float32, [1, 512, 7, 7], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 32;
      attr [compute_3: Pointer(float32)] "storage_scope" = "local";
      allocate(compute_3, float32, [7]);
      attr [pad_temp.shared: Pointer(float32)] "storage_scope" = "shared";
      allocate(pad_temp.shared, float32, [648]);
      attr [kernel.shared: Pointer(float32)] "storage_scope" = "shared";
      allocate(kernel.shared, float32, [1152]);
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112 {
        compute_3[0] = 0f32
        compute_3[1] = 0f32
        compute_3[2] = 0f32
        compute_3[3] = 0f32
        compute_3[4] = 0f32
        compute_3[5] = 0f32
        compute_3[6] = 0f32
        for (rc.outer.outer: int32, 0, 64) {
          attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          pad_temp.shared[threadIdx.x_1] = @tir.if_then_else(((((9 <= floormod(threadIdx.x_1, 81)) && (floormod(threadIdx.x_1, 81) < 72)) && (1 <= floormod(threadIdx.x_1, 9))) && (floormod(threadIdx.x_1, 9) < 8)), (float32*)data_2[(((((rc.outer.outer*392) + (floordiv(threadIdx.x_1, 81)*49)) + (floordiv(floormod(threadIdx.x_1, 81), 9)*7)) + floormod(threadIdx.x_1, 9)) - 8)], 0f32, dtype=float32)
          attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          pad_temp.shared[(threadIdx.x_1 + 112)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 31), 81)) && (floormod((threadIdx.x_1 + 31), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 4), 9))) && (floormod((threadIdx.x_1 + 4), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*392) + (floordiv((threadIdx.x_1 + 112), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 31), 81), 9)*7)) + floormod((threadIdx.x_1 + 4), 9)) - 8)], 0f32, dtype=float32)
          attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          pad_temp.shared[(threadIdx.x_1 + 224)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 62), 81)) && (floormod((threadIdx.x_1 + 62), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 8), 9))) && (floormod((threadIdx.x_1 + 8), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*392) + (floordiv((threadIdx.x_1 + 224), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 62), 81), 9)*7)) + floormod((threadIdx.x_1 + 8), 9)) - 8)], 0f32, dtype=float32)
          attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          pad_temp.shared[(threadIdx.x_1 + 336)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 12), 81)) && (floormod((threadIdx.x_1 + 12), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 3), 9))) && (floormod((threadIdx.x_1 + 3), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*392) + (floordiv((threadIdx.x_1 + 336), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 12), 81), 9)*7)) + floormod((threadIdx.x_1 + 3), 9)) - 8)], 0f32, dtype=float32)
          attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          pad_temp.shared[(threadIdx.x_1 + 448)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 43), 81)) && (floormod((threadIdx.x_1 + 43), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 7), 9))) && (floormod((threadIdx.x_1 + 7), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*392) + (floordiv((threadIdx.x_1 + 448), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 43), 81), 9)*7)) + floormod((threadIdx.x_1 + 7), 9)) - 8)], 0f32, dtype=float32)
          attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          if @tir.likely((threadIdx.x_1 < 88), dtype=bool) {
            pad_temp.shared[(threadIdx.x_1 + 560)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 74), 81)) && (floormod((threadIdx.x_1 + 74), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 2), 9))) && (floormod((threadIdx.x_1 + 2), 9) < 8)), (float32*)data_2[(((((rc.outer.outer*392) + (floordiv((threadIdx.x_1 + 560), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 74), 81), 9)*7)) + floormod((threadIdx.x_1 + 2), 9)) - 8)], 0f32, dtype=float32)
          }
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          kernel.shared[threadIdx.x_2] = (float32*)kernel_2[((((blockIdx.x*73728) + (floordiv(threadIdx.x_2, 72)*4608)) + (rc.outer.outer*72)) + floormod(threadIdx.x_2, 72))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          kernel.shared[(threadIdx.x_2 + 112)] = (float32*)kernel_2[((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 112), 72)*4608)) + (rc.outer.outer*72)) + floormod((threadIdx.x_2 + 40), 72))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          kernel.shared[(threadIdx.x_2 + 224)] = (float32*)kernel_2[((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 224), 72)*4608)) + (rc.outer.outer*72)) + floormod((threadIdx.x_2 + 8), 72))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          kernel.shared[(threadIdx.x_2 + 336)] = (float32*)kernel_2[((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 336), 72)*4608)) + (rc.outer.outer*72)) + floormod((threadIdx.x_2 + 48), 72))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          kernel.shared[(threadIdx.x_2 + 448)] = (float32*)kernel_2[((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 448), 72)*4608)) + (rc.outer.outer*72)) + floormod((threadIdx.x_2 + 16), 72))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          kernel.shared[(threadIdx.x_2 + 560)] = (float32*)kernel_2[((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 560), 72)*4608)) + (rc.outer.outer*72)) + floormod((threadIdx.x_2 + 56), 72))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          kernel.shared[(threadIdx.x_2 + 672)] = (float32*)kernel_2[((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 672), 72)*4608)) + (rc.outer.outer*72)) + floormod((threadIdx.x_2 + 24), 72))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          kernel.shared[(threadIdx.x_2 + 784)] = (float32*)kernel_2[((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 784), 72)*4608)) + (rc.outer.outer*72)) + floormod((threadIdx.x_2 + 64), 72))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          kernel.shared[(threadIdx.x_2 + 896)] = (float32*)kernel_2[((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 896), 72)*4608)) + (rc.outer.outer*72)) + floormod((threadIdx.x_2 + 32), 72))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          kernel.shared[(threadIdx.x_2 + 1008)] = (float32*)kernel_2[(((((blockIdx.x*73728) + (floordiv(threadIdx.x_2, 72)*4608)) + (rc.outer.outer*72)) + floormod(threadIdx.x_2, 72)) + 64512)]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
          if @tir.likely((threadIdx.x_2 < 32), dtype=bool) {
            kernel.shared[(threadIdx.x_2 + 1120)] = (float32*)kernel_2[((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 1120), 72)*4608)) + (rc.outer.outer*72)) + floormod((threadIdx.x_2 + 40), 72))]
          }
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[floormod(threadIdx.x, 7)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*72)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 9)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*72)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 18)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*72)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 27)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*72)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 36)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*72)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 45)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*72)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 54)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*72)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 1)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 1)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 10)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 1)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 19)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 1)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 28)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 1)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 37)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 1)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 46)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 1)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 55)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 1)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 2)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 2)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 11)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 2)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 20)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 2)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 29)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 2)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 38)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 2)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 47)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 2)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 56)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 2)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 9)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 3)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 18)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 3)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 27)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 3)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 36)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 3)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 45)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 3)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 54)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 3)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 63)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 3)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 10)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 4)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 19)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 4)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 28)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 4)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 37)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 4)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 46)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 4)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 55)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 4)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 64)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 4)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 11)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 5)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 20)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 5)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 29)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 5)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 38)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 5)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 47)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 5)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 56)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 5)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 65)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 5)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 18)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 6)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 27)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 6)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 36)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 6)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 45)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 6)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 54)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 6)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 63)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 6)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 72)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 6)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 19)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 7)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 28)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 7)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 37)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 7)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 46)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 7)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 55)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 7)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 64)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 7)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 73)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 7)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 20)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 8)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 29)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 8)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 38)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 8)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 47)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 8)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 56)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 8)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 65)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 8)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 74)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 8)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 81)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 9)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 90)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 9)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 99)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 9)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 108)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 9)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 117)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 9)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 126)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 9)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 135)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 9)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 82)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 10)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 91)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 10)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 100)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 10)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 109)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 10)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 118)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 10)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 127)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 10)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 136)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 10)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 83)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 11)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 92)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 11)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 101)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 11)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 110)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 11)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 119)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 11)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 128)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 11)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 137)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 11)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 90)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 12)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 99)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 12)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 108)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 12)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 117)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 12)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 126)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 12)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 135)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 12)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 144)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 12)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 91)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 13)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 100)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 13)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 109)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 13)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 118)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 13)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 127)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 13)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 136)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 13)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 145)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 13)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 92)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 14)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 101)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 14)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 110)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 14)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 119)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 14)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 128)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 14)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 137)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 14)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 146)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 14)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 99)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 15)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 108)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 15)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 117)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 15)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 126)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 15)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 135)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 15)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 144)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 15)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 153)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 15)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 100)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 16)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 109)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 16)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 118)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 16)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 127)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 16)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 136)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 16)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 145)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 16)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 154)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 16)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 101)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 17)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 110)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 17)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 119)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 17)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 128)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 17)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 137)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 17)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 146)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 17)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 155)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 17)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 162)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 18)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 171)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 18)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 180)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 18)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 189)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 18)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 198)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 18)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 207)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 18)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 216)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 18)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 163)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 19)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 172)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 19)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 181)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 19)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 190)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 19)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 199)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 19)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 208)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 19)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 217)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 19)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 164)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 20)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 173)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 20)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 182)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 20)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 191)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 20)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 200)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 20)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 209)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 20)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 218)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 20)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 171)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 21)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 180)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 21)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 189)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 21)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 198)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 21)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 207)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 21)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 216)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 21)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 225)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 21)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 172)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 22)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 181)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 22)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 190)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 22)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 199)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 22)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 208)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 22)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 217)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 22)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 226)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 22)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 173)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 23)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 182)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 23)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 191)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 23)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 200)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 23)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 209)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 23)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 218)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 23)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 227)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 23)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 180)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 24)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 189)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 24)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 198)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 24)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 207)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 24)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 216)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 24)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 225)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 24)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 234)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 24)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 181)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 25)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 190)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 25)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 199)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 25)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 208)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 25)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 217)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 25)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 226)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 25)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 235)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 25)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 182)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 26)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 191)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 26)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 200)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 26)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 209)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 26)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 218)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 26)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 227)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 26)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 236)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 26)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 243)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 27)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 252)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 27)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 261)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 27)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 270)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 27)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 279)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 27)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 288)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 27)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 297)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 27)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 244)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 28)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 253)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 28)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 262)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 28)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 271)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 28)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 280)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 28)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 289)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 28)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 298)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 28)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 245)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 29)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 254)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 29)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 263)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 29)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 272)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 29)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 281)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 29)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 290)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 29)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 299)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 29)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 252)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 30)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 261)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 30)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 270)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 30)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 279)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 30)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 288)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 30)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 297)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 30)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 306)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 30)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 253)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 31)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 262)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 31)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 271)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 31)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 280)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 31)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 289)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 31)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 298)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 31)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 307)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 31)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 254)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 32)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 263)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 32)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 272)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 32)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 281)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 32)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 290)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 32)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 299)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 32)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 308)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 32)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 261)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 33)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 270)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 33)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 279)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 33)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 288)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 33)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 297)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 33)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 306)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 33)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 315)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 33)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 262)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 34)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 271)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 34)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 280)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 34)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 289)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 34)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 298)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 34)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 307)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 34)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 316)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 34)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 263)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 35)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 272)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 35)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 281)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 35)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 290)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 35)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 299)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 35)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 308)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 35)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 317)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 35)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 324)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 36)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 333)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 36)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 342)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 36)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 351)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 36)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 360)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 36)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 369)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 36)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 378)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 36)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 325)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 37)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 334)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 37)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 343)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 37)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 352)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 37)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 361)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 37)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 370)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 37)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 379)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 37)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 326)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 38)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 335)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 38)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 344)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 38)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 353)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 38)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 362)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 38)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 371)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 38)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 380)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 38)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 333)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 39)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 342)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 39)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 351)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 39)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 360)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 39)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 369)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 39)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 378)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 39)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 387)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 39)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 334)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 40)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 343)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 40)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 352)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 40)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 361)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 40)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 370)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 40)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 379)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 40)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 388)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 40)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 335)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 41)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 344)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 41)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 353)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 41)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 362)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 41)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 371)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 41)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 380)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 41)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 389)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 41)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 342)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 42)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 351)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 42)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 360)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 42)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 369)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 42)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 378)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 42)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 387)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 42)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 396)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 42)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 343)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 43)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 352)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 43)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 361)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 43)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 370)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 43)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 379)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 43)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 388)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 43)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 397)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 43)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 344)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 44)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 353)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 44)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 362)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 44)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 371)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 44)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 380)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 44)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 389)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 44)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 398)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 44)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 405)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 45)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 414)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 45)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 423)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 45)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 432)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 45)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 441)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 45)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 450)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 45)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 459)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 45)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 406)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 46)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 415)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 46)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 424)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 46)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 433)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 46)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 442)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 46)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 451)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 46)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 460)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 46)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 407)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 47)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 416)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 47)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 425)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 47)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 434)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 47)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 443)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 47)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 452)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 47)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 461)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 47)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 414)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 48)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 423)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 48)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 432)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 48)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 441)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 48)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 450)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 48)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 459)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 48)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 468)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 48)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 415)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 49)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 424)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 49)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 433)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 49)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 442)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 49)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 451)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 49)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 460)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 49)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 469)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 49)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 416)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 50)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 425)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 50)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 434)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 50)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 443)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 50)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 452)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 50)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 461)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 50)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 470)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 50)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 423)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 51)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 432)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 51)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 441)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 51)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 450)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 51)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 459)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 51)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 468)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 51)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 477)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 51)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 424)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 52)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 433)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 52)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 442)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 52)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 451)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 52)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 460)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 52)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 469)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 52)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 478)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 52)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 425)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 53)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 434)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 53)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 443)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 53)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 452)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 53)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 461)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 53)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 470)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 53)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 479)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 53)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 486)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 54)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 495)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 54)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 504)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 54)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 513)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 54)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 522)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 54)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 531)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 54)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 540)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 54)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 487)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 55)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 496)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 55)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 505)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 55)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 514)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 55)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 523)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 55)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 532)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 55)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 541)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 55)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 488)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 56)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 497)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 56)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 506)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 56)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 515)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 56)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 524)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 56)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 533)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 56)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 542)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 56)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 495)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 57)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 504)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 57)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 513)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 57)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 522)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 57)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 531)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 57)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 540)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 57)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 549)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 57)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 496)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 58)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 505)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 58)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 514)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 58)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 523)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 58)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 532)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 58)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 541)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 58)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 550)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 58)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 497)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 59)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 506)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 59)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 515)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 59)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 524)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 59)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 533)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 59)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 542)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 59)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 551)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 59)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 504)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 60)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 513)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 60)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 522)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 60)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 531)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 60)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 540)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 60)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 549)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 60)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 558)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 60)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 505)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 61)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 514)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 61)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 523)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 61)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 532)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 61)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 541)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 61)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 550)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 61)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 559)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 61)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 506)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 62)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 515)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 62)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 524)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 62)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 533)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 62)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 542)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 62)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 551)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 62)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 560)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 62)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 567)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 63)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 576)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 63)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 585)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 63)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 594)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 63)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 603)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 63)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 612)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 63)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 621)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 63)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 568)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 64)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 577)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 64)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 586)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 64)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 595)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 64)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 604)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 64)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 613)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 64)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 622)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 64)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 569)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 65)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 578)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 65)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 587)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 65)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 596)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 65)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 605)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 65)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 614)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 65)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 623)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 65)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 576)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 66)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 585)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 66)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 594)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 66)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 603)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 66)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 612)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 66)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 621)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 66)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 630)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 66)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 577)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 67)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 586)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 67)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 595)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 67)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 604)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 67)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 613)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 67)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 622)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 67)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 631)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 67)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 578)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 68)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 587)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 68)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 596)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 68)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 605)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 68)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 614)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 68)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 623)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 68)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 632)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 68)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 585)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 69)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 594)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 69)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 603)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 69)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 612)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 69)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 621)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 69)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 630)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 69)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 639)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 69)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 586)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 70)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 595)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 70)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 604)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 70)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 613)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 70)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 622)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 70)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 631)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 70)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 640)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 70)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 587)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 71)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 596)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 71)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 605)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 71)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 614)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 71)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 623)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 71)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 632)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 71)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7) + 641)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*72) + 71)]))
        }
        for (i2.inner: int32, 0, 7) {
          compute_2[((((blockIdx.x*784) + (floordiv(threadIdx.x, 7)*49)) + (i2.inner*7)) + floormod(threadIdx.x, 7))] = max(((float32*)compute_3[i2.inner] + (float32*)bias_2[((blockIdx.x*16) + floordiv(threadIdx.x, 7))]), 0f32)
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    ctx = tvm.gpu()
    data_tvm = tvm.nd.array(data_np, ctx=ctx)
    weight_tvm = tvm.nd.array(weight_np, ctx=ctx)
    bias_tvm = tvm.nd.array(bias_np, ctx=ctx)
    out_tvm = tvm.nd.empty(out_np.shape, ctx=ctx)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.asnumpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, ctx, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.203 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measuremnt records are dumpped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API, and build the binary again.


.. code-block:: default


    # Load the measuremnt record for the best schedule
    inp, res = auto_scheduler.load_best(log_file, task.workload_key)

    # Print equivalent python schedule API. This can be used for debugging and
    # learning the behavior of the auto-scheduler.
    print("Equivalent python schedule:")
    print(task.compute_dag.print_python_code_from_state(inp.state))

    # Rebuild the binary. This shows how you can apply the best schedule from a
    # log file without reruning the search again.
    sch, args = task.compute_dag.apply_steps_from_state(inp.state)
    func = tvm.build(sch, args, target)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    compute_nn, compute_ff, compute_yy, compute_xx, compute_rc, compute_ry, compute_rx = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    compute_nn_o_i, compute_nn_i = s[compute].split(compute_nn, factor=1)
    compute_nn_o_o_i, compute_nn_o_i = s[compute].split(compute_nn_o_i, factor=1)
    compute_nn_o_o_o_i, compute_nn_o_o_i = s[compute].split(compute_nn_o_o_i, factor=1)
    compute_nn_o_o_o_o, compute_nn_o_o_o_i = s[compute].split(compute_nn_o_o_o_i, factor=1)
    compute_ff_o_i, compute_ff_i = s[compute].split(compute_ff, factor=1)
    compute_ff_o_o_i, compute_ff_o_i = s[compute].split(compute_ff_o_i, factor=1)
    compute_ff_o_o_o_i, compute_ff_o_o_i = s[compute].split(compute_ff_o_o_i, factor=16)
    compute_ff_o_o_o_o, compute_ff_o_o_o_i = s[compute].split(compute_ff_o_o_o_i, factor=1)
    compute_yy_o_i, compute_yy_i = s[compute].split(compute_yy, factor=7)
    compute_yy_o_o_i, compute_yy_o_i = s[compute].split(compute_yy_o_i, factor=1)
    compute_yy_o_o_o_i, compute_yy_o_o_i = s[compute].split(compute_yy_o_o_i, factor=1)
    compute_yy_o_o_o_o, compute_yy_o_o_o_i = s[compute].split(compute_yy_o_o_o_i, factor=1)
    compute_xx_o_i, compute_xx_i = s[compute].split(compute_xx, factor=1)
    compute_xx_o_o_i, compute_xx_o_i = s[compute].split(compute_xx_o_i, factor=1)
    compute_xx_o_o_o_i, compute_xx_o_o_i = s[compute].split(compute_xx_o_o_i, factor=7)
    compute_xx_o_o_o_o, compute_xx_o_o_o_i = s[compute].split(compute_xx_o_o_o_i, factor=1)
    compute_rc_o_i, compute_rc_i = s[compute].split(compute_rc, factor=1)
    compute_rc_o_o, compute_rc_o_i = s[compute].split(compute_rc_o_i, factor=8)
    compute_ry_o_i, compute_ry_i = s[compute].split(compute_ry, factor=1)
    compute_ry_o_o, compute_ry_o_i = s[compute].split(compute_ry_o_i, factor=3)
    compute_rx_o_i, compute_rx_i = s[compute].split(compute_rx, factor=3)
    compute_rx_o_o, compute_rx_o_i = s[compute].split(compute_rx_o_i, factor=1)
    s[compute].reorder(compute_nn_o_o_o_o, compute_ff_o_o_o_o, compute_yy_o_o_o_o, compute_xx_o_o_o_o, compute_nn_o_o_o_i, compute_ff_o_o_o_i, compute_yy_o_o_o_i, compute_xx_o_o_o_i, compute_nn_o_o_i, compute_ff_o_o_i, compute_yy_o_o_i, compute_xx_o_o_i, compute_rc_o_o, compute_ry_o_o, compute_rx_o_o, compute_rc_o_i, compute_ry_o_i, compute_rx_o_i, compute_nn_o_i, compute_ff_o_i, compute_yy_o_i, compute_xx_o_i, compute_rc_i, compute_ry_i, compute_rx_i, compute_nn_i, compute_ff_i, compute_yy_i, compute_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=16)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=7)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[compute].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [compute])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[compute], compute_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [compute])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[compute], compute_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=112)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=112)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[compute].pragma(compute_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[compute].pragma(compute_nn_o_o_o_o, "unroll_explicit", True)




A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default


    cost_model = auto_scheduler.XGBModel()
    cost_model.update_from_file(log_file)
    search_policy = auto_scheduler.SketchPolicy(
        task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
    )
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=5,
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
    )
    sch, args = auto_scheduler.auto_schedule(task, search_policy, tuning_options=tune_option)

    # Kill the measurement process
    del measure_ctx




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  40.179 seconds)


.. _sphx_glr_download_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
