.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a convolution layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_


Different from the existing :ref:`autotvm <tutorials-autotvm-sec>` which relies on 
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.create_task(conv2d_layer, (N, H, W, CO, CI, KH, KW, strides, padding), target)

    # Inspect the computational graph
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    compute(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (compute[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search and auto-tuning.

* :code:`measure_ctx` launches a different process for measurement. This
  provides an isolation. It can protect the master process from GPU crashes
  happended during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value > 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, it will return the best schedule it found.


.. code-block:: default


    sch, args = auto_scheduler.auto_schedule(task, tuning_options=tune_option)

    # Kill the process for measurement
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none





We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    #[version = "0.0.5"]
    primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"global_symbol": "main", "tir.noalias": True}
      buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [1, 512, 7, 7], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [1, 512, 1, 1], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [512, 512, 3, 3], []),
                 data: Buffer(data_2: Pointer(float32), float32, [1, 512, 7, 7], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 112;
      attr [compute_3: Pointer(float32)] "storage_scope" = "local";
      allocate(compute_3, float32, [7]);
      attr [pad_temp.shared: Pointer(float32)] "storage_scope" = "shared";
      allocate(pad_temp.shared, float32, [54]);
      attr [kernel.shared: Pointer(float32)] "storage_scope" = "shared";
      allocate(kernel.shared, float32, [576]);
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        compute_3[0] = 0f32
        compute_3[1] = 0f32
        compute_3[2] = 0f32
        compute_3[3] = 0f32
        compute_3[4] = 0f32
        compute_3[5] = 0f32
        compute_3[6] = 0f32
        for (rc.outer.outer: int32, 0, 256) {
          attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
            if @tir.likely((threadIdx.x_1 < 27), dtype=bool) {
              pad_temp.shared[(threadIdx.x_1*2)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1*2), 27)) && (floormod((threadIdx.x_1*2), 27) < 24)) && (1 <= (floormod(blockIdx.x, 7) + floormod((threadIdx.x_1*2), 3)))) && ((floormod(blockIdx.x, 7) + floormod((threadIdx.x_1*2), 3)) < 8)), (float32*)data_2[((((((rc.outer.outer*98) + (floordiv((threadIdx.x_1*2), 27)*49)) + (floordiv(floormod((threadIdx.x_1*2), 27), 3)*7)) + floormod(blockIdx.x, 7)) + floormod((threadIdx.x_1*2), 3)) - 8)], 0f32, dtype=float32)
            }
            if @tir.likely((threadIdx.x_1 < 27), dtype=bool) {
              pad_temp.shared[((threadIdx.x_1*2) + 1)] = @tir.if_then_else(((((3 <= floormod(((threadIdx.x_1*2) + 1), 27)) && (floormod(((threadIdx.x_1*2) + 1), 27) < 24)) && (1 <= (floormod(blockIdx.x, 7) + floormod(((threadIdx.x_1*2) + 1), 3)))) && ((floormod(blockIdx.x, 7) + floormod(((threadIdx.x_1*2) + 1), 3)) < 8)), (float32*)data_2[((((((rc.outer.outer*98) + (floordiv(((threadIdx.x_1*2) + 1), 27)*49)) + (floordiv(floormod(((threadIdx.x_1*2) + 1), 27), 3)*7)) + floormod(blockIdx.x, 7)) + floormod(((threadIdx.x_1*2) + 1), 3)) - 8)], 0f32, dtype=float32)
            }
          }
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[threadIdx.x_2] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv(threadIdx.x_2, 18)*4608)) + (rc.outer.outer*18)) + floormod(threadIdx.x_2, 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 32)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 32), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 14), 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 64)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 64), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 10), 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 96)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 96), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 6), 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 128)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 128), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 2), 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 160)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 160), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 16), 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 192)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 192), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 12), 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 224)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 224), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 8), 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 256)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 256), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 4), 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 288)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv(threadIdx.x_2, 18)*4608)) + (rc.outer.outer*18)) + floormod(threadIdx.x_2, 18)) + 73728)]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 320)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 320), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 14), 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 352)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 352), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 10), 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 384)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 384), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 6), 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 416)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 416), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 2), 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 448)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 448), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 16), 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 480)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 480), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 12), 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 512)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 512), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 8), 18))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
          kernel.shared[(threadIdx.x_2 + 544)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 544), 18)*4608)) + (rc.outer.outer*18)) + floormod((threadIdx.x_2 + 4), 18))]
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[0]*(float32*)kernel.shared[(threadIdx.x*18)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[3]*(float32*)kernel.shared[(threadIdx.x*18)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[6]*(float32*)kernel.shared[(threadIdx.x*18)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[9]*(float32*)kernel.shared[(threadIdx.x*18)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[12]*(float32*)kernel.shared[(threadIdx.x*18)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[15]*(float32*)kernel.shared[(threadIdx.x*18)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[18]*(float32*)kernel.shared[(threadIdx.x*18)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[1]*(float32*)kernel.shared[((threadIdx.x*18) + 1)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[4]*(float32*)kernel.shared[((threadIdx.x*18) + 1)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[7]*(float32*)kernel.shared[((threadIdx.x*18) + 1)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[10]*(float32*)kernel.shared[((threadIdx.x*18) + 1)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[13]*(float32*)kernel.shared[((threadIdx.x*18) + 1)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[16]*(float32*)kernel.shared[((threadIdx.x*18) + 1)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[19]*(float32*)kernel.shared[((threadIdx.x*18) + 1)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[2]*(float32*)kernel.shared[((threadIdx.x*18) + 2)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[5]*(float32*)kernel.shared[((threadIdx.x*18) + 2)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[8]*(float32*)kernel.shared[((threadIdx.x*18) + 2)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[11]*(float32*)kernel.shared[((threadIdx.x*18) + 2)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[14]*(float32*)kernel.shared[((threadIdx.x*18) + 2)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[17]*(float32*)kernel.shared[((threadIdx.x*18) + 2)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[20]*(float32*)kernel.shared[((threadIdx.x*18) + 2)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[3]*(float32*)kernel.shared[((threadIdx.x*18) + 3)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[6]*(float32*)kernel.shared[((threadIdx.x*18) + 3)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[9]*(float32*)kernel.shared[((threadIdx.x*18) + 3)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[12]*(float32*)kernel.shared[((threadIdx.x*18) + 3)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[15]*(float32*)kernel.shared[((threadIdx.x*18) + 3)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[18]*(float32*)kernel.shared[((threadIdx.x*18) + 3)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[21]*(float32*)kernel.shared[((threadIdx.x*18) + 3)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[4]*(float32*)kernel.shared[((threadIdx.x*18) + 4)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[7]*(float32*)kernel.shared[((threadIdx.x*18) + 4)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[10]*(float32*)kernel.shared[((threadIdx.x*18) + 4)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[13]*(float32*)kernel.shared[((threadIdx.x*18) + 4)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[16]*(float32*)kernel.shared[((threadIdx.x*18) + 4)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[19]*(float32*)kernel.shared[((threadIdx.x*18) + 4)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[22]*(float32*)kernel.shared[((threadIdx.x*18) + 4)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[5]*(float32*)kernel.shared[((threadIdx.x*18) + 5)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[8]*(float32*)kernel.shared[((threadIdx.x*18) + 5)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[11]*(float32*)kernel.shared[((threadIdx.x*18) + 5)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[14]*(float32*)kernel.shared[((threadIdx.x*18) + 5)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[17]*(float32*)kernel.shared[((threadIdx.x*18) + 5)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[20]*(float32*)kernel.shared[((threadIdx.x*18) + 5)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[23]*(float32*)kernel.shared[((threadIdx.x*18) + 5)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[6]*(float32*)kernel.shared[((threadIdx.x*18) + 6)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[9]*(float32*)kernel.shared[((threadIdx.x*18) + 6)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[12]*(float32*)kernel.shared[((threadIdx.x*18) + 6)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[15]*(float32*)kernel.shared[((threadIdx.x*18) + 6)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[18]*(float32*)kernel.shared[((threadIdx.x*18) + 6)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[21]*(float32*)kernel.shared[((threadIdx.x*18) + 6)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[24]*(float32*)kernel.shared[((threadIdx.x*18) + 6)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[7]*(float32*)kernel.shared[((threadIdx.x*18) + 7)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[10]*(float32*)kernel.shared[((threadIdx.x*18) + 7)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[13]*(float32*)kernel.shared[((threadIdx.x*18) + 7)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[16]*(float32*)kernel.shared[((threadIdx.x*18) + 7)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[19]*(float32*)kernel.shared[((threadIdx.x*18) + 7)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[22]*(float32*)kernel.shared[((threadIdx.x*18) + 7)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[25]*(float32*)kernel.shared[((threadIdx.x*18) + 7)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[8]*(float32*)kernel.shared[((threadIdx.x*18) + 8)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[11]*(float32*)kernel.shared[((threadIdx.x*18) + 8)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[14]*(float32*)kernel.shared[((threadIdx.x*18) + 8)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[17]*(float32*)kernel.shared[((threadIdx.x*18) + 8)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[20]*(float32*)kernel.shared[((threadIdx.x*18) + 8)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[23]*(float32*)kernel.shared[((threadIdx.x*18) + 8)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[26]*(float32*)kernel.shared[((threadIdx.x*18) + 8)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[27]*(float32*)kernel.shared[((threadIdx.x*18) + 9)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[30]*(float32*)kernel.shared[((threadIdx.x*18) + 9)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[33]*(float32*)kernel.shared[((threadIdx.x*18) + 9)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[36]*(float32*)kernel.shared[((threadIdx.x*18) + 9)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[39]*(float32*)kernel.shared[((threadIdx.x*18) + 9)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[42]*(float32*)kernel.shared[((threadIdx.x*18) + 9)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[45]*(float32*)kernel.shared[((threadIdx.x*18) + 9)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[28]*(float32*)kernel.shared[((threadIdx.x*18) + 10)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[31]*(float32*)kernel.shared[((threadIdx.x*18) + 10)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[34]*(float32*)kernel.shared[((threadIdx.x*18) + 10)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[37]*(float32*)kernel.shared[((threadIdx.x*18) + 10)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[40]*(float32*)kernel.shared[((threadIdx.x*18) + 10)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[43]*(float32*)kernel.shared[((threadIdx.x*18) + 10)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[46]*(float32*)kernel.shared[((threadIdx.x*18) + 10)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[29]*(float32*)kernel.shared[((threadIdx.x*18) + 11)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[32]*(float32*)kernel.shared[((threadIdx.x*18) + 11)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[35]*(float32*)kernel.shared[((threadIdx.x*18) + 11)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[38]*(float32*)kernel.shared[((threadIdx.x*18) + 11)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[41]*(float32*)kernel.shared[((threadIdx.x*18) + 11)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[44]*(float32*)kernel.shared[((threadIdx.x*18) + 11)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[47]*(float32*)kernel.shared[((threadIdx.x*18) + 11)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[30]*(float32*)kernel.shared[((threadIdx.x*18) + 12)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[33]*(float32*)kernel.shared[((threadIdx.x*18) + 12)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[36]*(float32*)kernel.shared[((threadIdx.x*18) + 12)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[39]*(float32*)kernel.shared[((threadIdx.x*18) + 12)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[42]*(float32*)kernel.shared[((threadIdx.x*18) + 12)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[45]*(float32*)kernel.shared[((threadIdx.x*18) + 12)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[48]*(float32*)kernel.shared[((threadIdx.x*18) + 12)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[31]*(float32*)kernel.shared[((threadIdx.x*18) + 13)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[34]*(float32*)kernel.shared[((threadIdx.x*18) + 13)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[37]*(float32*)kernel.shared[((threadIdx.x*18) + 13)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[40]*(float32*)kernel.shared[((threadIdx.x*18) + 13)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[43]*(float32*)kernel.shared[((threadIdx.x*18) + 13)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[46]*(float32*)kernel.shared[((threadIdx.x*18) + 13)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[49]*(float32*)kernel.shared[((threadIdx.x*18) + 13)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[32]*(float32*)kernel.shared[((threadIdx.x*18) + 14)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[35]*(float32*)kernel.shared[((threadIdx.x*18) + 14)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[38]*(float32*)kernel.shared[((threadIdx.x*18) + 14)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[41]*(float32*)kernel.shared[((threadIdx.x*18) + 14)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[44]*(float32*)kernel.shared[((threadIdx.x*18) + 14)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[47]*(float32*)kernel.shared[((threadIdx.x*18) + 14)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[50]*(float32*)kernel.shared[((threadIdx.x*18) + 14)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[33]*(float32*)kernel.shared[((threadIdx.x*18) + 15)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[36]*(float32*)kernel.shared[((threadIdx.x*18) + 15)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[39]*(float32*)kernel.shared[((threadIdx.x*18) + 15)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[42]*(float32*)kernel.shared[((threadIdx.x*18) + 15)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[45]*(float32*)kernel.shared[((threadIdx.x*18) + 15)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[48]*(float32*)kernel.shared[((threadIdx.x*18) + 15)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[51]*(float32*)kernel.shared[((threadIdx.x*18) + 15)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[34]*(float32*)kernel.shared[((threadIdx.x*18) + 16)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[37]*(float32*)kernel.shared[((threadIdx.x*18) + 16)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[40]*(float32*)kernel.shared[((threadIdx.x*18) + 16)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[43]*(float32*)kernel.shared[((threadIdx.x*18) + 16)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[46]*(float32*)kernel.shared[((threadIdx.x*18) + 16)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[49]*(float32*)kernel.shared[((threadIdx.x*18) + 16)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[52]*(float32*)kernel.shared[((threadIdx.x*18) + 16)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[35]*(float32*)kernel.shared[((threadIdx.x*18) + 17)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[38]*(float32*)kernel.shared[((threadIdx.x*18) + 17)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[41]*(float32*)kernel.shared[((threadIdx.x*18) + 17)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[44]*(float32*)kernel.shared[((threadIdx.x*18) + 17)]))
          compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[47]*(float32*)kernel.shared[((threadIdx.x*18) + 17)]))
          compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[50]*(float32*)kernel.shared[((threadIdx.x*18) + 17)]))
          compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[53]*(float32*)kernel.shared[((threadIdx.x*18) + 17)]))
        }
        compute_2[(((floordiv(blockIdx.x, 7)*1568) + (threadIdx.x*49)) + floormod(blockIdx.x, 7))] = max(((float32*)compute_3[0] + (float32*)bias_2[((floordiv(blockIdx.x, 7)*32) + threadIdx.x)]), 0f32)
        compute_2[((((floordiv(blockIdx.x, 7)*1568) + (threadIdx.x*49)) + floormod(blockIdx.x, 7)) + 7)] = max(((float32*)compute_3[1] + (float32*)bias_2[((floordiv(blockIdx.x, 7)*32) + threadIdx.x)]), 0f32)
        compute_2[((((floordiv(blockIdx.x, 7)*1568) + (threadIdx.x*49)) + floormod(blockIdx.x, 7)) + 14)] = max(((float32*)compute_3[2] + (float32*)bias_2[((floordiv(blockIdx.x, 7)*32) + threadIdx.x)]), 0f32)
        compute_2[((((floordiv(blockIdx.x, 7)*1568) + (threadIdx.x*49)) + floormod(blockIdx.x, 7)) + 21)] = max(((float32*)compute_3[3] + (float32*)bias_2[((floordiv(blockIdx.x, 7)*32) + threadIdx.x)]), 0f32)
        compute_2[((((floordiv(blockIdx.x, 7)*1568) + (threadIdx.x*49)) + floormod(blockIdx.x, 7)) + 28)] = max(((float32*)compute_3[4] + (float32*)bias_2[((floordiv(blockIdx.x, 7)*32) + threadIdx.x)]), 0f32)
        compute_2[((((floordiv(blockIdx.x, 7)*1568) + (threadIdx.x*49)) + floormod(blockIdx.x, 7)) + 35)] = max(((float32*)compute_3[5] + (float32*)bias_2[((floordiv(blockIdx.x, 7)*32) + threadIdx.x)]), 0f32)
        compute_2[((((floordiv(blockIdx.x, 7)*1568) + (threadIdx.x*49)) + floormod(blockIdx.x, 7)) + 42)] = max(((float32*)compute_3[6] + (float32*)bias_2[((floordiv(blockIdx.x, 7)*32) + threadIdx.x)]), 0f32)
      }
    }

    #[metadata]
    {
      "root": 1, 
      "nodes": [
        {
          "type_key": ""
        }, 
        {
          "type_key": "Map", 
          "keys": [
            "IntImm"
          ], 
          "data": [2]
        }, 
        {
          "type_key": "Array", 
          "data": [3]
        }, 
        {
          "type_key": "IntImm", 
          "attrs": {
            "dtype": "bool", 
            "value": "1"
          }
        }
      ], 
      "b64ndarrays": [], 
      "attrs": {"tvm_version": "0.8.dev0"}
    }



Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    ctx = tvm.gpu()
    data_tvm = tvm.nd.array(data_np, ctx=ctx)
    weight_tvm = tvm.nd.array(weight_np, ctx=ctx)
    bias_tvm = tvm.nd.array(bias_np, ctx=ctx)
    out_tvm = tvm.nd.empty(out_np.shape, ctx=ctx)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.asnumpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, ctx, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.175 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measuremnt records are dumpped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API, and build the binary again.


.. code-block:: default


    # Load the measuremnt record for the best schedule
    inp, res = auto_scheduler.load_best(log_file, task.workload_key)

    # Print equivalent python schedule API. This can be used for debugging and
    # learning the behavior of the auto-scheduler.
    print("Equivalent python schedule:")
    print(task.compute_dag.print_python_code_from_state(inp.state))

    # Rebuild the binary. This shows how you can apply the best schedule from a
    # log file without reruning the search again.
    sch, args = task.compute_dag.apply_steps_from_state(inp.state)
    func = tvm.build(sch, args, target)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    compute_nn, compute_ff, compute_yy, compute_xx, compute_rc, compute_ry, compute_rx = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    compute_nn_o_i, compute_nn_i = s[compute].split(compute_nn, factor=1)
    compute_nn_o_o_i, compute_nn_o_i = s[compute].split(compute_nn_o_i, factor=1)
    compute_nn_o_o_o_i, compute_nn_o_o_i = s[compute].split(compute_nn_o_o_i, factor=1)
    compute_nn_o_o_o_o, compute_nn_o_o_o_i = s[compute].split(compute_nn_o_o_o_i, factor=1)
    compute_ff_o_i, compute_ff_i = s[compute].split(compute_ff, factor=1)
    compute_ff_o_o_i, compute_ff_o_i = s[compute].split(compute_ff_o_i, factor=1)
    compute_ff_o_o_o_i, compute_ff_o_o_i = s[compute].split(compute_ff_o_o_i, factor=32)
    compute_ff_o_o_o_o, compute_ff_o_o_o_i = s[compute].split(compute_ff_o_o_o_i, factor=1)
    compute_yy_o_i, compute_yy_i = s[compute].split(compute_yy, factor=1)
    compute_yy_o_o_i, compute_yy_o_i = s[compute].split(compute_yy_o_i, factor=1)
    compute_yy_o_o_o_i, compute_yy_o_o_i = s[compute].split(compute_yy_o_o_i, factor=1)
    compute_yy_o_o_o_o, compute_yy_o_o_o_i = s[compute].split(compute_yy_o_o_o_i, factor=7)
    compute_xx_o_i, compute_xx_i = s[compute].split(compute_xx, factor=1)
    compute_xx_o_o_i, compute_xx_o_i = s[compute].split(compute_xx_o_i, factor=1)
    compute_xx_o_o_o_i, compute_xx_o_o_i = s[compute].split(compute_xx_o_o_i, factor=1)
    compute_xx_o_o_o_o, compute_xx_o_o_o_i = s[compute].split(compute_xx_o_o_o_i, factor=1)
    compute_rc_o_i, compute_rc_i = s[compute].split(compute_rc, factor=2)
    compute_rc_o_o, compute_rc_o_i = s[compute].split(compute_rc_o_i, factor=1)
    compute_ry_o_i, compute_ry_i = s[compute].split(compute_ry, factor=3)
    compute_ry_o_o, compute_ry_o_i = s[compute].split(compute_ry_o_i, factor=1)
    compute_rx_o_i, compute_rx_i = s[compute].split(compute_rx, factor=3)
    compute_rx_o_o, compute_rx_o_i = s[compute].split(compute_rx_o_i, factor=1)
    s[compute].reorder(compute_nn_o_o_o_o, compute_ff_o_o_o_o, compute_yy_o_o_o_o, compute_xx_o_o_o_o, compute_nn_o_o_o_i, compute_ff_o_o_o_i, compute_yy_o_o_o_i, compute_xx_o_o_o_i, compute_nn_o_o_i, compute_ff_o_o_i, compute_yy_o_o_i, compute_xx_o_o_i, compute_rc_o_o, compute_ry_o_o, compute_rx_o_o, compute_rc_o_i, compute_ry_o_i, compute_rx_o_i, compute_nn_o_i, compute_ff_o_i, compute_yy_o_i, compute_xx_o_i, compute_rc_i, compute_ry_i, compute_rx_i, compute_nn_i, compute_ff_i, compute_yy_i, compute_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=32)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=7)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[compute].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [compute])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[compute], compute_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [compute])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[compute], compute_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=32)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=2)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=32)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[compute].pragma(compute_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[compute].pragma(compute_nn_o_o_o_o, "unroll_explicit", True)




A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default



    cost_model = auto_scheduler.XGBModel()
    cost_model.update_from_file(log_file)
    search_policy = auto_scheduler.SketchPolicy(
        task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
    )
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=5,
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
    )
    sch, args = auto_scheduler.auto_schedule(task, search_policy, tuning_options=tune_option)

    # Kill the measurement process
    del measure_ctx




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  36.702 seconds)


.. _sphx_glr_download_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
