.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    compute(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (compute[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the master process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.


.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none






We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Lowered TIR:
    primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"global_symbol": "main", "tir.noalias": True}
      buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [1, 512, 7, 7], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [1, 512, 1, 1], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [512, 512, 3, 3], []),
                 data: Buffer(data_2: Pointer(float32), float32, [1, 512, 7, 7], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 56;
      attr [compute_3: Pointer(float32)] "storage_scope" = "local";
      allocate(compute_3, float32, [7]);
      attr [pad_temp.shared: Pointer(float32)] "storage_scope" = "shared";
      allocate(pad_temp.shared, float32, [144]);
      attr [kernel.shared: Pointer(float32)] "storage_scope" = "shared";
      allocate(kernel.shared, float32, [3072]);
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64 {
        compute_3[0] = 0f32
        compute_3[1] = 0f32
        compute_3[2] = 0f32
        compute_3[3] = 0f32
        compute_3[4] = 0f32
        compute_3[5] = 0f32
        compute_3[6] = 0f32
        for (rc.outer.outer: int32, 0, 32) {
          for (rx.outer.outer: int32, 0, 3) {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            pad_temp.shared[threadIdx.x_1] = @tir.if_then_else(((((1 <= floormod(threadIdx.x_1, 9)) && (floormod(threadIdx.x_1, 9) < 8)) && (1 <= (rx.outer.outer + floormod(blockIdx.x, 7)))) && ((rx.outer.outer + floormod(blockIdx.x, 7)) < 8)), (float32*)data_2[((((((rc.outer.outer*784) + (floordiv(threadIdx.x_1, 9)*49)) + (floormod(threadIdx.x_1, 9)*7)) + rx.outer.outer) + floormod(blockIdx.x, 7)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            pad_temp.shared[(threadIdx.x_1 + 64)] = @tir.if_then_else(((((1 <= floormod((threadIdx.x_1 + 1), 9)) && (floormod((threadIdx.x_1 + 1), 9) < 8)) && (1 <= (rx.outer.outer + floormod(blockIdx.x, 7)))) && ((rx.outer.outer + floormod(blockIdx.x, 7)) < 8)), (float32*)data_2[((((((rc.outer.outer*784) + (floordiv((threadIdx.x_1 + 64), 9)*49)) + (floormod((threadIdx.x_1 + 1), 9)*7)) + rx.outer.outer) + floormod(blockIdx.x, 7)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            if @tir.likely((threadIdx.x_1 < 16), dtype=bool) {
              pad_temp.shared[(threadIdx.x_1 + 128)] = @tir.if_then_else(((((1 <= floormod((threadIdx.x_1 + 2), 9)) && (floormod((threadIdx.x_1 + 2), 9) < 8)) && (1 <= (rx.outer.outer + floormod(blockIdx.x, 7)))) && ((rx.outer.outer + floormod(blockIdx.x, 7)) < 8)), (float32*)data_2[((((((rc.outer.outer*784) + (floordiv((threadIdx.x_1 + 128), 9)*49)) + (floormod((threadIdx.x_1 + 2), 9)*7)) + rx.outer.outer) + floormod(blockIdx.x, 7)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[threadIdx.x_2] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 64)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 64), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 128)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 128), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 192)] = (float32*)kernel_2[((((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer) + 18432)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 256)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 256), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 320)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 320), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 384)] = (float32*)kernel_2[((((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer) + 36864)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 448)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 448), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 512)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 512), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 576)] = (float32*)kernel_2[((((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer) + 55296)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 640)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 640), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 704)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 704), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 768)] = (float32*)kernel_2[((((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer) + 73728)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 832)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 832), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 896)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 896), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 960)] = (float32*)kernel_2[((((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer) + 92160)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1024)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 1024), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1088)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 1088), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1152)] = (float32*)kernel_2[((((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer) + 110592)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1216)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 1216), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1280)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 1280), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1344)] = (float32*)kernel_2[((((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer) + 129024)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1408)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 1408), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1472)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 1472), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1536)] = (float32*)kernel_2[((((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer) + 147456)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1600)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 1600), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1664)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 1664), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1728)] = (float32*)kernel_2[((((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer) + 165888)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1792)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 1792), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1856)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 1856), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1920)] = (float32*)kernel_2[((((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer) + 184320)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 1984)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 1984), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 2048)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 2048), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 2112)] = (float32*)kernel_2[((((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer) + 202752)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 2176)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 2176), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 2240)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 2240), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 2304)] = (float32*)kernel_2[((((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer) + 221184)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 2368)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 2368), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 2432)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 2432), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 2496)] = (float32*)kernel_2[((((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer) + 239616)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 2560)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 2560), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 2624)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 2624), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 2688)] = (float32*)kernel_2[((((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer) + 258048)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 2752)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 2752), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 2816)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 2816), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 2880)] = (float32*)kernel_2[((((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 48)*4608)) + (rc.outer.outer*144)) + (floormod(threadIdx.x_2, 48)*3)) + rx.outer.outer) + 276480)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 2944)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 2944), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 16), 48)*3)) + rx.outer.outer)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;
            kernel.shared[(threadIdx.x_2 + 3008)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 3008), 48)*4608)) + (rc.outer.outer*144)) + (floormod((threadIdx.x_2 + 32), 48)*3)) + rx.outer.outer)]
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[0]*(float32*)kernel.shared[(threadIdx.x*48)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[1]*(float32*)kernel.shared[(threadIdx.x*48)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[2]*(float32*)kernel.shared[(threadIdx.x*48)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[3]*(float32*)kernel.shared[(threadIdx.x*48)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[4]*(float32*)kernel.shared[(threadIdx.x*48)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[5]*(float32*)kernel.shared[(threadIdx.x*48)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[6]*(float32*)kernel.shared[(threadIdx.x*48)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[9]*(float32*)kernel.shared[((threadIdx.x*48) + 3)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[10]*(float32*)kernel.shared[((threadIdx.x*48) + 3)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[11]*(float32*)kernel.shared[((threadIdx.x*48) + 3)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[12]*(float32*)kernel.shared[((threadIdx.x*48) + 3)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[13]*(float32*)kernel.shared[((threadIdx.x*48) + 3)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[14]*(float32*)kernel.shared[((threadIdx.x*48) + 3)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[15]*(float32*)kernel.shared[((threadIdx.x*48) + 3)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[1]*(float32*)kernel.shared[((threadIdx.x*48) + 1)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[2]*(float32*)kernel.shared[((threadIdx.x*48) + 1)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[3]*(float32*)kernel.shared[((threadIdx.x*48) + 1)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[4]*(float32*)kernel.shared[((threadIdx.x*48) + 1)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[5]*(float32*)kernel.shared[((threadIdx.x*48) + 1)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[6]*(float32*)kernel.shared[((threadIdx.x*48) + 1)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[7]*(float32*)kernel.shared[((threadIdx.x*48) + 1)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[10]*(float32*)kernel.shared[((threadIdx.x*48) + 4)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[11]*(float32*)kernel.shared[((threadIdx.x*48) + 4)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[12]*(float32*)kernel.shared[((threadIdx.x*48) + 4)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[13]*(float32*)kernel.shared[((threadIdx.x*48) + 4)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[14]*(float32*)kernel.shared[((threadIdx.x*48) + 4)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[15]*(float32*)kernel.shared[((threadIdx.x*48) + 4)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[16]*(float32*)kernel.shared[((threadIdx.x*48) + 4)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[2]*(float32*)kernel.shared[((threadIdx.x*48) + 2)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[3]*(float32*)kernel.shared[((threadIdx.x*48) + 2)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[4]*(float32*)kernel.shared[((threadIdx.x*48) + 2)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[5]*(float32*)kernel.shared[((threadIdx.x*48) + 2)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[6]*(float32*)kernel.shared[((threadIdx.x*48) + 2)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[7]*(float32*)kernel.shared[((threadIdx.x*48) + 2)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[8]*(float32*)kernel.shared[((threadIdx.x*48) + 2)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[11]*(float32*)kernel.shared[((threadIdx.x*48) + 5)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[12]*(float32*)kernel.shared[((threadIdx.x*48) + 5)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[13]*(float32*)kernel.shared[((threadIdx.x*48) + 5)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[14]*(float32*)kernel.shared[((threadIdx.x*48) + 5)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[15]*(float32*)kernel.shared[((threadIdx.x*48) + 5)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[16]*(float32*)kernel.shared[((threadIdx.x*48) + 5)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[17]*(float32*)kernel.shared[((threadIdx.x*48) + 5)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[18]*(float32*)kernel.shared[((threadIdx.x*48) + 6)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[19]*(float32*)kernel.shared[((threadIdx.x*48) + 6)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[20]*(float32*)kernel.shared[((threadIdx.x*48) + 6)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[21]*(float32*)kernel.shared[((threadIdx.x*48) + 6)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[22]*(float32*)kernel.shared[((threadIdx.x*48) + 6)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[23]*(float32*)kernel.shared[((threadIdx.x*48) + 6)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[24]*(float32*)kernel.shared[((threadIdx.x*48) + 6)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[27]*(float32*)kernel.shared[((threadIdx.x*48) + 9)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[28]*(float32*)kernel.shared[((threadIdx.x*48) + 9)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[29]*(float32*)kernel.shared[((threadIdx.x*48) + 9)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[30]*(float32*)kernel.shared[((threadIdx.x*48) + 9)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[31]*(float32*)kernel.shared[((threadIdx.x*48) + 9)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[32]*(float32*)kernel.shared[((threadIdx.x*48) + 9)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[33]*(float32*)kernel.shared[((threadIdx.x*48) + 9)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[19]*(float32*)kernel.shared[((threadIdx.x*48) + 7)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[20]*(float32*)kernel.shared[((threadIdx.x*48) + 7)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[21]*(float32*)kernel.shared[((threadIdx.x*48) + 7)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[22]*(float32*)kernel.shared[((threadIdx.x*48) + 7)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[23]*(float32*)kernel.shared[((threadIdx.x*48) + 7)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[24]*(float32*)kernel.shared[((threadIdx.x*48) + 7)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[25]*(float32*)kernel.shared[((threadIdx.x*48) + 7)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[28]*(float32*)kernel.shared[((threadIdx.x*48) + 10)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[29]*(float32*)kernel.shared[((threadIdx.x*48) + 10)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[30]*(float32*)kernel.shared[((threadIdx.x*48) + 10)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[31]*(float32*)kernel.shared[((threadIdx.x*48) + 10)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[32]*(float32*)kernel.shared[((threadIdx.x*48) + 10)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[33]*(float32*)kernel.shared[((threadIdx.x*48) + 10)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[34]*(float32*)kernel.shared[((threadIdx.x*48) + 10)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[20]*(float32*)kernel.shared[((threadIdx.x*48) + 8)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[21]*(float32*)kernel.shared[((threadIdx.x*48) + 8)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[22]*(float32*)kernel.shared[((threadIdx.x*48) + 8)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[23]*(float32*)kernel.shared[((threadIdx.x*48) + 8)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[24]*(float32*)kernel.shared[((threadIdx.x*48) + 8)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[25]*(float32*)kernel.shared[((threadIdx.x*48) + 8)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[26]*(float32*)kernel.shared[((threadIdx.x*48) + 8)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[29]*(float32*)kernel.shared[((threadIdx.x*48) + 11)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[30]*(float32*)kernel.shared[((threadIdx.x*48) + 11)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[31]*(float32*)kernel.shared[((threadIdx.x*48) + 11)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[32]*(float32*)kernel.shared[((threadIdx.x*48) + 11)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[33]*(float32*)kernel.shared[((threadIdx.x*48) + 11)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[34]*(float32*)kernel.shared[((threadIdx.x*48) + 11)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[35]*(float32*)kernel.shared[((threadIdx.x*48) + 11)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[36]*(float32*)kernel.shared[((threadIdx.x*48) + 12)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[37]*(float32*)kernel.shared[((threadIdx.x*48) + 12)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[38]*(float32*)kernel.shared[((threadIdx.x*48) + 12)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[39]*(float32*)kernel.shared[((threadIdx.x*48) + 12)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[40]*(float32*)kernel.shared[((threadIdx.x*48) + 12)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[41]*(float32*)kernel.shared[((threadIdx.x*48) + 12)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[42]*(float32*)kernel.shared[((threadIdx.x*48) + 12)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[45]*(float32*)kernel.shared[((threadIdx.x*48) + 15)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[46]*(float32*)kernel.shared[((threadIdx.x*48) + 15)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[47]*(float32*)kernel.shared[((threadIdx.x*48) + 15)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[48]*(float32*)kernel.shared[((threadIdx.x*48) + 15)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[49]*(float32*)kernel.shared[((threadIdx.x*48) + 15)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[50]*(float32*)kernel.shared[((threadIdx.x*48) + 15)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[51]*(float32*)kernel.shared[((threadIdx.x*48) + 15)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[37]*(float32*)kernel.shared[((threadIdx.x*48) + 13)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[38]*(float32*)kernel.shared[((threadIdx.x*48) + 13)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[39]*(float32*)kernel.shared[((threadIdx.x*48) + 13)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[40]*(float32*)kernel.shared[((threadIdx.x*48) + 13)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[41]*(float32*)kernel.shared[((threadIdx.x*48) + 13)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[42]*(float32*)kernel.shared[((threadIdx.x*48) + 13)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[43]*(float32*)kernel.shared[((threadIdx.x*48) + 13)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[46]*(float32*)kernel.shared[((threadIdx.x*48) + 16)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[47]*(float32*)kernel.shared[((threadIdx.x*48) + 16)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[48]*(float32*)kernel.shared[((threadIdx.x*48) + 16)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[49]*(float32*)kernel.shared[((threadIdx.x*48) + 16)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[50]*(float32*)kernel.shared[((threadIdx.x*48) + 16)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[51]*(float32*)kernel.shared[((threadIdx.x*48) + 16)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[52]*(float32*)kernel.shared[((threadIdx.x*48) + 16)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[38]*(float32*)kernel.shared[((threadIdx.x*48) + 14)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[39]*(float32*)kernel.shared[((threadIdx.x*48) + 14)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[40]*(float32*)kernel.shared[((threadIdx.x*48) + 14)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[41]*(float32*)kernel.shared[((threadIdx.x*48) + 14)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[42]*(float32*)kernel.shared[((threadIdx.x*48) + 14)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[43]*(float32*)kernel.shared[((threadIdx.x*48) + 14)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[44]*(float32*)kernel.shared[((threadIdx.x*48) + 14)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[47]*(float32*)kernel.shared[((threadIdx.x*48) + 17)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[48]*(float32*)kernel.shared[((threadIdx.x*48) + 17)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[49]*(float32*)kernel.shared[((threadIdx.x*48) + 17)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[50]*(float32*)kernel.shared[((threadIdx.x*48) + 17)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[51]*(float32*)kernel.shared[((threadIdx.x*48) + 17)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[52]*(float32*)kernel.shared[((threadIdx.x*48) + 17)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[53]*(float32*)kernel.shared[((threadIdx.x*48) + 17)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[54]*(float32*)kernel.shared[((threadIdx.x*48) + 18)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[55]*(float32*)kernel.shared[((threadIdx.x*48) + 18)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[56]*(float32*)kernel.shared[((threadIdx.x*48) + 18)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[57]*(float32*)kernel.shared[((threadIdx.x*48) + 18)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[58]*(float32*)kernel.shared[((threadIdx.x*48) + 18)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[59]*(float32*)kernel.shared[((threadIdx.x*48) + 18)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[60]*(float32*)kernel.shared[((threadIdx.x*48) + 18)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[63]*(float32*)kernel.shared[((threadIdx.x*48) + 21)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[64]*(float32*)kernel.shared[((threadIdx.x*48) + 21)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[65]*(float32*)kernel.shared[((threadIdx.x*48) + 21)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[66]*(float32*)kernel.shared[((threadIdx.x*48) + 21)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[67]*(float32*)kernel.shared[((threadIdx.x*48) + 21)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[68]*(float32*)kernel.shared[((threadIdx.x*48) + 21)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[69]*(float32*)kernel.shared[((threadIdx.x*48) + 21)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[55]*(float32*)kernel.shared[((threadIdx.x*48) + 19)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[56]*(float32*)kernel.shared[((threadIdx.x*48) + 19)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[57]*(float32*)kernel.shared[((threadIdx.x*48) + 19)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[58]*(float32*)kernel.shared[((threadIdx.x*48) + 19)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[59]*(float32*)kernel.shared[((threadIdx.x*48) + 19)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[60]*(float32*)kernel.shared[((threadIdx.x*48) + 19)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[61]*(float32*)kernel.shared[((threadIdx.x*48) + 19)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[64]*(float32*)kernel.shared[((threadIdx.x*48) + 22)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[65]*(float32*)kernel.shared[((threadIdx.x*48) + 22)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[66]*(float32*)kernel.shared[((threadIdx.x*48) + 22)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[67]*(float32*)kernel.shared[((threadIdx.x*48) + 22)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[68]*(float32*)kernel.shared[((threadIdx.x*48) + 22)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[69]*(float32*)kernel.shared[((threadIdx.x*48) + 22)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[70]*(float32*)kernel.shared[((threadIdx.x*48) + 22)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[56]*(float32*)kernel.shared[((threadIdx.x*48) + 20)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[57]*(float32*)kernel.shared[((threadIdx.x*48) + 20)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[58]*(float32*)kernel.shared[((threadIdx.x*48) + 20)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[59]*(float32*)kernel.shared[((threadIdx.x*48) + 20)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[60]*(float32*)kernel.shared[((threadIdx.x*48) + 20)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[61]*(float32*)kernel.shared[((threadIdx.x*48) + 20)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[62]*(float32*)kernel.shared[((threadIdx.x*48) + 20)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[65]*(float32*)kernel.shared[((threadIdx.x*48) + 23)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[66]*(float32*)kernel.shared[((threadIdx.x*48) + 23)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[67]*(float32*)kernel.shared[((threadIdx.x*48) + 23)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[68]*(float32*)kernel.shared[((threadIdx.x*48) + 23)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[69]*(float32*)kernel.shared[((threadIdx.x*48) + 23)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[70]*(float32*)kernel.shared[((threadIdx.x*48) + 23)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[71]*(float32*)kernel.shared[((threadIdx.x*48) + 23)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[72]*(float32*)kernel.shared[((threadIdx.x*48) + 24)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[73]*(float32*)kernel.shared[((threadIdx.x*48) + 24)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[74]*(float32*)kernel.shared[((threadIdx.x*48) + 24)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[75]*(float32*)kernel.shared[((threadIdx.x*48) + 24)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[76]*(float32*)kernel.shared[((threadIdx.x*48) + 24)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[77]*(float32*)kernel.shared[((threadIdx.x*48) + 24)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[78]*(float32*)kernel.shared[((threadIdx.x*48) + 24)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[81]*(float32*)kernel.shared[((threadIdx.x*48) + 27)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[82]*(float32*)kernel.shared[((threadIdx.x*48) + 27)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[83]*(float32*)kernel.shared[((threadIdx.x*48) + 27)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[84]*(float32*)kernel.shared[((threadIdx.x*48) + 27)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[85]*(float32*)kernel.shared[((threadIdx.x*48) + 27)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[86]*(float32*)kernel.shared[((threadIdx.x*48) + 27)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[87]*(float32*)kernel.shared[((threadIdx.x*48) + 27)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[73]*(float32*)kernel.shared[((threadIdx.x*48) + 25)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[74]*(float32*)kernel.shared[((threadIdx.x*48) + 25)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[75]*(float32*)kernel.shared[((threadIdx.x*48) + 25)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[76]*(float32*)kernel.shared[((threadIdx.x*48) + 25)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[77]*(float32*)kernel.shared[((threadIdx.x*48) + 25)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[78]*(float32*)kernel.shared[((threadIdx.x*48) + 25)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[79]*(float32*)kernel.shared[((threadIdx.x*48) + 25)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[82]*(float32*)kernel.shared[((threadIdx.x*48) + 28)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[83]*(float32*)kernel.shared[((threadIdx.x*48) + 28)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[84]*(float32*)kernel.shared[((threadIdx.x*48) + 28)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[85]*(float32*)kernel.shared[((threadIdx.x*48) + 28)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[86]*(float32*)kernel.shared[((threadIdx.x*48) + 28)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[87]*(float32*)kernel.shared[((threadIdx.x*48) + 28)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[88]*(float32*)kernel.shared[((threadIdx.x*48) + 28)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[74]*(float32*)kernel.shared[((threadIdx.x*48) + 26)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[75]*(float32*)kernel.shared[((threadIdx.x*48) + 26)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[76]*(float32*)kernel.shared[((threadIdx.x*48) + 26)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[77]*(float32*)kernel.shared[((threadIdx.x*48) + 26)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[78]*(float32*)kernel.shared[((threadIdx.x*48) + 26)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[79]*(float32*)kernel.shared[((threadIdx.x*48) + 26)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[80]*(float32*)kernel.shared[((threadIdx.x*48) + 26)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[83]*(float32*)kernel.shared[((threadIdx.x*48) + 29)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[84]*(float32*)kernel.shared[((threadIdx.x*48) + 29)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[85]*(float32*)kernel.shared[((threadIdx.x*48) + 29)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[86]*(float32*)kernel.shared[((threadIdx.x*48) + 29)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[87]*(float32*)kernel.shared[((threadIdx.x*48) + 29)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[88]*(float32*)kernel.shared[((threadIdx.x*48) + 29)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[89]*(float32*)kernel.shared[((threadIdx.x*48) + 29)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[90]*(float32*)kernel.shared[((threadIdx.x*48) + 30)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[91]*(float32*)kernel.shared[((threadIdx.x*48) + 30)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[92]*(float32*)kernel.shared[((threadIdx.x*48) + 30)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[93]*(float32*)kernel.shared[((threadIdx.x*48) + 30)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[94]*(float32*)kernel.shared[((threadIdx.x*48) + 30)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[95]*(float32*)kernel.shared[((threadIdx.x*48) + 30)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[96]*(float32*)kernel.shared[((threadIdx.x*48) + 30)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[99]*(float32*)kernel.shared[((threadIdx.x*48) + 33)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[100]*(float32*)kernel.shared[((threadIdx.x*48) + 33)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[101]*(float32*)kernel.shared[((threadIdx.x*48) + 33)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[102]*(float32*)kernel.shared[((threadIdx.x*48) + 33)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[103]*(float32*)kernel.shared[((threadIdx.x*48) + 33)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[104]*(float32*)kernel.shared[((threadIdx.x*48) + 33)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[105]*(float32*)kernel.shared[((threadIdx.x*48) + 33)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[91]*(float32*)kernel.shared[((threadIdx.x*48) + 31)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[92]*(float32*)kernel.shared[((threadIdx.x*48) + 31)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[93]*(float32*)kernel.shared[((threadIdx.x*48) + 31)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[94]*(float32*)kernel.shared[((threadIdx.x*48) + 31)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[95]*(float32*)kernel.shared[((threadIdx.x*48) + 31)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[96]*(float32*)kernel.shared[((threadIdx.x*48) + 31)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[97]*(float32*)kernel.shared[((threadIdx.x*48) + 31)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[100]*(float32*)kernel.shared[((threadIdx.x*48) + 34)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[101]*(float32*)kernel.shared[((threadIdx.x*48) + 34)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[102]*(float32*)kernel.shared[((threadIdx.x*48) + 34)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[103]*(float32*)kernel.shared[((threadIdx.x*48) + 34)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[104]*(float32*)kernel.shared[((threadIdx.x*48) + 34)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[105]*(float32*)kernel.shared[((threadIdx.x*48) + 34)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[106]*(float32*)kernel.shared[((threadIdx.x*48) + 34)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[92]*(float32*)kernel.shared[((threadIdx.x*48) + 32)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[93]*(float32*)kernel.shared[((threadIdx.x*48) + 32)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[94]*(float32*)kernel.shared[((threadIdx.x*48) + 32)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[95]*(float32*)kernel.shared[((threadIdx.x*48) + 32)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[96]*(float32*)kernel.shared[((threadIdx.x*48) + 32)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[97]*(float32*)kernel.shared[((threadIdx.x*48) + 32)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[98]*(float32*)kernel.shared[((threadIdx.x*48) + 32)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[101]*(float32*)kernel.shared[((threadIdx.x*48) + 35)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[102]*(float32*)kernel.shared[((threadIdx.x*48) + 35)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[103]*(float32*)kernel.shared[((threadIdx.x*48) + 35)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[104]*(float32*)kernel.shared[((threadIdx.x*48) + 35)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[105]*(float32*)kernel.shared[((threadIdx.x*48) + 35)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[106]*(float32*)kernel.shared[((threadIdx.x*48) + 35)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[107]*(float32*)kernel.shared[((threadIdx.x*48) + 35)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[108]*(float32*)kernel.shared[((threadIdx.x*48) + 36)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[109]*(float32*)kernel.shared[((threadIdx.x*48) + 36)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[110]*(float32*)kernel.shared[((threadIdx.x*48) + 36)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[111]*(float32*)kernel.shared[((threadIdx.x*48) + 36)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[112]*(float32*)kernel.shared[((threadIdx.x*48) + 36)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[113]*(float32*)kernel.shared[((threadIdx.x*48) + 36)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[114]*(float32*)kernel.shared[((threadIdx.x*48) + 36)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[117]*(float32*)kernel.shared[((threadIdx.x*48) + 39)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[118]*(float32*)kernel.shared[((threadIdx.x*48) + 39)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[119]*(float32*)kernel.shared[((threadIdx.x*48) + 39)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[120]*(float32*)kernel.shared[((threadIdx.x*48) + 39)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[121]*(float32*)kernel.shared[((threadIdx.x*48) + 39)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[122]*(float32*)kernel.shared[((threadIdx.x*48) + 39)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[123]*(float32*)kernel.shared[((threadIdx.x*48) + 39)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[109]*(float32*)kernel.shared[((threadIdx.x*48) + 37)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[110]*(float32*)kernel.shared[((threadIdx.x*48) + 37)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[111]*(float32*)kernel.shared[((threadIdx.x*48) + 37)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[112]*(float32*)kernel.shared[((threadIdx.x*48) + 37)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[113]*(float32*)kernel.shared[((threadIdx.x*48) + 37)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[114]*(float32*)kernel.shared[((threadIdx.x*48) + 37)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[115]*(float32*)kernel.shared[((threadIdx.x*48) + 37)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[118]*(float32*)kernel.shared[((threadIdx.x*48) + 40)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[119]*(float32*)kernel.shared[((threadIdx.x*48) + 40)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[120]*(float32*)kernel.shared[((threadIdx.x*48) + 40)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[121]*(float32*)kernel.shared[((threadIdx.x*48) + 40)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[122]*(float32*)kernel.shared[((threadIdx.x*48) + 40)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[123]*(float32*)kernel.shared[((threadIdx.x*48) + 40)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[124]*(float32*)kernel.shared[((threadIdx.x*48) + 40)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[110]*(float32*)kernel.shared[((threadIdx.x*48) + 38)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[111]*(float32*)kernel.shared[((threadIdx.x*48) + 38)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[112]*(float32*)kernel.shared[((threadIdx.x*48) + 38)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[113]*(float32*)kernel.shared[((threadIdx.x*48) + 38)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[114]*(float32*)kernel.shared[((threadIdx.x*48) + 38)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[115]*(float32*)kernel.shared[((threadIdx.x*48) + 38)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[116]*(float32*)kernel.shared[((threadIdx.x*48) + 38)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[119]*(float32*)kernel.shared[((threadIdx.x*48) + 41)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[120]*(float32*)kernel.shared[((threadIdx.x*48) + 41)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[121]*(float32*)kernel.shared[((threadIdx.x*48) + 41)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[122]*(float32*)kernel.shared[((threadIdx.x*48) + 41)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[123]*(float32*)kernel.shared[((threadIdx.x*48) + 41)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[124]*(float32*)kernel.shared[((threadIdx.x*48) + 41)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[125]*(float32*)kernel.shared[((threadIdx.x*48) + 41)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[126]*(float32*)kernel.shared[((threadIdx.x*48) + 42)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[127]*(float32*)kernel.shared[((threadIdx.x*48) + 42)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[128]*(float32*)kernel.shared[((threadIdx.x*48) + 42)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[129]*(float32*)kernel.shared[((threadIdx.x*48) + 42)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[130]*(float32*)kernel.shared[((threadIdx.x*48) + 42)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[131]*(float32*)kernel.shared[((threadIdx.x*48) + 42)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[132]*(float32*)kernel.shared[((threadIdx.x*48) + 42)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[135]*(float32*)kernel.shared[((threadIdx.x*48) + 45)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[136]*(float32*)kernel.shared[((threadIdx.x*48) + 45)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[137]*(float32*)kernel.shared[((threadIdx.x*48) + 45)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[138]*(float32*)kernel.shared[((threadIdx.x*48) + 45)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[139]*(float32*)kernel.shared[((threadIdx.x*48) + 45)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[140]*(float32*)kernel.shared[((threadIdx.x*48) + 45)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[141]*(float32*)kernel.shared[((threadIdx.x*48) + 45)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[127]*(float32*)kernel.shared[((threadIdx.x*48) + 43)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[128]*(float32*)kernel.shared[((threadIdx.x*48) + 43)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[129]*(float32*)kernel.shared[((threadIdx.x*48) + 43)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[130]*(float32*)kernel.shared[((threadIdx.x*48) + 43)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[131]*(float32*)kernel.shared[((threadIdx.x*48) + 43)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[132]*(float32*)kernel.shared[((threadIdx.x*48) + 43)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[133]*(float32*)kernel.shared[((threadIdx.x*48) + 43)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[136]*(float32*)kernel.shared[((threadIdx.x*48) + 46)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[137]*(float32*)kernel.shared[((threadIdx.x*48) + 46)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[138]*(float32*)kernel.shared[((threadIdx.x*48) + 46)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[139]*(float32*)kernel.shared[((threadIdx.x*48) + 46)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[140]*(float32*)kernel.shared[((threadIdx.x*48) + 46)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[141]*(float32*)kernel.shared[((threadIdx.x*48) + 46)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[142]*(float32*)kernel.shared[((threadIdx.x*48) + 46)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[128]*(float32*)kernel.shared[((threadIdx.x*48) + 44)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[129]*(float32*)kernel.shared[((threadIdx.x*48) + 44)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[130]*(float32*)kernel.shared[((threadIdx.x*48) + 44)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[131]*(float32*)kernel.shared[((threadIdx.x*48) + 44)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[132]*(float32*)kernel.shared[((threadIdx.x*48) + 44)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[133]*(float32*)kernel.shared[((threadIdx.x*48) + 44)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[134]*(float32*)kernel.shared[((threadIdx.x*48) + 44)]))
            compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[137]*(float32*)kernel.shared[((threadIdx.x*48) + 47)]))
            compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[138]*(float32*)kernel.shared[((threadIdx.x*48) + 47)]))
            compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[139]*(float32*)kernel.shared[((threadIdx.x*48) + 47)]))
            compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[140]*(float32*)kernel.shared[((threadIdx.x*48) + 47)]))
            compute_3[4] = ((float32*)compute_3[4] + ((float32*)pad_temp.shared[141]*(float32*)kernel.shared[((threadIdx.x*48) + 47)]))
            compute_3[5] = ((float32*)compute_3[5] + ((float32*)pad_temp.shared[142]*(float32*)kernel.shared[((threadIdx.x*48) + 47)]))
            compute_3[6] = ((float32*)compute_3[6] + ((float32*)pad_temp.shared[143]*(float32*)kernel.shared[((threadIdx.x*48) + 47)]))
          }
        }
        compute_2[(((floordiv(blockIdx.x, 7)*3136) + (threadIdx.x*49)) + floormod(blockIdx.x, 7))] = max(((float32*)compute_3[0] + (float32*)bias_2[((floordiv(blockIdx.x, 7)*64) + threadIdx.x)]), 0f32)
        compute_2[((((floordiv(blockIdx.x, 7)*3136) + (threadIdx.x*49)) + floormod(blockIdx.x, 7)) + 7)] = max(((float32*)compute_3[1] + (float32*)bias_2[((floordiv(blockIdx.x, 7)*64) + threadIdx.x)]), 0f32)
        compute_2[((((floordiv(blockIdx.x, 7)*3136) + (threadIdx.x*49)) + floormod(blockIdx.x, 7)) + 14)] = max(((float32*)compute_3[2] + (float32*)bias_2[((floordiv(blockIdx.x, 7)*64) + threadIdx.x)]), 0f32)
        compute_2[((((floordiv(blockIdx.x, 7)*3136) + (threadIdx.x*49)) + floormod(blockIdx.x, 7)) + 21)] = max(((float32*)compute_3[3] + (float32*)bias_2[((floordiv(blockIdx.x, 7)*64) + threadIdx.x)]), 0f32)
        compute_2[((((floordiv(blockIdx.x, 7)*3136) + (threadIdx.x*49)) + floormod(blockIdx.x, 7)) + 28)] = max(((float32*)compute_3[4] + (float32*)bias_2[((floordiv(blockIdx.x, 7)*64) + threadIdx.x)]), 0f32)
        compute_2[((((floordiv(blockIdx.x, 7)*3136) + (threadIdx.x*49)) + floormod(blockIdx.x, 7)) + 35)] = max(((float32*)compute_3[5] + (float32*)bias_2[((floordiv(blockIdx.x, 7)*64) + threadIdx.x)]), 0f32)
        compute_2[((((floordiv(blockIdx.x, 7)*3136) + (threadIdx.x*49)) + floormod(blockIdx.x, 7)) + 42)] = max(((float32*)compute_3[6] + (float32*)bias_2[((floordiv(blockIdx.x, 7)*64) + threadIdx.x)]), 0f32)
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.gpu()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.asnumpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.322 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.


.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    compute_nn, compute_ff, compute_yy, compute_xx, compute_rc, compute_ry, compute_rx = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    compute_nn_o_i, compute_nn_i = s[compute].split(compute_nn, factor=1)
    compute_nn_o_o_i, compute_nn_o_i = s[compute].split(compute_nn_o_i, factor=1)
    compute_nn_o_o_o_i, compute_nn_o_o_i = s[compute].split(compute_nn_o_o_i, factor=1)
    compute_nn_o_o_o_o, compute_nn_o_o_o_i = s[compute].split(compute_nn_o_o_o_i, factor=1)
    compute_ff_o_i, compute_ff_i = s[compute].split(compute_ff, factor=1)
    compute_ff_o_o_i, compute_ff_o_i = s[compute].split(compute_ff_o_i, factor=1)
    compute_ff_o_o_o_i, compute_ff_o_o_i = s[compute].split(compute_ff_o_o_i, factor=64)
    compute_ff_o_o_o_o, compute_ff_o_o_o_i = s[compute].split(compute_ff_o_o_o_i, factor=1)
    compute_yy_o_i, compute_yy_i = s[compute].split(compute_yy, factor=1)
    compute_yy_o_o_i, compute_yy_o_i = s[compute].split(compute_yy_o_i, factor=1)
    compute_yy_o_o_o_i, compute_yy_o_o_i = s[compute].split(compute_yy_o_o_i, factor=1)
    compute_yy_o_o_o_o, compute_yy_o_o_o_i = s[compute].split(compute_yy_o_o_o_i, factor=7)
    compute_xx_o_i, compute_xx_i = s[compute].split(compute_xx, factor=1)
    compute_xx_o_o_i, compute_xx_o_i = s[compute].split(compute_xx_o_i, factor=1)
    compute_xx_o_o_o_i, compute_xx_o_o_i = s[compute].split(compute_xx_o_o_i, factor=1)
    compute_xx_o_o_o_o, compute_xx_o_o_o_i = s[compute].split(compute_xx_o_o_o_i, factor=1)
    compute_rc_o_i, compute_rc_i = s[compute].split(compute_rc, factor=2)
    compute_rc_o_o, compute_rc_o_i = s[compute].split(compute_rc_o_i, factor=8)
    compute_ry_o_i, compute_ry_i = s[compute].split(compute_ry, factor=1)
    compute_ry_o_o, compute_ry_o_i = s[compute].split(compute_ry_o_i, factor=3)
    compute_rx_o_i, compute_rx_i = s[compute].split(compute_rx, factor=1)
    compute_rx_o_o, compute_rx_o_i = s[compute].split(compute_rx_o_i, factor=1)
    s[compute].reorder(compute_nn_o_o_o_o, compute_ff_o_o_o_o, compute_yy_o_o_o_o, compute_xx_o_o_o_o, compute_nn_o_o_o_i, compute_ff_o_o_o_i, compute_yy_o_o_o_i, compute_xx_o_o_o_i, compute_nn_o_o_i, compute_ff_o_o_i, compute_yy_o_o_i, compute_xx_o_o_i, compute_rc_o_o, compute_ry_o_o, compute_rx_o_o, compute_rc_o_i, compute_ry_o_i, compute_rx_o_i, compute_nn_o_i, compute_ff_o_i, compute_yy_o_i, compute_xx_o_i, compute_rc_i, compute_ry_i, compute_rx_i, compute_nn_i, compute_ff_i, compute_yy_i, compute_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=64)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=7)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[compute].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [compute])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[compute], compute_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [compute])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[compute], compute_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=64)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=64)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[compute].pragma(compute_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[compute].pragma(compute_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float compute1[7];
      __shared__ float pad_temp_shared[144];
      __shared__ float kernel_shared[3072];
      compute1[(0)] = 0.000000e+00f;
      compute1[(1)] = 0.000000e+00f;
      compute1[(2)] = 0.000000e+00f;
      compute1[(3)] = 0.000000e+00f;
      compute1[(4)] = 0.000000e+00f;
      compute1[(5)] = 0.000000e+00f;
      compute1[(6)] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 32; ++rc_outer_outer) {
        for (int rx_outer_outer = 0; rx_outer_outer < 3; ++rx_outer_outer) {
          __syncthreads();
          pad_temp_shared[(((int)threadIdx.x))] = (((((1 <= (((int)threadIdx.x) % 9)) && ((((int)threadIdx.x) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)blockIdx.x) % 7)))) && ((rx_outer_outer + (((int)blockIdx.x) % 7)) < 8)) ? data[(((((((rc_outer_outer * 784) + ((((int)threadIdx.x) / 9) * 49)) + ((((int)threadIdx.x) % 9) * 7)) + rx_outer_outer) + (((int)blockIdx.x) % 7)) - 8))] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) + 64))] = (((((1 <= ((((int)threadIdx.x) + 1) % 9)) && (((((int)threadIdx.x) + 1) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)blockIdx.x) % 7)))) && ((rx_outer_outer + (((int)blockIdx.x) % 7)) < 8)) ? data[(((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 64) / 9) * 49)) + (((((int)threadIdx.x) + 1) % 9) * 7)) + rx_outer_outer) + (((int)blockIdx.x) % 7)) - 8))] : 0.000000e+00f);
          if (((int)threadIdx.x) < 16) {
            pad_temp_shared[((((int)threadIdx.x) + 128))] = (((((1 <= ((((int)threadIdx.x) + 2) % 9)) && (((((int)threadIdx.x) + 2) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)blockIdx.x) % 7)))) && ((rx_outer_outer + (((int)blockIdx.x) % 7)) < 8)) ? data[(((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 128) / 9) * 49)) + (((((int)threadIdx.x) + 2) % 9) * 7)) + rx_outer_outer) + (((int)blockIdx.x) % 7)) - 8))] : 0.000000e+00f);
          }
          kernel_shared[(((int)threadIdx.x))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 64))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 64) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 128))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 128) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 192))] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer) + 18432))];
          kernel_shared[((((int)threadIdx.x) + 256))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 256) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 320))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 320) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 384))] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer) + 36864))];
          kernel_shared[((((int)threadIdx.x) + 448))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 448) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 512))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 512) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 576))] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer) + 55296))];
          kernel_shared[((((int)threadIdx.x) + 640))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 640) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 704))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 704) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 768))] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer) + 73728))];
          kernel_shared[((((int)threadIdx.x) + 832))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 832) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 896))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 896) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 960))] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer) + 92160))];
          kernel_shared[((((int)threadIdx.x) + 1024))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1024) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 1088))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1088) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 1152))] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer) + 110592))];
          kernel_shared[((((int)threadIdx.x) + 1216))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1216) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 1280))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1280) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 1344))] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer) + 129024))];
          kernel_shared[((((int)threadIdx.x) + 1408))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1408) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 1472))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1472) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 1536))] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer) + 147456))];
          kernel_shared[((((int)threadIdx.x) + 1600))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1600) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 1664))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1664) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 1728))] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer) + 165888))];
          kernel_shared[((((int)threadIdx.x) + 1792))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1792) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 1856))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1856) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 1920))] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer) + 184320))];
          kernel_shared[((((int)threadIdx.x) + 1984))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1984) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 2048))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2048) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 2112))] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer) + 202752))];
          kernel_shared[((((int)threadIdx.x) + 2176))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2176) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 2240))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2240) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 2304))] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer) + 221184))];
          kernel_shared[((((int)threadIdx.x) + 2368))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2368) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 2432))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2432) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 2496))] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer) + 239616))];
          kernel_shared[((((int)threadIdx.x) + 2560))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2560) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 2624))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2624) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 2688))] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer) + 258048))];
          kernel_shared[((((int)threadIdx.x) + 2752))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2752) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 2816))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2816) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 2880))] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) % 48) * 3)) + rx_outer_outer) + 276480))];
          kernel_shared[((((int)threadIdx.x) + 2944))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2944) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 16) % 48) * 3)) + rx_outer_outer))];
          kernel_shared[((((int)threadIdx.x) + 3008))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 3008) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) + 32) % 48) * 3)) + rx_outer_outer))];
          __syncthreads();
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(0)] * kernel_shared[((((int)threadIdx.x) * 48))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(1)] * kernel_shared[((((int)threadIdx.x) * 48))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(2)] * kernel_shared[((((int)threadIdx.x) * 48))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(3)] * kernel_shared[((((int)threadIdx.x) * 48))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(4)] * kernel_shared[((((int)threadIdx.x) * 48))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(5)] * kernel_shared[((((int)threadIdx.x) * 48))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(6)] * kernel_shared[((((int)threadIdx.x) * 48))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(9)] * kernel_shared[(((((int)threadIdx.x) * 48) + 3))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(10)] * kernel_shared[(((((int)threadIdx.x) * 48) + 3))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(11)] * kernel_shared[(((((int)threadIdx.x) * 48) + 3))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(12)] * kernel_shared[(((((int)threadIdx.x) * 48) + 3))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(13)] * kernel_shared[(((((int)threadIdx.x) * 48) + 3))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(14)] * kernel_shared[(((((int)threadIdx.x) * 48) + 3))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(15)] * kernel_shared[(((((int)threadIdx.x) * 48) + 3))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(1)] * kernel_shared[(((((int)threadIdx.x) * 48) + 1))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(2)] * kernel_shared[(((((int)threadIdx.x) * 48) + 1))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(3)] * kernel_shared[(((((int)threadIdx.x) * 48) + 1))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(4)] * kernel_shared[(((((int)threadIdx.x) * 48) + 1))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(5)] * kernel_shared[(((((int)threadIdx.x) * 48) + 1))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(6)] * kernel_shared[(((((int)threadIdx.x) * 48) + 1))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(7)] * kernel_shared[(((((int)threadIdx.x) * 48) + 1))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(10)] * kernel_shared[(((((int)threadIdx.x) * 48) + 4))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(11)] * kernel_shared[(((((int)threadIdx.x) * 48) + 4))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(12)] * kernel_shared[(((((int)threadIdx.x) * 48) + 4))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(13)] * kernel_shared[(((((int)threadIdx.x) * 48) + 4))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(14)] * kernel_shared[(((((int)threadIdx.x) * 48) + 4))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(15)] * kernel_shared[(((((int)threadIdx.x) * 48) + 4))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(16)] * kernel_shared[(((((int)threadIdx.x) * 48) + 4))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(2)] * kernel_shared[(((((int)threadIdx.x) * 48) + 2))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(3)] * kernel_shared[(((((int)threadIdx.x) * 48) + 2))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(4)] * kernel_shared[(((((int)threadIdx.x) * 48) + 2))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(5)] * kernel_shared[(((((int)threadIdx.x) * 48) + 2))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(6)] * kernel_shared[(((((int)threadIdx.x) * 48) + 2))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(7)] * kernel_shared[(((((int)threadIdx.x) * 48) + 2))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(8)] * kernel_shared[(((((int)threadIdx.x) * 48) + 2))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(11)] * kernel_shared[(((((int)threadIdx.x) * 48) + 5))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(12)] * kernel_shared[(((((int)threadIdx.x) * 48) + 5))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(13)] * kernel_shared[(((((int)threadIdx.x) * 48) + 5))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(14)] * kernel_shared[(((((int)threadIdx.x) * 48) + 5))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(15)] * kernel_shared[(((((int)threadIdx.x) * 48) + 5))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(16)] * kernel_shared[(((((int)threadIdx.x) * 48) + 5))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(17)] * kernel_shared[(((((int)threadIdx.x) * 48) + 5))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(18)] * kernel_shared[(((((int)threadIdx.x) * 48) + 6))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(19)] * kernel_shared[(((((int)threadIdx.x) * 48) + 6))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(20)] * kernel_shared[(((((int)threadIdx.x) * 48) + 6))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(21)] * kernel_shared[(((((int)threadIdx.x) * 48) + 6))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(22)] * kernel_shared[(((((int)threadIdx.x) * 48) + 6))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(23)] * kernel_shared[(((((int)threadIdx.x) * 48) + 6))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(24)] * kernel_shared[(((((int)threadIdx.x) * 48) + 6))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(27)] * kernel_shared[(((((int)threadIdx.x) * 48) + 9))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(28)] * kernel_shared[(((((int)threadIdx.x) * 48) + 9))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(29)] * kernel_shared[(((((int)threadIdx.x) * 48) + 9))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(30)] * kernel_shared[(((((int)threadIdx.x) * 48) + 9))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(31)] * kernel_shared[(((((int)threadIdx.x) * 48) + 9))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(32)] * kernel_shared[(((((int)threadIdx.x) * 48) + 9))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(33)] * kernel_shared[(((((int)threadIdx.x) * 48) + 9))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(19)] * kernel_shared[(((((int)threadIdx.x) * 48) + 7))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(20)] * kernel_shared[(((((int)threadIdx.x) * 48) + 7))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(21)] * kernel_shared[(((((int)threadIdx.x) * 48) + 7))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(22)] * kernel_shared[(((((int)threadIdx.x) * 48) + 7))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(23)] * kernel_shared[(((((int)threadIdx.x) * 48) + 7))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(24)] * kernel_shared[(((((int)threadIdx.x) * 48) + 7))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(25)] * kernel_shared[(((((int)threadIdx.x) * 48) + 7))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(28)] * kernel_shared[(((((int)threadIdx.x) * 48) + 10))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(29)] * kernel_shared[(((((int)threadIdx.x) * 48) + 10))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(30)] * kernel_shared[(((((int)threadIdx.x) * 48) + 10))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(31)] * kernel_shared[(((((int)threadIdx.x) * 48) + 10))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(32)] * kernel_shared[(((((int)threadIdx.x) * 48) + 10))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(33)] * kernel_shared[(((((int)threadIdx.x) * 48) + 10))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(34)] * kernel_shared[(((((int)threadIdx.x) * 48) + 10))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(20)] * kernel_shared[(((((int)threadIdx.x) * 48) + 8))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(21)] * kernel_shared[(((((int)threadIdx.x) * 48) + 8))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(22)] * kernel_shared[(((((int)threadIdx.x) * 48) + 8))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(23)] * kernel_shared[(((((int)threadIdx.x) * 48) + 8))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(24)] * kernel_shared[(((((int)threadIdx.x) * 48) + 8))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(25)] * kernel_shared[(((((int)threadIdx.x) * 48) + 8))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(26)] * kernel_shared[(((((int)threadIdx.x) * 48) + 8))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(29)] * kernel_shared[(((((int)threadIdx.x) * 48) + 11))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(30)] * kernel_shared[(((((int)threadIdx.x) * 48) + 11))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(31)] * kernel_shared[(((((int)threadIdx.x) * 48) + 11))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(32)] * kernel_shared[(((((int)threadIdx.x) * 48) + 11))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(33)] * kernel_shared[(((((int)threadIdx.x) * 48) + 11))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(34)] * kernel_shared[(((((int)threadIdx.x) * 48) + 11))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(35)] * kernel_shared[(((((int)threadIdx.x) * 48) + 11))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(36)] * kernel_shared[(((((int)threadIdx.x) * 48) + 12))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(37)] * kernel_shared[(((((int)threadIdx.x) * 48) + 12))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(38)] * kernel_shared[(((((int)threadIdx.x) * 48) + 12))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(39)] * kernel_shared[(((((int)threadIdx.x) * 48) + 12))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(40)] * kernel_shared[(((((int)threadIdx.x) * 48) + 12))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(41)] * kernel_shared[(((((int)threadIdx.x) * 48) + 12))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(42)] * kernel_shared[(((((int)threadIdx.x) * 48) + 12))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(45)] * kernel_shared[(((((int)threadIdx.x) * 48) + 15))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(46)] * kernel_shared[(((((int)threadIdx.x) * 48) + 15))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(47)] * kernel_shared[(((((int)threadIdx.x) * 48) + 15))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(48)] * kernel_shared[(((((int)threadIdx.x) * 48) + 15))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(49)] * kernel_shared[(((((int)threadIdx.x) * 48) + 15))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(50)] * kernel_shared[(((((int)threadIdx.x) * 48) + 15))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(51)] * kernel_shared[(((((int)threadIdx.x) * 48) + 15))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(37)] * kernel_shared[(((((int)threadIdx.x) * 48) + 13))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(38)] * kernel_shared[(((((int)threadIdx.x) * 48) + 13))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(39)] * kernel_shared[(((((int)threadIdx.x) * 48) + 13))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(40)] * kernel_shared[(((((int)threadIdx.x) * 48) + 13))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(41)] * kernel_shared[(((((int)threadIdx.x) * 48) + 13))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(42)] * kernel_shared[(((((int)threadIdx.x) * 48) + 13))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(43)] * kernel_shared[(((((int)threadIdx.x) * 48) + 13))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(46)] * kernel_shared[(((((int)threadIdx.x) * 48) + 16))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(47)] * kernel_shared[(((((int)threadIdx.x) * 48) + 16))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(48)] * kernel_shared[(((((int)threadIdx.x) * 48) + 16))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(49)] * kernel_shared[(((((int)threadIdx.x) * 48) + 16))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(50)] * kernel_shared[(((((int)threadIdx.x) * 48) + 16))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(51)] * kernel_shared[(((((int)threadIdx.x) * 48) + 16))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(52)] * kernel_shared[(((((int)threadIdx.x) * 48) + 16))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(38)] * kernel_shared[(((((int)threadIdx.x) * 48) + 14))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(39)] * kernel_shared[(((((int)threadIdx.x) * 48) + 14))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(40)] * kernel_shared[(((((int)threadIdx.x) * 48) + 14))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(41)] * kernel_shared[(((((int)threadIdx.x) * 48) + 14))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(42)] * kernel_shared[(((((int)threadIdx.x) * 48) + 14))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(43)] * kernel_shared[(((((int)threadIdx.x) * 48) + 14))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(44)] * kernel_shared[(((((int)threadIdx.x) * 48) + 14))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(47)] * kernel_shared[(((((int)threadIdx.x) * 48) + 17))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(48)] * kernel_shared[(((((int)threadIdx.x) * 48) + 17))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(49)] * kernel_shared[(((((int)threadIdx.x) * 48) + 17))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(50)] * kernel_shared[(((((int)threadIdx.x) * 48) + 17))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(51)] * kernel_shared[(((((int)threadIdx.x) * 48) + 17))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(52)] * kernel_shared[(((((int)threadIdx.x) * 48) + 17))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(53)] * kernel_shared[(((((int)threadIdx.x) * 48) + 17))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(54)] * kernel_shared[(((((int)threadIdx.x) * 48) + 18))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(55)] * kernel_shared[(((((int)threadIdx.x) * 48) + 18))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(56)] * kernel_shared[(((((int)threadIdx.x) * 48) + 18))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(57)] * kernel_shared[(((((int)threadIdx.x) * 48) + 18))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(58)] * kernel_shared[(((((int)threadIdx.x) * 48) + 18))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(59)] * kernel_shared[(((((int)threadIdx.x) * 48) + 18))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(60)] * kernel_shared[(((((int)threadIdx.x) * 48) + 18))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(63)] * kernel_shared[(((((int)threadIdx.x) * 48) + 21))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(64)] * kernel_shared[(((((int)threadIdx.x) * 48) + 21))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(65)] * kernel_shared[(((((int)threadIdx.x) * 48) + 21))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(66)] * kernel_shared[(((((int)threadIdx.x) * 48) + 21))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(67)] * kernel_shared[(((((int)threadIdx.x) * 48) + 21))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(68)] * kernel_shared[(((((int)threadIdx.x) * 48) + 21))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(69)] * kernel_shared[(((((int)threadIdx.x) * 48) + 21))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(55)] * kernel_shared[(((((int)threadIdx.x) * 48) + 19))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(56)] * kernel_shared[(((((int)threadIdx.x) * 48) + 19))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(57)] * kernel_shared[(((((int)threadIdx.x) * 48) + 19))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(58)] * kernel_shared[(((((int)threadIdx.x) * 48) + 19))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(59)] * kernel_shared[(((((int)threadIdx.x) * 48) + 19))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(60)] * kernel_shared[(((((int)threadIdx.x) * 48) + 19))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(61)] * kernel_shared[(((((int)threadIdx.x) * 48) + 19))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(64)] * kernel_shared[(((((int)threadIdx.x) * 48) + 22))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(65)] * kernel_shared[(((((int)threadIdx.x) * 48) + 22))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(66)] * kernel_shared[(((((int)threadIdx.x) * 48) + 22))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(67)] * kernel_shared[(((((int)threadIdx.x) * 48) + 22))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(68)] * kernel_shared[(((((int)threadIdx.x) * 48) + 22))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(69)] * kernel_shared[(((((int)threadIdx.x) * 48) + 22))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(70)] * kernel_shared[(((((int)threadIdx.x) * 48) + 22))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(56)] * kernel_shared[(((((int)threadIdx.x) * 48) + 20))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(57)] * kernel_shared[(((((int)threadIdx.x) * 48) + 20))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(58)] * kernel_shared[(((((int)threadIdx.x) * 48) + 20))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(59)] * kernel_shared[(((((int)threadIdx.x) * 48) + 20))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(60)] * kernel_shared[(((((int)threadIdx.x) * 48) + 20))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(61)] * kernel_shared[(((((int)threadIdx.x) * 48) + 20))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(62)] * kernel_shared[(((((int)threadIdx.x) * 48) + 20))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(65)] * kernel_shared[(((((int)threadIdx.x) * 48) + 23))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(66)] * kernel_shared[(((((int)threadIdx.x) * 48) + 23))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(67)] * kernel_shared[(((((int)threadIdx.x) * 48) + 23))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(68)] * kernel_shared[(((((int)threadIdx.x) * 48) + 23))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(69)] * kernel_shared[(((((int)threadIdx.x) * 48) + 23))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(70)] * kernel_shared[(((((int)threadIdx.x) * 48) + 23))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(71)] * kernel_shared[(((((int)threadIdx.x) * 48) + 23))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(72)] * kernel_shared[(((((int)threadIdx.x) * 48) + 24))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(73)] * kernel_shared[(((((int)threadIdx.x) * 48) + 24))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(74)] * kernel_shared[(((((int)threadIdx.x) * 48) + 24))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(75)] * kernel_shared[(((((int)threadIdx.x) * 48) + 24))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(76)] * kernel_shared[(((((int)threadIdx.x) * 48) + 24))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(77)] * kernel_shared[(((((int)threadIdx.x) * 48) + 24))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(78)] * kernel_shared[(((((int)threadIdx.x) * 48) + 24))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(81)] * kernel_shared[(((((int)threadIdx.x) * 48) + 27))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(82)] * kernel_shared[(((((int)threadIdx.x) * 48) + 27))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(83)] * kernel_shared[(((((int)threadIdx.x) * 48) + 27))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(84)] * kernel_shared[(((((int)threadIdx.x) * 48) + 27))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(85)] * kernel_shared[(((((int)threadIdx.x) * 48) + 27))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(86)] * kernel_shared[(((((int)threadIdx.x) * 48) + 27))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(87)] * kernel_shared[(((((int)threadIdx.x) * 48) + 27))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(73)] * kernel_shared[(((((int)threadIdx.x) * 48) + 25))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(74)] * kernel_shared[(((((int)threadIdx.x) * 48) + 25))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(75)] * kernel_shared[(((((int)threadIdx.x) * 48) + 25))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(76)] * kernel_shared[(((((int)threadIdx.x) * 48) + 25))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(77)] * kernel_shared[(((((int)threadIdx.x) * 48) + 25))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(78)] * kernel_shared[(((((int)threadIdx.x) * 48) + 25))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(79)] * kernel_shared[(((((int)threadIdx.x) * 48) + 25))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(82)] * kernel_shared[(((((int)threadIdx.x) * 48) + 28))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(83)] * kernel_shared[(((((int)threadIdx.x) * 48) + 28))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(84)] * kernel_shared[(((((int)threadIdx.x) * 48) + 28))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(85)] * kernel_shared[(((((int)threadIdx.x) * 48) + 28))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(86)] * kernel_shared[(((((int)threadIdx.x) * 48) + 28))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(87)] * kernel_shared[(((((int)threadIdx.x) * 48) + 28))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(88)] * kernel_shared[(((((int)threadIdx.x) * 48) + 28))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(74)] * kernel_shared[(((((int)threadIdx.x) * 48) + 26))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(75)] * kernel_shared[(((((int)threadIdx.x) * 48) + 26))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(76)] * kernel_shared[(((((int)threadIdx.x) * 48) + 26))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(77)] * kernel_shared[(((((int)threadIdx.x) * 48) + 26))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(78)] * kernel_shared[(((((int)threadIdx.x) * 48) + 26))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(79)] * kernel_shared[(((((int)threadIdx.x) * 48) + 26))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(80)] * kernel_shared[(((((int)threadIdx.x) * 48) + 26))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(83)] * kernel_shared[(((((int)threadIdx.x) * 48) + 29))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(84)] * kernel_shared[(((((int)threadIdx.x) * 48) + 29))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(85)] * kernel_shared[(((((int)threadIdx.x) * 48) + 29))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(86)] * kernel_shared[(((((int)threadIdx.x) * 48) + 29))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(87)] * kernel_shared[(((((int)threadIdx.x) * 48) + 29))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(88)] * kernel_shared[(((((int)threadIdx.x) * 48) + 29))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(89)] * kernel_shared[(((((int)threadIdx.x) * 48) + 29))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(90)] * kernel_shared[(((((int)threadIdx.x) * 48) + 30))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(91)] * kernel_shared[(((((int)threadIdx.x) * 48) + 30))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(92)] * kernel_shared[(((((int)threadIdx.x) * 48) + 30))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(93)] * kernel_shared[(((((int)threadIdx.x) * 48) + 30))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(94)] * kernel_shared[(((((int)threadIdx.x) * 48) + 30))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(95)] * kernel_shared[(((((int)threadIdx.x) * 48) + 30))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(96)] * kernel_shared[(((((int)threadIdx.x) * 48) + 30))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(99)] * kernel_shared[(((((int)threadIdx.x) * 48) + 33))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(100)] * kernel_shared[(((((int)threadIdx.x) * 48) + 33))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(101)] * kernel_shared[(((((int)threadIdx.x) * 48) + 33))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(102)] * kernel_shared[(((((int)threadIdx.x) * 48) + 33))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(103)] * kernel_shared[(((((int)threadIdx.x) * 48) + 33))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(104)] * kernel_shared[(((((int)threadIdx.x) * 48) + 33))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(105)] * kernel_shared[(((((int)threadIdx.x) * 48) + 33))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(91)] * kernel_shared[(((((int)threadIdx.x) * 48) + 31))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(92)] * kernel_shared[(((((int)threadIdx.x) * 48) + 31))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(93)] * kernel_shared[(((((int)threadIdx.x) * 48) + 31))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(94)] * kernel_shared[(((((int)threadIdx.x) * 48) + 31))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(95)] * kernel_shared[(((((int)threadIdx.x) * 48) + 31))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(96)] * kernel_shared[(((((int)threadIdx.x) * 48) + 31))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(97)] * kernel_shared[(((((int)threadIdx.x) * 48) + 31))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(100)] * kernel_shared[(((((int)threadIdx.x) * 48) + 34))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(101)] * kernel_shared[(((((int)threadIdx.x) * 48) + 34))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(102)] * kernel_shared[(((((int)threadIdx.x) * 48) + 34))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(103)] * kernel_shared[(((((int)threadIdx.x) * 48) + 34))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(104)] * kernel_shared[(((((int)threadIdx.x) * 48) + 34))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(105)] * kernel_shared[(((((int)threadIdx.x) * 48) + 34))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(106)] * kernel_shared[(((((int)threadIdx.x) * 48) + 34))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(92)] * kernel_shared[(((((int)threadIdx.x) * 48) + 32))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(93)] * kernel_shared[(((((int)threadIdx.x) * 48) + 32))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(94)] * kernel_shared[(((((int)threadIdx.x) * 48) + 32))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(95)] * kernel_shared[(((((int)threadIdx.x) * 48) + 32))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(96)] * kernel_shared[(((((int)threadIdx.x) * 48) + 32))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(97)] * kernel_shared[(((((int)threadIdx.x) * 48) + 32))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(98)] * kernel_shared[(((((int)threadIdx.x) * 48) + 32))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(101)] * kernel_shared[(((((int)threadIdx.x) * 48) + 35))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(102)] * kernel_shared[(((((int)threadIdx.x) * 48) + 35))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(103)] * kernel_shared[(((((int)threadIdx.x) * 48) + 35))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(104)] * kernel_shared[(((((int)threadIdx.x) * 48) + 35))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(105)] * kernel_shared[(((((int)threadIdx.x) * 48) + 35))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(106)] * kernel_shared[(((((int)threadIdx.x) * 48) + 35))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(107)] * kernel_shared[(((((int)threadIdx.x) * 48) + 35))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(108)] * kernel_shared[(((((int)threadIdx.x) * 48) + 36))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(109)] * kernel_shared[(((((int)threadIdx.x) * 48) + 36))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(110)] * kernel_shared[(((((int)threadIdx.x) * 48) + 36))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(111)] * kernel_shared[(((((int)threadIdx.x) * 48) + 36))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(112)] * kernel_shared[(((((int)threadIdx.x) * 48) + 36))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(113)] * kernel_shared[(((((int)threadIdx.x) * 48) + 36))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(114)] * kernel_shared[(((((int)threadIdx.x) * 48) + 36))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(117)] * kernel_shared[(((((int)threadIdx.x) * 48) + 39))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(118)] * kernel_shared[(((((int)threadIdx.x) * 48) + 39))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(119)] * kernel_shared[(((((int)threadIdx.x) * 48) + 39))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(120)] * kernel_shared[(((((int)threadIdx.x) * 48) + 39))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(121)] * kernel_shared[(((((int)threadIdx.x) * 48) + 39))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(122)] * kernel_shared[(((((int)threadIdx.x) * 48) + 39))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(123)] * kernel_shared[(((((int)threadIdx.x) * 48) + 39))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(109)] * kernel_shared[(((((int)threadIdx.x) * 48) + 37))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(110)] * kernel_shared[(((((int)threadIdx.x) * 48) + 37))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(111)] * kernel_shared[(((((int)threadIdx.x) * 48) + 37))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(112)] * kernel_shared[(((((int)threadIdx.x) * 48) + 37))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(113)] * kernel_shared[(((((int)threadIdx.x) * 48) + 37))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(114)] * kernel_shared[(((((int)threadIdx.x) * 48) + 37))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(115)] * kernel_shared[(((((int)threadIdx.x) * 48) + 37))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(118)] * kernel_shared[(((((int)threadIdx.x) * 48) + 40))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(119)] * kernel_shared[(((((int)threadIdx.x) * 48) + 40))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(120)] * kernel_shared[(((((int)threadIdx.x) * 48) + 40))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(121)] * kernel_shared[(((((int)threadIdx.x) * 48) + 40))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(122)] * kernel_shared[(((((int)threadIdx.x) * 48) + 40))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(123)] * kernel_shared[(((((int)threadIdx.x) * 48) + 40))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(124)] * kernel_shared[(((((int)threadIdx.x) * 48) + 40))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(110)] * kernel_shared[(((((int)threadIdx.x) * 48) + 38))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(111)] * kernel_shared[(((((int)threadIdx.x) * 48) + 38))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(112)] * kernel_shared[(((((int)threadIdx.x) * 48) + 38))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(113)] * kernel_shared[(((((int)threadIdx.x) * 48) + 38))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(114)] * kernel_shared[(((((int)threadIdx.x) * 48) + 38))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(115)] * kernel_shared[(((((int)threadIdx.x) * 48) + 38))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(116)] * kernel_shared[(((((int)threadIdx.x) * 48) + 38))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(119)] * kernel_shared[(((((int)threadIdx.x) * 48) + 41))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(120)] * kernel_shared[(((((int)threadIdx.x) * 48) + 41))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(121)] * kernel_shared[(((((int)threadIdx.x) * 48) + 41))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(122)] * kernel_shared[(((((int)threadIdx.x) * 48) + 41))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(123)] * kernel_shared[(((((int)threadIdx.x) * 48) + 41))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(124)] * kernel_shared[(((((int)threadIdx.x) * 48) + 41))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(125)] * kernel_shared[(((((int)threadIdx.x) * 48) + 41))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(126)] * kernel_shared[(((((int)threadIdx.x) * 48) + 42))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(127)] * kernel_shared[(((((int)threadIdx.x) * 48) + 42))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(128)] * kernel_shared[(((((int)threadIdx.x) * 48) + 42))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(129)] * kernel_shared[(((((int)threadIdx.x) * 48) + 42))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(130)] * kernel_shared[(((((int)threadIdx.x) * 48) + 42))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(131)] * kernel_shared[(((((int)threadIdx.x) * 48) + 42))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(132)] * kernel_shared[(((((int)threadIdx.x) * 48) + 42))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(135)] * kernel_shared[(((((int)threadIdx.x) * 48) + 45))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(136)] * kernel_shared[(((((int)threadIdx.x) * 48) + 45))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(137)] * kernel_shared[(((((int)threadIdx.x) * 48) + 45))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(138)] * kernel_shared[(((((int)threadIdx.x) * 48) + 45))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(139)] * kernel_shared[(((((int)threadIdx.x) * 48) + 45))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(140)] * kernel_shared[(((((int)threadIdx.x) * 48) + 45))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(141)] * kernel_shared[(((((int)threadIdx.x) * 48) + 45))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(127)] * kernel_shared[(((((int)threadIdx.x) * 48) + 43))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(128)] * kernel_shared[(((((int)threadIdx.x) * 48) + 43))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(129)] * kernel_shared[(((((int)threadIdx.x) * 48) + 43))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(130)] * kernel_shared[(((((int)threadIdx.x) * 48) + 43))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(131)] * kernel_shared[(((((int)threadIdx.x) * 48) + 43))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(132)] * kernel_shared[(((((int)threadIdx.x) * 48) + 43))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(133)] * kernel_shared[(((((int)threadIdx.x) * 48) + 43))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(136)] * kernel_shared[(((((int)threadIdx.x) * 48) + 46))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(137)] * kernel_shared[(((((int)threadIdx.x) * 48) + 46))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(138)] * kernel_shared[(((((int)threadIdx.x) * 48) + 46))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(139)] * kernel_shared[(((((int)threadIdx.x) * 48) + 46))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(140)] * kernel_shared[(((((int)threadIdx.x) * 48) + 46))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(141)] * kernel_shared[(((((int)threadIdx.x) * 48) + 46))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(142)] * kernel_shared[(((((int)threadIdx.x) * 48) + 46))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(128)] * kernel_shared[(((((int)threadIdx.x) * 48) + 44))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(129)] * kernel_shared[(((((int)threadIdx.x) * 48) + 44))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(130)] * kernel_shared[(((((int)threadIdx.x) * 48) + 44))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(131)] * kernel_shared[(((((int)threadIdx.x) * 48) + 44))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(132)] * kernel_shared[(((((int)threadIdx.x) * 48) + 44))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(133)] * kernel_shared[(((((int)threadIdx.x) * 48) + 44))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(134)] * kernel_shared[(((((int)threadIdx.x) * 48) + 44))]));
          compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(137)] * kernel_shared[(((((int)threadIdx.x) * 48) + 47))]));
          compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(138)] * kernel_shared[(((((int)threadIdx.x) * 48) + 47))]));
          compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(139)] * kernel_shared[(((((int)threadIdx.x) * 48) + 47))]));
          compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(140)] * kernel_shared[(((((int)threadIdx.x) * 48) + 47))]));
          compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(141)] * kernel_shared[(((((int)threadIdx.x) * 48) + 47))]));
          compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(142)] * kernel_shared[(((((int)threadIdx.x) * 48) + 47))]));
          compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(143)] * kernel_shared[(((((int)threadIdx.x) * 48) + 47))]));
        }
      }
      compute[(((((((int)blockIdx.x) / 7) * 3136) + (((int)threadIdx.x) * 49)) + (((int)blockIdx.x) % 7)))] = max((compute1[(0)] + bias[((((((int)blockIdx.x) / 7) * 64) + ((int)threadIdx.x)))]), 0.000000e+00f);
      compute[((((((((int)blockIdx.x) / 7) * 3136) + (((int)threadIdx.x) * 49)) + (((int)blockIdx.x) % 7)) + 7))] = max((compute1[(1)] + bias[((((((int)blockIdx.x) / 7) * 64) + ((int)threadIdx.x)))]), 0.000000e+00f);
      compute[((((((((int)blockIdx.x) / 7) * 3136) + (((int)threadIdx.x) * 49)) + (((int)blockIdx.x) % 7)) + 14))] = max((compute1[(2)] + bias[((((((int)blockIdx.x) / 7) * 64) + ((int)threadIdx.x)))]), 0.000000e+00f);
      compute[((((((((int)blockIdx.x) / 7) * 3136) + (((int)threadIdx.x) * 49)) + (((int)blockIdx.x) % 7)) + 21))] = max((compute1[(3)] + bias[((((((int)blockIdx.x) / 7) * 64) + ((int)threadIdx.x)))]), 0.000000e+00f);
      compute[((((((((int)blockIdx.x) / 7) * 3136) + (((int)threadIdx.x) * 49)) + (((int)blockIdx.x) % 7)) + 28))] = max((compute1[(4)] + bias[((((((int)blockIdx.x) / 7) * 64) + ((int)threadIdx.x)))]), 0.000000e+00f);
      compute[((((((((int)blockIdx.x) / 7) * 3136) + (((int)threadIdx.x) * 49)) + (((int)blockIdx.x) % 7)) + 35))] = max((compute1[(5)] + bias[((((((int)blockIdx.x) / 7) * 64) + ((int)threadIdx.x)))]), 0.000000e+00f);
      compute[((((((((int)blockIdx.x) / 7) * 3136) + (((int)threadIdx.x) * 49)) + (((int)blockIdx.x) % 7)) + 42))] = max((compute1[(6)] + bias[((((((int)blockIdx.x) / 7) * 64) + ((int)threadIdx.x)))]), 0.000000e+00f);
    }





A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Resume search:
    Get devices for measurement successfully!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  20.264 seconds)


.. _sphx_glr_download_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
