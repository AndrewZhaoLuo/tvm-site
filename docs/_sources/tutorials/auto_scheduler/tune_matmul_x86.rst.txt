.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_tutorials_auto_scheduler_tune_matmul_x86.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_auto_scheduler_tune_matmul_x86.py:


Auto-scheduling matrix multiplication for CPU
=============================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

Different from the existing :ref:`autotvm <tutorials-autotvm-sec>` which relies on 
manual templates to define the search space, the auto-scheduler does not require any templates.
The auto-scheduler is template-free, so users only need to write the computation declaration without
any schedule commands or templates.
The auto-scheduler can automatically generate a large
search space and find a good schedule in the space.

We use matrix multiplication as an example in this tutorial.


.. code-block:: default


    import numpy as np
    import tvm
    from tvm import te, testing, auto_scheduler







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a matmul with bias add.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def matmul_add(N, L, M, dtype):
        A = te.placeholder((N, L), name="A", dtype=dtype)
        B = te.placeholder((L, M), name="B", dtype=dtype)
        C = te.placeholder((N, M), name="C", dtype=dtype)

        k = te.reduce_axis((0, L), name="k")
        matmul = te.compute((N, M), lambda i, j: te.sum(A[i, k] * B[k, j], axis=k), name="matmul")
        out = te.compute((N, M), lambda i, j: matmul[i, j] + C[i, j], name="out")

        return [A, B, C, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task with N=L=M=128 and dtype="float32"
If your machine supports avx instructions, you can

  - replace "llvm" below with "llvm -mcpu=core-avx2" to enable AVX2
  - replace "llvm" below with "llvm -mcpu=skylake-avx512" to enable AVX-512


.. code-block:: default


    target = tvm.target.Target("llvm")
    task = tvm.auto_scheduler.create_task(matmul_add, (128, 128, 128, "float32"), target)

    # Inspect the computational graph
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    A = PLACEHOLDER [128, 128]
    B = PLACEHOLDER [128, 128]
    matmul(i, j) += (A[i, k]*B[k, j])
    C = PLACEHOLDER [128, 128]
    out(i, j) = (matmul[i, j] + C[i, j])




Next, we set parameters for the auto-scheduler.

* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `matmul.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions` for more parameters


.. code-block:: default


    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10, measure_callbacks=[auto_scheduler.RecordToFile("matmul.json")]
    )







Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, it will return the best schedule it found.


.. code-block:: default


    sch, args = auto_scheduler.auto_schedule(task, tuning_options=tune_option)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    *T*T*T*T*T*T*T*T*T



We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
parallelization, vectorization, unrolling and operator fusion.


.. code-block:: default


    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    primfn(A_1: handle, B_1: handle, C_1: handle, out_1: handle) -> ()
      attr = {"global_symbol": "main", "tir.noalias": True}
      buffers = {out: Buffer(out_2: Pointer(float32), float32, [128, 128], []),
                 C: Buffer(C_2: Pointer(float32), float32, [128, 128], []),
                 B: Buffer(B_2: Pointer(float32), float32, [128, 128], []),
                 A: Buffer(A_2: Pointer(float32), float32, [128, 128], [])}
      buffer_map = {A_1: A, B_1: B, C_1: C, out_1: out} {
      attr [matmul: Pointer(float32)] "storage_scope" = "global";
      allocate(matmul, float32, [16384]) {
        for (i.outer.outer.inner: int32, 0, 8) {
          for (j.outer.outer.inner: int32, 0, 4) {
            matmul[ramp(((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 128), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 256), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 384), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 512), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 640), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 768), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 896), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 2), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 130), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 258), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 386), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 514), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 642), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 770), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 898), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 4), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 132), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 260), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 388), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 516), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 644), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 772), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 900), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 6), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 134), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 262), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 390), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 518), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 646), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 774), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 902), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 8), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 136), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 264), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 392), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 520), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 648), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 776), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 904), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 10), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 138), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 266), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 394), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 522), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 650), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 778), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 906), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 12), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 140), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 268), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 396), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 524), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 652), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 780), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 908), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 14), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 142), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 270), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 398), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 526), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 654), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 782), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 910), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 16), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 144), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 272), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 400), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 528), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 656), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 784), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 912), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 18), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 146), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 274), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 402), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 530), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 658), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 786), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 914), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 20), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 148), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 276), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 404), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 532), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 660), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 788), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 916), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 22), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 150), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 278), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 406), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 534), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 662), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 790), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 918), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 24), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 152), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 280), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 408), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 536), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 664), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 792), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 920), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 26), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 154), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 282), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 410), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 538), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 666), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 794), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 922), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 28), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 156), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 284), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 412), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 540), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 668), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 796), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 924), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 30), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 158), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 286), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 414), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 542), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 670), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 798), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 926), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1024), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1152), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1280), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1408), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1536), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1664), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1792), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1920), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1026), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1154), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1282), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1410), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1538), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1666), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1794), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1922), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1028), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1156), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1284), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1412), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1540), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1668), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1796), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1924), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1030), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1158), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1286), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1414), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1542), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1670), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1798), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1926), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1032), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1160), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1288), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1416), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1544), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1672), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1800), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1928), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1034), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1162), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1290), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1418), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1546), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1674), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1802), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1930), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1036), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1164), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1292), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1420), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1548), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1676), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1804), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1932), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1038), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1166), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1294), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1422), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1550), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1678), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1806), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1934), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1040), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1168), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1296), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1424), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1552), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1680), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1808), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1936), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1042), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1170), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1298), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1426), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1554), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1682), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1810), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1938), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1044), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1172), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1300), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1428), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1556), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1684), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1812), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1940), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1046), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1174), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1302), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1430), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1558), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1686), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1814), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1942), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1048), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1176), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1304), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1432), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1560), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1688), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1816), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1944), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1050), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1178), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1306), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1434), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1562), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1690), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1818), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1946), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1052), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1180), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1308), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1436), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1564), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1692), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1820), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1948), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1054), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1182), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1310), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1438), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1566), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1694), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1822), 1, 2)] = broadcast(0f32, 2)
            matmul[ramp((((i.outer.outer.inner*2048) + (j.outer.outer.inner*32)) + 1950), 1, 2)] = broadcast(0f32, 2)
            for (k.outer: int32, 0, 16) {
              for (i.outer.inner: int32, 0, 2) {
                for (j.outer.inner: int32, 0, 16) {
                  matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] = ((float32x2*)matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] + (broadcast((float32*)A_2[(((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8))], 2)*(float32x2*)B_2[ramp((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 128)], 2)*(float32x2*)B_2[ramp((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 256)], 2)*(float32x2*)B_2[ramp((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 384)], 2)*(float32x2*)B_2[ramp((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 512)], 2)*(float32x2*)B_2[ramp((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 640)], 2)*(float32x2*)B_2[ramp((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 768)], 2)*(float32x2*)B_2[ramp((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 896)], 2)*(float32x2*)B_2[ramp((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)]))
                  matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] = ((float32x2*)matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 1)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 129)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 257)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 385)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 513)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 641)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 769)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 897)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)]))
                  matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] = ((float32x2*)matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 2)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 130)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 258)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 386)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 514)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 642)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 770)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 898)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)]))
                  matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] = ((float32x2*)matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 3)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 131)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 259)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 387)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 515)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 643)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 771)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 899)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)]))
                  matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] = ((float32x2*)matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 4)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 132)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 260)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 388)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 516)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 644)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 772)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 900)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)]))
                  matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] = ((float32x2*)matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 5)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 133)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 261)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 389)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 517)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 645)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 773)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 901)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)]))
                  matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] = ((float32x2*)matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 6)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 134)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 262)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 390)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 518)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 646)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 774)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 902)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)]))
                  matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] = ((float32x2*)matmul[ramp(((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 7)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 128), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 135)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 256), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 263)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 384), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 391)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 512), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 519)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 640), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 647)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 768), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 775)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)]))
                  matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] = ((float32x2*)matmul[ramp((((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)] + (broadcast((float32*)A_2[((((i.outer.outer.inner*2048) + (i.outer.inner*1024)) + (k.outer*8)) + 903)], 2)*(float32x2*)B_2[ramp(((((k.outer*1024) + (j.outer.outer.inner*32)) + (j.outer.inner*2)) + 896), 1, 2)]))
                }
              }
            }
          }
        }
        for (i.inner: int32, 0, 128) {
          for (j.inner: int32, 0, 128) {
            out_2[((i.inner*128) + j.inner)] = ((float32*)matmul[((i.inner*128) + j.inner)] + (float32*)C_2[((i.inner*128) + j.inner)])
          }
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args)
    a_np = np.random.uniform(size=(128, 128)).astype(np.float32)
    b_np = np.random.uniform(size=(128, 128)).astype(np.float32)
    c_np = np.random.uniform(size=(128, 128)).astype(np.float32)
    out_np = a_np.dot(b_np) + c_np

    ctx = tvm.cpu()
    a_tvm = tvm.nd.array(a_np, ctx=ctx)
    b_tvm = tvm.nd.array(b_np, ctx=ctx)
    c_tvm = tvm.nd.array(c_np, ctx=ctx)
    out_tvm = tvm.nd.empty(out_np.shape, ctx=ctx)
    func(a_tvm, b_tvm, c_tvm, out_tvm)

    # Check results
    tvm.testing.assert_allclose(out_np, out_tvm.asnumpy(), rtol=1e-3)

    # Evaluate execution time.
    evaluator = func.time_evaluator(func.entry_name, ctx, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(a_tvm, b_tvm, c_tvm, out_tvm).results) * 1000)
    )






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.371 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measuremnt records are dumpped into the record
file "matmul.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API, and build the binary again.


.. code-block:: default


    # Load the measuremnt record for the best schedule
    inp, res = auto_scheduler.load_best("matmul.json", task.workload_key)

    # Print equivalent python schedule API. This can be used for debugging and
    # learning the behavior of the auto-scheduler.
    print("Equivalent python schedule:")
    print(task.compute_dag.print_python_code_from_state(inp.state))

    # Rebuild the binary. This shows how you can apply the best schedule from a
    # log file without reruning the search again.
    sch, args = task.compute_dag.apply_steps_from_state(inp.state)
    func = tvm.build(sch, args)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    i, j, k = tuple(matmul.op.axis) + tuple(matmul.op.reduce_axis)
    i, j = tuple(out.op.axis) + tuple(out.op.reduce_axis)
    i_o_i, i_i = s[matmul].split(i, factor=1)
    i_o_o_i, i_o_i = s[matmul].split(i_o_i, factor=16)
    i_o_o_o, i_o_o_i = s[matmul].split(i_o_o_i, factor=8)
    j_o_i, j_i = s[matmul].split(j, factor=4)
    j_o_o_i, j_o_i = s[matmul].split(j_o_i, factor=4)
    j_o_o_o, j_o_o_i = s[matmul].split(j_o_o_i, factor=8)
    k_o, k_i = s[matmul].split(k, factor=8)
    s[matmul].reorder(i_o_o_o, j_o_o_o, i_o_o_i, j_o_o_i, k_o, i_o_i, j_o_i, k_i, i_i, j_i)
    i_o_i, i_i = s[out].split(i, factor=16)
    i_o_o, i_o_i = s[out].split(i_o_i, factor=8)
    j_o_i, j_i = s[out].split(j, factor=16)
    j_o_o, j_o_i = s[out].split(j_o_i, factor=8)
    s[out].reorder(i_o_o, j_o_o, i_o_i, j_o_i, i_i, j_i)
    s[matmul].compute_at(s[out], j_o_i)
    i_o_o_j_o_o_fused = s[out].fuse(i_o_o, j_o_o)
    s[out].parallel(i_o_o_j_o_o_fused)
    s[matmul].pragma(i_o_o_o, "auto_unroll_max_step", 64)
    s[matmul].pragma(i_o_o_o, "unroll_explicit", True)
    s[matmul].vectorize(j_i)
    s[out].vectorize(j_i)




A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default



    def resume_search(task, log_file):
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5, measure_callbacks=[auto_scheduler.RecordToFile(log_file)]
        )
        sch, args = auto_scheduler.auto_schedule(task, search_policy, tuning_options=tune_option)


    # resume_search(task, "matmul.json")







.. note::
  We cannot run the line above because of the conflict between
  python's multiprocessing and tvm's thread pool.
  After running a tvm generated binary the python's multiprocessing library
  will hang forever. You have to make sure that you don't run any tvm
  generated binaries before calling auot-scheduler's search.
  To run the function above, you should comment out all code in
  "Check correctness and evaluate performance" section.

  You should be careful about this problem in your applications.
  There are other workarounds for this problem.
  For example, you can start a new thread/process (with the builtin python library
  threading or multiprocessing) and run the tvm binaries in the new thread/process.
  This provides an isolation and avoids the conflict in the main thread/process.
  You can also use :any:`auto_scheduler.LocalRPCMeasureContext` for auto-scheduler,
  as shown in the GPU tutorial (:ref:`auto-scheduler-conv-gpu`).


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  46.419 seconds)


.. _sphx_glr_download_tutorials_auto_scheduler_tune_matmul_x86.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_matmul_x86.py <tune_matmul_x86.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_matmul_x86.ipynb <tune_matmul_x86.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
