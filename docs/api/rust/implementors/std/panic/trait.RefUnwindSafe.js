(function() {var implementors = {};
implementors["tvm"] = [{"text":"impl RefUnwindSafe for ConstIntBoundNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstIntBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaseAttrsNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Attrs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticRendererNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticRenderer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticContextNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaseExprNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaseExpr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrimExprNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrimExpr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalVarNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaseFuncNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaseFunc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IRModuleNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IRModule","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Op","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IdNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstantNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TupleNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Var","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CallNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Call","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LetNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IfNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TupleGetItemNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TupleGetItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RefCreateNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RefCreate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RefReadNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RefRead","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RefWriteNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RefWrite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstructorNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constructor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pattern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternWildcardNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternWildcard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternVarNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternConstructorNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternConstructor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternTupleNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClauseNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Clause","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Function","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Conv2DAttrsNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Conv2DAttrs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BiasAddAttrsNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BiasAddAttrs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DenseAttrsNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DenseAttrs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalPool2DAttrsNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalPool2DAttrs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxPool2DAttrsNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxPool2DAttrs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SoftmaxAttrsNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SoftmaxAttrs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchNormAttrsNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchNormAttrs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpandDimsAttrsNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpandDimsAttrs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceMapNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceNameNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpanNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntImmNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntImm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Var","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MulNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mul","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DivNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloorDivNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloorDiv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloorModNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloorMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MinNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Min","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Max","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RampNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ramp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Select","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EqNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NeNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LtNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LeNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GtNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for And","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Not","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LetNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrimTypeNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrimType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PointerTypeNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PointerType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeVarNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalTypeVarNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalTypeVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TupleTypeNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TupleType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeConstraintNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeConstraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncTypeNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IncompleteTypeNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IncompleteType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RelayRefTypeNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RefType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaseTensorTypeNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaseTensorType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TensorTypeNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TensorType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeDataNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GraphRt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PassInfoNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PassInfo","synthetic":true,"types":[]}];
implementors["tvm_graph_rt"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Tensor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Graph","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Node","synthetic":true,"types":[]},{"text":"impl&lt;'m, 't&gt; !RefUnwindSafe for GraphExecutor&lt;'m, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for DsoModule&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SystemLibModule","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Storage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionNotFound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidPointer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GraphFormatError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrayError","synthetic":true,"types":[]}];
implementors["tvm_rt"] = [{"text":"impl RefUnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ObjectPtr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StringObj","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for String","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Array&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionNotFoundError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeMismatchError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NDArrayError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Function","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NDArrayContainer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NDArray","synthetic":true,"types":[]}];
implementors["tvm_sys"] = [{"text":"impl RefUnwindSafe for DLContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DLDataType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DLTensor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DLManagedTensor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TVMByteArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TVMParallelGroupEnv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TVMValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ByteArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsupportedDeviceError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseDataTypeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueDowncastError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncCallError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ArgValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RetValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsupportedDeviceError","synthetic":true,"types":[]}];
implementors["tyck"] = [{"text":"impl RefUnwindSafe for Opt","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()