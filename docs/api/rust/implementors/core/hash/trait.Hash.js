(function() {var implementors = {};
implementors["tvm"] = [{"text":"impl Hash for ConstIntBound","synthetic":false,"types":[]},{"text":"impl Hash for Attrs","synthetic":false,"types":[]},{"text":"impl Hash for Diagnostic","synthetic":false,"types":[]},{"text":"impl Hash for DiagnosticRenderer","synthetic":false,"types":[]},{"text":"impl Hash for DiagnosticContext","synthetic":false,"types":[]},{"text":"impl Hash for BaseExpr","synthetic":false,"types":[]},{"text":"impl Hash for PrimExpr","synthetic":false,"types":[]},{"text":"impl Hash for GlobalVar","synthetic":false,"types":[]},{"text":"impl Hash for BaseFunc","synthetic":false,"types":[]},{"text":"impl Hash for IRModule","synthetic":false,"types":[]},{"text":"impl Hash for Op","synthetic":false,"types":[]},{"text":"impl Hash for Conv2DAttrs","synthetic":false,"types":[]},{"text":"impl Hash for BiasAddAttrs","synthetic":false,"types":[]},{"text":"impl Hash for DenseAttrs","synthetic":false,"types":[]},{"text":"impl Hash for GlobalPool2DAttrs","synthetic":false,"types":[]},{"text":"impl Hash for MaxPool2DAttrs","synthetic":false,"types":[]},{"text":"impl Hash for SoftmaxAttrs","synthetic":false,"types":[]},{"text":"impl Hash for BatchNormAttrs","synthetic":false,"types":[]},{"text":"impl Hash for LeakyReluAttrs","synthetic":false,"types":[]},{"text":"impl Hash for AvgPool2DAttrs","synthetic":false,"types":[]},{"text":"impl Hash for UpSamplingAttrs","synthetic":false,"types":[]},{"text":"impl Hash for ExpandDimsAttrs","synthetic":false,"types":[]},{"text":"impl Hash for ConcatenateAttrs","synthetic":false,"types":[]},{"text":"impl Hash for ReshapeAttrs","synthetic":false,"types":[]},{"text":"impl Hash for SplitAttrs","synthetic":false,"types":[]},{"text":"impl Hash for TransposeAttrs","synthetic":false,"types":[]},{"text":"impl Hash for SqueezeAttrs","synthetic":false,"types":[]},{"text":"impl Hash for Expr","synthetic":false,"types":[]},{"text":"impl Hash for Id","synthetic":false,"types":[]},{"text":"impl Hash for Constant","synthetic":false,"types":[]},{"text":"impl Hash for Tuple","synthetic":false,"types":[]},{"text":"impl Hash for Var","synthetic":false,"types":[]},{"text":"impl Hash for Call","synthetic":false,"types":[]},{"text":"impl Hash for Let","synthetic":false,"types":[]},{"text":"impl Hash for If","synthetic":false,"types":[]},{"text":"impl Hash for TupleGetItem","synthetic":false,"types":[]},{"text":"impl Hash for RefCreate","synthetic":false,"types":[]},{"text":"impl Hash for RefRead","synthetic":false,"types":[]},{"text":"impl Hash for RefWrite","synthetic":false,"types":[]},{"text":"impl Hash for Constructor","synthetic":false,"types":[]},{"text":"impl Hash for Pattern","synthetic":false,"types":[]},{"text":"impl Hash for PatternWildcard","synthetic":false,"types":[]},{"text":"impl Hash for PatternVar","synthetic":false,"types":[]},{"text":"impl Hash for PatternConstructor","synthetic":false,"types":[]},{"text":"impl Hash for PatternTuple","synthetic":false,"types":[]},{"text":"impl Hash for Clause","synthetic":false,"types":[]},{"text":"impl Hash for Match","synthetic":false,"types":[]},{"text":"impl Hash for Function","synthetic":false,"types":[]},{"text":"impl Hash for Source","synthetic":false,"types":[]},{"text":"impl Hash for SourceMap","synthetic":false,"types":[]},{"text":"impl Hash for SourceName","synthetic":false,"types":[]},{"text":"impl Hash for Span","synthetic":false,"types":[]},{"text":"impl Hash for IntImm","synthetic":false,"types":[]},{"text":"impl Hash for Var","synthetic":false,"types":[]},{"text":"impl Hash for Add","synthetic":false,"types":[]},{"text":"impl Hash for Sub","synthetic":false,"types":[]},{"text":"impl Hash for Mul","synthetic":false,"types":[]},{"text":"impl Hash for Div","synthetic":false,"types":[]},{"text":"impl Hash for Mod","synthetic":false,"types":[]},{"text":"impl Hash for FloorDiv","synthetic":false,"types":[]},{"text":"impl Hash for FloorMod","synthetic":false,"types":[]},{"text":"impl Hash for Min","synthetic":false,"types":[]},{"text":"impl Hash for Max","synthetic":false,"types":[]},{"text":"impl Hash for Cast","synthetic":false,"types":[]},{"text":"impl Hash for Ramp","synthetic":false,"types":[]},{"text":"impl Hash for Select","synthetic":false,"types":[]},{"text":"impl Hash for Eq","synthetic":false,"types":[]},{"text":"impl Hash for Ne","synthetic":false,"types":[]},{"text":"impl Hash for Lt","synthetic":false,"types":[]},{"text":"impl Hash for Le","synthetic":false,"types":[]},{"text":"impl Hash for Gt","synthetic":false,"types":[]},{"text":"impl Hash for Ge","synthetic":false,"types":[]},{"text":"impl Hash for And","synthetic":false,"types":[]},{"text":"impl Hash for Or","synthetic":false,"types":[]},{"text":"impl Hash for Not","synthetic":false,"types":[]},{"text":"impl Hash for Let","synthetic":false,"types":[]},{"text":"impl Hash for Type","synthetic":false,"types":[]},{"text":"impl Hash for PrimType","synthetic":false,"types":[]},{"text":"impl Hash for PointerType","synthetic":false,"types":[]},{"text":"impl Hash for TypeVar","synthetic":false,"types":[]},{"text":"impl Hash for GlobalTypeVar","synthetic":false,"types":[]},{"text":"impl Hash for TupleType","synthetic":false,"types":[]},{"text":"impl Hash for TypeConstraint","synthetic":false,"types":[]},{"text":"impl Hash for FuncType","synthetic":false,"types":[]},{"text":"impl Hash for IncompleteType","synthetic":false,"types":[]},{"text":"impl Hash for RefType","synthetic":false,"types":[]},{"text":"impl Hash for BaseTensorType","synthetic":false,"types":[]},{"text":"impl Hash for TensorType","synthetic":false,"types":[]},{"text":"impl Hash for TypeData","synthetic":false,"types":[]},{"text":"impl Hash for PassInfo","synthetic":false,"types":[]}];
implementors["tvm_rt"] = [{"text":"impl Hash for ObjectRef","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;IsObject&gt; Hash for ObjectPtr&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Hash for String","synthetic":false,"types":[]},{"text":"impl Hash for Function","synthetic":false,"types":[]},{"text":"impl Hash for NDArray","synthetic":false,"types":[]}];
implementors["tvm_sys"] = [{"text":"impl Hash for DeviceType","synthetic":false,"types":[]},{"text":"impl Hash for Context","synthetic":false,"types":[]},{"text":"impl Hash for DataType","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()