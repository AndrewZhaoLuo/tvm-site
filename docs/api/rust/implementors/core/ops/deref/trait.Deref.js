(function() {var implementors = {};
implementors["tvm"] = [{"text":"impl Deref for ConstIntBound","synthetic":false,"types":[]},{"text":"impl Deref for Attrs","synthetic":false,"types":[]},{"text":"impl Deref for Diagnostic","synthetic":false,"types":[]},{"text":"impl Deref for DiagnosticRenderer","synthetic":false,"types":[]},{"text":"impl Deref for DiagnosticContext","synthetic":false,"types":[]},{"text":"impl Deref for BaseExpr","synthetic":false,"types":[]},{"text":"impl Deref for PrimExpr","synthetic":false,"types":[]},{"text":"impl Deref for GlobalVar","synthetic":false,"types":[]},{"text":"impl Deref for BaseFunc","synthetic":false,"types":[]},{"text":"impl Deref for IRModule","synthetic":false,"types":[]},{"text":"impl Deref for Op","synthetic":false,"types":[]},{"text":"impl Deref for Conv2DAttrs","synthetic":false,"types":[]},{"text":"impl Deref for BiasAddAttrs","synthetic":false,"types":[]},{"text":"impl Deref for DenseAttrs","synthetic":false,"types":[]},{"text":"impl Deref for GlobalPool2DAttrs","synthetic":false,"types":[]},{"text":"impl Deref for MaxPool2DAttrs","synthetic":false,"types":[]},{"text":"impl Deref for SoftmaxAttrs","synthetic":false,"types":[]},{"text":"impl Deref for BatchNormAttrs","synthetic":false,"types":[]},{"text":"impl Deref for LeakyReluAttrs","synthetic":false,"types":[]},{"text":"impl Deref for AvgPool2DAttrs","synthetic":false,"types":[]},{"text":"impl Deref for UpSamplingAttrs","synthetic":false,"types":[]},{"text":"impl Deref for ExpandDimsAttrs","synthetic":false,"types":[]},{"text":"impl Deref for ConcatenateAttrs","synthetic":false,"types":[]},{"text":"impl Deref for ReshapeAttrs","synthetic":false,"types":[]},{"text":"impl Deref for SplitAttrs","synthetic":false,"types":[]},{"text":"impl Deref for TransposeAttrs","synthetic":false,"types":[]},{"text":"impl Deref for SqueezeAttrs","synthetic":false,"types":[]},{"text":"impl Deref for Expr","synthetic":false,"types":[]},{"text":"impl Deref for Id","synthetic":false,"types":[]},{"text":"impl Deref for Constant","synthetic":false,"types":[]},{"text":"impl Deref for Tuple","synthetic":false,"types":[]},{"text":"impl Deref for Var","synthetic":false,"types":[]},{"text":"impl Deref for Call","synthetic":false,"types":[]},{"text":"impl Deref for Let","synthetic":false,"types":[]},{"text":"impl Deref for If","synthetic":false,"types":[]},{"text":"impl Deref for TupleGetItem","synthetic":false,"types":[]},{"text":"impl Deref for RefCreate","synthetic":false,"types":[]},{"text":"impl Deref for RefRead","synthetic":false,"types":[]},{"text":"impl Deref for RefWrite","synthetic":false,"types":[]},{"text":"impl Deref for Constructor","synthetic":false,"types":[]},{"text":"impl Deref for Pattern","synthetic":false,"types":[]},{"text":"impl Deref for PatternWildcard","synthetic":false,"types":[]},{"text":"impl Deref for PatternVar","synthetic":false,"types":[]},{"text":"impl Deref for PatternConstructor","synthetic":false,"types":[]},{"text":"impl Deref for PatternTuple","synthetic":false,"types":[]},{"text":"impl Deref for Clause","synthetic":false,"types":[]},{"text":"impl Deref for Match","synthetic":false,"types":[]},{"text":"impl Deref for Function","synthetic":false,"types":[]},{"text":"impl Deref for Source","synthetic":false,"types":[]},{"text":"impl Deref for SourceMap","synthetic":false,"types":[]},{"text":"impl Deref for SourceName","synthetic":false,"types":[]},{"text":"impl Deref for Span","synthetic":false,"types":[]},{"text":"impl Deref for IntImm","synthetic":false,"types":[]},{"text":"impl Deref for Var","synthetic":false,"types":[]},{"text":"impl Deref for Add","synthetic":false,"types":[]},{"text":"impl Deref for Sub","synthetic":false,"types":[]},{"text":"impl Deref for Mul","synthetic":false,"types":[]},{"text":"impl Deref for Div","synthetic":false,"types":[]},{"text":"impl Deref for Mod","synthetic":false,"types":[]},{"text":"impl Deref for FloorDiv","synthetic":false,"types":[]},{"text":"impl Deref for FloorMod","synthetic":false,"types":[]},{"text":"impl Deref for Min","synthetic":false,"types":[]},{"text":"impl Deref for Max","synthetic":false,"types":[]},{"text":"impl Deref for Cast","synthetic":false,"types":[]},{"text":"impl Deref for Ramp","synthetic":false,"types":[]},{"text":"impl Deref for Select","synthetic":false,"types":[]},{"text":"impl Deref for Eq","synthetic":false,"types":[]},{"text":"impl Deref for Ne","synthetic":false,"types":[]},{"text":"impl Deref for Lt","synthetic":false,"types":[]},{"text":"impl Deref for Le","synthetic":false,"types":[]},{"text":"impl Deref for Gt","synthetic":false,"types":[]},{"text":"impl Deref for Ge","synthetic":false,"types":[]},{"text":"impl Deref for And","synthetic":false,"types":[]},{"text":"impl Deref for Or","synthetic":false,"types":[]},{"text":"impl Deref for Not","synthetic":false,"types":[]},{"text":"impl Deref for Let","synthetic":false,"types":[]},{"text":"impl Deref for Type","synthetic":false,"types":[]},{"text":"impl Deref for PrimType","synthetic":false,"types":[]},{"text":"impl Deref for PointerType","synthetic":false,"types":[]},{"text":"impl Deref for TypeVar","synthetic":false,"types":[]},{"text":"impl Deref for GlobalTypeVar","synthetic":false,"types":[]},{"text":"impl Deref for TupleType","synthetic":false,"types":[]},{"text":"impl Deref for TypeConstraint","synthetic":false,"types":[]},{"text":"impl Deref for FuncType","synthetic":false,"types":[]},{"text":"impl Deref for IncompleteType","synthetic":false,"types":[]},{"text":"impl Deref for RefType","synthetic":false,"types":[]},{"text":"impl Deref for BaseTensorType","synthetic":false,"types":[]},{"text":"impl Deref for TensorType","synthetic":false,"types":[]},{"text":"impl Deref for TypeData","synthetic":false,"types":[]},{"text":"impl Deref for PassInfo","synthetic":false,"types":[]}];
implementors["tvm_rt"] = [{"text":"impl Deref for ObjectRef","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;IsObject&gt; Deref for ObjectPtr&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Deref for String","synthetic":false,"types":[]},{"text":"impl Deref for NDArray","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()