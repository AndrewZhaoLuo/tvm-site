(function() {var implementors = {};
implementors["tvm"] = [{"text":"impl Eq for ConstIntBound","synthetic":false,"types":[]},{"text":"impl Eq for Attrs","synthetic":false,"types":[]},{"text":"impl Eq for DiagnosticLevel","synthetic":false,"types":[]},{"text":"impl Eq for Diagnostic","synthetic":false,"types":[]},{"text":"impl Eq for DiagnosticRenderer","synthetic":false,"types":[]},{"text":"impl Eq for DiagnosticContext","synthetic":false,"types":[]},{"text":"impl Eq for BaseExpr","synthetic":false,"types":[]},{"text":"impl Eq for PrimExpr","synthetic":false,"types":[]},{"text":"impl Eq for GlobalVar","synthetic":false,"types":[]},{"text":"impl Eq for BaseFunc","synthetic":false,"types":[]},{"text":"impl Eq for IRModule","synthetic":false,"types":[]},{"text":"impl Eq for Op","synthetic":false,"types":[]},{"text":"impl Eq for Conv2DAttrs","synthetic":false,"types":[]},{"text":"impl Eq for BiasAddAttrs","synthetic":false,"types":[]},{"text":"impl Eq for DenseAttrs","synthetic":false,"types":[]},{"text":"impl Eq for GlobalPool2DAttrs","synthetic":false,"types":[]},{"text":"impl Eq for MaxPool2DAttrs","synthetic":false,"types":[]},{"text":"impl Eq for SoftmaxAttrs","synthetic":false,"types":[]},{"text":"impl Eq for BatchNormAttrs","synthetic":false,"types":[]},{"text":"impl Eq for ExpandDimsAttrs","synthetic":false,"types":[]},{"text":"impl Eq for Expr","synthetic":false,"types":[]},{"text":"impl Eq for Id","synthetic":false,"types":[]},{"text":"impl Eq for Constant","synthetic":false,"types":[]},{"text":"impl Eq for Tuple","synthetic":false,"types":[]},{"text":"impl Eq for Var","synthetic":false,"types":[]},{"text":"impl Eq for Call","synthetic":false,"types":[]},{"text":"impl Eq for Let","synthetic":false,"types":[]},{"text":"impl Eq for If","synthetic":false,"types":[]},{"text":"impl Eq for TupleGetItem","synthetic":false,"types":[]},{"text":"impl Eq for RefCreate","synthetic":false,"types":[]},{"text":"impl Eq for RefRead","synthetic":false,"types":[]},{"text":"impl Eq for RefWrite","synthetic":false,"types":[]},{"text":"impl Eq for Constructor","synthetic":false,"types":[]},{"text":"impl Eq for Pattern","synthetic":false,"types":[]},{"text":"impl Eq for PatternWildcard","synthetic":false,"types":[]},{"text":"impl Eq for PatternVar","synthetic":false,"types":[]},{"text":"impl Eq for PatternConstructor","synthetic":false,"types":[]},{"text":"impl Eq for PatternTuple","synthetic":false,"types":[]},{"text":"impl Eq for Clause","synthetic":false,"types":[]},{"text":"impl Eq for Match","synthetic":false,"types":[]},{"text":"impl Eq for Function","synthetic":false,"types":[]},{"text":"impl Eq for Source","synthetic":false,"types":[]},{"text":"impl Eq for SourceMap","synthetic":false,"types":[]},{"text":"impl Eq for SourceName","synthetic":false,"types":[]},{"text":"impl Eq for Span","synthetic":false,"types":[]},{"text":"impl Eq for IntImm","synthetic":false,"types":[]},{"text":"impl Eq for Var","synthetic":false,"types":[]},{"text":"impl Eq for Add","synthetic":false,"types":[]},{"text":"impl Eq for Sub","synthetic":false,"types":[]},{"text":"impl Eq for Mul","synthetic":false,"types":[]},{"text":"impl Eq for Div","synthetic":false,"types":[]},{"text":"impl Eq for Mod","synthetic":false,"types":[]},{"text":"impl Eq for FloorDiv","synthetic":false,"types":[]},{"text":"impl Eq for FloorMod","synthetic":false,"types":[]},{"text":"impl Eq for Min","synthetic":false,"types":[]},{"text":"impl Eq for Max","synthetic":false,"types":[]},{"text":"impl Eq for Cast","synthetic":false,"types":[]},{"text":"impl Eq for Ramp","synthetic":false,"types":[]},{"text":"impl Eq for Select","synthetic":false,"types":[]},{"text":"impl Eq for Eq","synthetic":false,"types":[]},{"text":"impl Eq for Ne","synthetic":false,"types":[]},{"text":"impl Eq for Lt","synthetic":false,"types":[]},{"text":"impl Eq for Le","synthetic":false,"types":[]},{"text":"impl Eq for Gt","synthetic":false,"types":[]},{"text":"impl Eq for Ge","synthetic":false,"types":[]},{"text":"impl Eq for And","synthetic":false,"types":[]},{"text":"impl Eq for Or","synthetic":false,"types":[]},{"text":"impl Eq for Not","synthetic":false,"types":[]},{"text":"impl Eq for Let","synthetic":false,"types":[]},{"text":"impl Eq for Type","synthetic":false,"types":[]},{"text":"impl Eq for PrimType","synthetic":false,"types":[]},{"text":"impl Eq for PointerType","synthetic":false,"types":[]},{"text":"impl Eq for TypeKind","synthetic":false,"types":[]},{"text":"impl Eq for TypeVar","synthetic":false,"types":[]},{"text":"impl Eq for GlobalTypeVar","synthetic":false,"types":[]},{"text":"impl Eq for TupleType","synthetic":false,"types":[]},{"text":"impl Eq for TypeConstraint","synthetic":false,"types":[]},{"text":"impl Eq for FuncType","synthetic":false,"types":[]},{"text":"impl Eq for IncompleteType","synthetic":false,"types":[]},{"text":"impl Eq for RefType","synthetic":false,"types":[]},{"text":"impl Eq for BaseTensorType","synthetic":false,"types":[]},{"text":"impl Eq for TensorType","synthetic":false,"types":[]},{"text":"impl Eq for TypeData","synthetic":false,"types":[]},{"text":"impl Eq for PassInfo","synthetic":false,"types":[]}];
implementors["tvm_rt"] = [{"text":"impl Eq for ObjectRef","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;IsObject&gt; Eq for ObjectPtr&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Eq for String","synthetic":false,"types":[]},{"text":"impl Eq for NDArray","synthetic":false,"types":[]}];
implementors["tvm_sys"] = [{"text":"impl Eq for DLContext","synthetic":false,"types":[]},{"text":"impl Eq for DLDataType","synthetic":false,"types":[]},{"text":"impl Eq for DLTensor","synthetic":false,"types":[]},{"text":"impl Eq for DLManagedTensor","synthetic":false,"types":[]},{"text":"impl Eq for TVMByteArray","synthetic":false,"types":[]},{"text":"impl Eq for TVMParallelGroupEnv","synthetic":false,"types":[]},{"text":"impl Eq for DeviceType","synthetic":false,"types":[]},{"text":"impl Eq for Context","synthetic":false,"types":[]},{"text":"impl Eq for DataType","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()