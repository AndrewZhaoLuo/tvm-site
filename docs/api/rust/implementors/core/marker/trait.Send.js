(function() {var implementors = {};
implementors["tvm"] = [{"text":"impl Send for ConstIntBoundNode","synthetic":true,"types":[]},{"text":"impl !Send for ConstIntBound","synthetic":true,"types":[]},{"text":"impl Send for BaseAttrsNode","synthetic":true,"types":[]},{"text":"impl !Send for Attrs","synthetic":true,"types":[]},{"text":"impl !Send for DiagnosticNode","synthetic":true,"types":[]},{"text":"impl !Send for Diagnostic","synthetic":true,"types":[]},{"text":"impl !Send for DiagnosticBuilder","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticRendererNode","synthetic":true,"types":[]},{"text":"impl !Send for DiagnosticRenderer","synthetic":true,"types":[]},{"text":"impl !Send for DiagnosticContextNode","synthetic":true,"types":[]},{"text":"impl !Send for DiagnosticContext","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticLevel","synthetic":true,"types":[]},{"text":"impl Send for BaseExprNode","synthetic":true,"types":[]},{"text":"impl !Send for BaseExpr","synthetic":true,"types":[]},{"text":"impl Send for PrimExprNode","synthetic":true,"types":[]},{"text":"impl !Send for PrimExpr","synthetic":true,"types":[]},{"text":"impl !Send for GlobalVarNode","synthetic":true,"types":[]},{"text":"impl !Send for GlobalVar","synthetic":true,"types":[]},{"text":"impl !Send for BaseFuncNode","synthetic":true,"types":[]},{"text":"impl !Send for BaseFunc","synthetic":true,"types":[]},{"text":"impl !Send for IRModuleNode","synthetic":true,"types":[]},{"text":"impl !Send for IRModule","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl !Send for OpNode","synthetic":true,"types":[]},{"text":"impl !Send for Op","synthetic":true,"types":[]},{"text":"impl !Send for ExprNode","synthetic":true,"types":[]},{"text":"impl !Send for Expr","synthetic":true,"types":[]},{"text":"impl !Send for IdNode","synthetic":true,"types":[]},{"text":"impl !Send for Id","synthetic":true,"types":[]},{"text":"impl !Send for ConstantNode","synthetic":true,"types":[]},{"text":"impl !Send for Constant","synthetic":true,"types":[]},{"text":"impl !Send for TupleNode","synthetic":true,"types":[]},{"text":"impl !Send for Tuple","synthetic":true,"types":[]},{"text":"impl !Send for VarNode","synthetic":true,"types":[]},{"text":"impl !Send for Var","synthetic":true,"types":[]},{"text":"impl !Send for CallNode","synthetic":true,"types":[]},{"text":"impl !Send for Call","synthetic":true,"types":[]},{"text":"impl !Send for LetNode","synthetic":true,"types":[]},{"text":"impl !Send for Let","synthetic":true,"types":[]},{"text":"impl !Send for IfNode","synthetic":true,"types":[]},{"text":"impl !Send for If","synthetic":true,"types":[]},{"text":"impl !Send for TupleGetItemNode","synthetic":true,"types":[]},{"text":"impl !Send for TupleGetItem","synthetic":true,"types":[]},{"text":"impl !Send for RefCreateNode","synthetic":true,"types":[]},{"text":"impl !Send for RefCreate","synthetic":true,"types":[]},{"text":"impl !Send for RefReadNode","synthetic":true,"types":[]},{"text":"impl !Send for RefRead","synthetic":true,"types":[]},{"text":"impl !Send for RefWriteNode","synthetic":true,"types":[]},{"text":"impl !Send for RefWrite","synthetic":true,"types":[]},{"text":"impl !Send for ConstructorNode","synthetic":true,"types":[]},{"text":"impl !Send for Constructor","synthetic":true,"types":[]},{"text":"impl !Send for PatternNode","synthetic":true,"types":[]},{"text":"impl !Send for Pattern","synthetic":true,"types":[]},{"text":"impl !Send for PatternWildcardNode","synthetic":true,"types":[]},{"text":"impl !Send for PatternWildcard","synthetic":true,"types":[]},{"text":"impl !Send for PatternVarNode","synthetic":true,"types":[]},{"text":"impl !Send for PatternVar","synthetic":true,"types":[]},{"text":"impl !Send for PatternConstructorNode","synthetic":true,"types":[]},{"text":"impl !Send for PatternConstructor","synthetic":true,"types":[]},{"text":"impl !Send for PatternTupleNode","synthetic":true,"types":[]},{"text":"impl !Send for PatternTuple","synthetic":true,"types":[]},{"text":"impl !Send for ClauseNode","synthetic":true,"types":[]},{"text":"impl !Send for Clause","synthetic":true,"types":[]},{"text":"impl !Send for MatchNode","synthetic":true,"types":[]},{"text":"impl !Send for Match","synthetic":true,"types":[]},{"text":"impl !Send for FunctionNode","synthetic":true,"types":[]},{"text":"impl !Send for Function","synthetic":true,"types":[]},{"text":"impl !Send for Conv2DAttrsNode","synthetic":true,"types":[]},{"text":"impl !Send for Conv2DAttrs","synthetic":true,"types":[]},{"text":"impl Send for BiasAddAttrsNode","synthetic":true,"types":[]},{"text":"impl !Send for BiasAddAttrs","synthetic":true,"types":[]},{"text":"impl !Send for DenseAttrsNode","synthetic":true,"types":[]},{"text":"impl !Send for DenseAttrs","synthetic":true,"types":[]},{"text":"impl !Send for GlobalPool2DAttrsNode","synthetic":true,"types":[]},{"text":"impl !Send for GlobalPool2DAttrs","synthetic":true,"types":[]},{"text":"impl !Send for MaxPool2DAttrsNode","synthetic":true,"types":[]},{"text":"impl !Send for MaxPool2DAttrs","synthetic":true,"types":[]},{"text":"impl Send for SoftmaxAttrsNode","synthetic":true,"types":[]},{"text":"impl !Send for SoftmaxAttrs","synthetic":true,"types":[]},{"text":"impl Send for BatchNormAttrsNode","synthetic":true,"types":[]},{"text":"impl !Send for BatchNormAttrs","synthetic":true,"types":[]},{"text":"impl Send for ExpandDimsAttrsNode","synthetic":true,"types":[]},{"text":"impl !Send for ExpandDimsAttrs","synthetic":true,"types":[]},{"text":"impl !Send for SourceNode","synthetic":true,"types":[]},{"text":"impl !Send for Source","synthetic":true,"types":[]},{"text":"impl !Send for SourceMapNode","synthetic":true,"types":[]},{"text":"impl !Send for SourceMap","synthetic":true,"types":[]},{"text":"impl !Send for SourceNameNode","synthetic":true,"types":[]},{"text":"impl !Send for SourceName","synthetic":true,"types":[]},{"text":"impl !Send for SpanNode","synthetic":true,"types":[]},{"text":"impl !Send for Span","synthetic":true,"types":[]},{"text":"impl Send for IntImmNode","synthetic":true,"types":[]},{"text":"impl !Send for IntImm","synthetic":true,"types":[]},{"text":"impl !Send for VarNode","synthetic":true,"types":[]},{"text":"impl !Send for Var","synthetic":true,"types":[]},{"text":"impl !Send for AddNode","synthetic":true,"types":[]},{"text":"impl !Send for Add","synthetic":true,"types":[]},{"text":"impl !Send for SubNode","synthetic":true,"types":[]},{"text":"impl !Send for Sub","synthetic":true,"types":[]},{"text":"impl !Send for MulNode","synthetic":true,"types":[]},{"text":"impl !Send for Mul","synthetic":true,"types":[]},{"text":"impl !Send for DivNode","synthetic":true,"types":[]},{"text":"impl !Send for Div","synthetic":true,"types":[]},{"text":"impl !Send for ModNode","synthetic":true,"types":[]},{"text":"impl !Send for Mod","synthetic":true,"types":[]},{"text":"impl !Send for FloorDivNode","synthetic":true,"types":[]},{"text":"impl !Send for FloorDiv","synthetic":true,"types":[]},{"text":"impl !Send for FloorModNode","synthetic":true,"types":[]},{"text":"impl !Send for FloorMod","synthetic":true,"types":[]},{"text":"impl !Send for MinNode","synthetic":true,"types":[]},{"text":"impl !Send for Min","synthetic":true,"types":[]},{"text":"impl !Send for MaxNode","synthetic":true,"types":[]},{"text":"impl !Send for Max","synthetic":true,"types":[]},{"text":"impl !Send for CastNode","synthetic":true,"types":[]},{"text":"impl !Send for Cast","synthetic":true,"types":[]},{"text":"impl !Send for RampNode","synthetic":true,"types":[]},{"text":"impl !Send for Ramp","synthetic":true,"types":[]},{"text":"impl !Send for SelectNode","synthetic":true,"types":[]},{"text":"impl !Send for Select","synthetic":true,"types":[]},{"text":"impl !Send for EqNode","synthetic":true,"types":[]},{"text":"impl !Send for Eq","synthetic":true,"types":[]},{"text":"impl !Send for NeNode","synthetic":true,"types":[]},{"text":"impl !Send for Ne","synthetic":true,"types":[]},{"text":"impl !Send for LtNode","synthetic":true,"types":[]},{"text":"impl !Send for Lt","synthetic":true,"types":[]},{"text":"impl !Send for LeNode","synthetic":true,"types":[]},{"text":"impl !Send for Le","synthetic":true,"types":[]},{"text":"impl !Send for GtNode","synthetic":true,"types":[]},{"text":"impl !Send for Gt","synthetic":true,"types":[]},{"text":"impl !Send for GeNode","synthetic":true,"types":[]},{"text":"impl !Send for Ge","synthetic":true,"types":[]},{"text":"impl !Send for AndNode","synthetic":true,"types":[]},{"text":"impl !Send for And","synthetic":true,"types":[]},{"text":"impl !Send for OrNode","synthetic":true,"types":[]},{"text":"impl !Send for Or","synthetic":true,"types":[]},{"text":"impl !Send for NotNode","synthetic":true,"types":[]},{"text":"impl !Send for Not","synthetic":true,"types":[]},{"text":"impl !Send for LetNode","synthetic":true,"types":[]},{"text":"impl !Send for Let","synthetic":true,"types":[]},{"text":"impl !Send for TypeNode","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for PrimTypeNode","synthetic":true,"types":[]},{"text":"impl !Send for PrimType","synthetic":true,"types":[]},{"text":"impl !Send for PointerTypeNode","synthetic":true,"types":[]},{"text":"impl !Send for PointerType","synthetic":true,"types":[]},{"text":"impl !Send for TypeVarNode","synthetic":true,"types":[]},{"text":"impl !Send for TypeVar","synthetic":true,"types":[]},{"text":"impl !Send for GlobalTypeVarNode","synthetic":true,"types":[]},{"text":"impl !Send for GlobalTypeVar","synthetic":true,"types":[]},{"text":"impl !Send for TupleTypeNode","synthetic":true,"types":[]},{"text":"impl !Send for TupleType","synthetic":true,"types":[]},{"text":"impl !Send for TypeConstraintNode","synthetic":true,"types":[]},{"text":"impl !Send for TypeConstraint","synthetic":true,"types":[]},{"text":"impl !Send for FuncTypeNode","synthetic":true,"types":[]},{"text":"impl !Send for FuncType","synthetic":true,"types":[]},{"text":"impl !Send for IncompleteTypeNode","synthetic":true,"types":[]},{"text":"impl !Send for IncompleteType","synthetic":true,"types":[]},{"text":"impl !Send for RelayRefTypeNode","synthetic":true,"types":[]},{"text":"impl !Send for RefType","synthetic":true,"types":[]},{"text":"impl !Send for BaseTensorTypeNode","synthetic":true,"types":[]},{"text":"impl !Send for BaseTensorType","synthetic":true,"types":[]},{"text":"impl !Send for TensorTypeNode","synthetic":true,"types":[]},{"text":"impl !Send for TensorType","synthetic":true,"types":[]},{"text":"impl Send for TypeKind","synthetic":true,"types":[]},{"text":"impl !Send for GraphRt","synthetic":true,"types":[]},{"text":"impl !Send for PassInfoNode","synthetic":true,"types":[]},{"text":"impl !Send for PassInfo","synthetic":true,"types":[]}];
implementors["tvm_graph_rt"] = [{"text":"impl Send for Graph","synthetic":true,"types":[]},{"text":"impl Send for Entry","synthetic":true,"types":[]},{"text":"impl Send for Node","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DsoModule&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SystemLibModule","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Storage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FunctionNotFound","synthetic":true,"types":[]},{"text":"impl !Send for InvalidPointer","synthetic":true,"types":[]},{"text":"impl Send for GraphFormatError","synthetic":true,"types":[]},{"text":"impl Send for ArrayError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Tensor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'m, 't&gt; Send for GraphExecutor&lt;'m, 't&gt;","synthetic":false,"types":[]}];
implementors["tvm_rt"] = [{"text":"impl Send for Object","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for ObjectPtr&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for ObjectRef","synthetic":true,"types":[]},{"text":"impl !Send for StringObj","synthetic":true,"types":[]},{"text":"impl !Send for String","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Array&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for FunctionNotFoundError","synthetic":true,"types":[]},{"text":"impl Send for TypeMismatchError","synthetic":true,"types":[]},{"text":"impl Send for NDArrayError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !Send for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !Send for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Module","synthetic":true,"types":[]},{"text":"impl !Send for NDArrayContainer","synthetic":true,"types":[]},{"text":"impl !Send for NDArray","synthetic":true,"types":[]},{"text":"impl Send for Function","synthetic":false,"types":[]}];
implementors["tvm_sys"] = [{"text":"impl Send for DLContext","synthetic":true,"types":[]},{"text":"impl Send for DLDataType","synthetic":true,"types":[]},{"text":"impl !Send for DLTensor","synthetic":true,"types":[]},{"text":"impl !Send for DLManagedTensor","synthetic":true,"types":[]},{"text":"impl !Send for TVMByteArray","synthetic":true,"types":[]},{"text":"impl !Send for TVMParallelGroupEnv","synthetic":true,"types":[]},{"text":"impl !Send for TVMValue","synthetic":true,"types":[]},{"text":"impl !Send for ByteArray","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]},{"text":"impl Send for UnsupportedDeviceError","synthetic":true,"types":[]},{"text":"impl Send for DeviceType","synthetic":true,"types":[]},{"text":"impl Send for DataType","synthetic":true,"types":[]},{"text":"impl Send for ParseDataTypeError","synthetic":true,"types":[]},{"text":"impl Send for ValueDowncastError","synthetic":true,"types":[]},{"text":"impl Send for FuncCallError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ArgValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for RetValue","synthetic":true,"types":[]},{"text":"impl Send for UnsupportedDeviceError","synthetic":true,"types":[]}];
implementors["tyck"] = [{"text":"impl Send for Opt","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()