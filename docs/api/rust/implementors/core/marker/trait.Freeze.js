(function() {var implementors = {};
implementors["tvm"] = [{"text":"impl !Freeze for ConstIntBoundNode","synthetic":true,"types":[]},{"text":"impl Freeze for ConstIntBound","synthetic":true,"types":[]},{"text":"impl !Freeze for BaseAttrsNode","synthetic":true,"types":[]},{"text":"impl Freeze for Attrs","synthetic":true,"types":[]},{"text":"impl !Freeze for DiagnosticNode","synthetic":true,"types":[]},{"text":"impl Freeze for Diagnostic","synthetic":true,"types":[]},{"text":"impl Freeze for DiagnosticBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for DiagnosticRendererNode","synthetic":true,"types":[]},{"text":"impl Freeze for DiagnosticRenderer","synthetic":true,"types":[]},{"text":"impl !Freeze for DiagnosticContextNode","synthetic":true,"types":[]},{"text":"impl Freeze for DiagnosticContext","synthetic":true,"types":[]},{"text":"impl Freeze for DiagnosticLevel","synthetic":true,"types":[]},{"text":"impl !Freeze for BaseExprNode","synthetic":true,"types":[]},{"text":"impl Freeze for BaseExpr","synthetic":true,"types":[]},{"text":"impl !Freeze for PrimExprNode","synthetic":true,"types":[]},{"text":"impl Freeze for PrimExpr","synthetic":true,"types":[]},{"text":"impl !Freeze for GlobalVarNode","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalVar","synthetic":true,"types":[]},{"text":"impl !Freeze for BaseFuncNode","synthetic":true,"types":[]},{"text":"impl Freeze for BaseFunc","synthetic":true,"types":[]},{"text":"impl !Freeze for IRModuleNode","synthetic":true,"types":[]},{"text":"impl Freeze for IRModule","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl !Freeze for OpNode","synthetic":true,"types":[]},{"text":"impl Freeze for Op","synthetic":true,"types":[]},{"text":"impl !Freeze for ExprNode","synthetic":true,"types":[]},{"text":"impl Freeze for Expr","synthetic":true,"types":[]},{"text":"impl !Freeze for IdNode","synthetic":true,"types":[]},{"text":"impl Freeze for Id","synthetic":true,"types":[]},{"text":"impl !Freeze for ConstantNode","synthetic":true,"types":[]},{"text":"impl Freeze for Constant","synthetic":true,"types":[]},{"text":"impl !Freeze for TupleNode","synthetic":true,"types":[]},{"text":"impl Freeze for Tuple","synthetic":true,"types":[]},{"text":"impl !Freeze for VarNode","synthetic":true,"types":[]},{"text":"impl Freeze for Var","synthetic":true,"types":[]},{"text":"impl !Freeze for CallNode","synthetic":true,"types":[]},{"text":"impl Freeze for Call","synthetic":true,"types":[]},{"text":"impl !Freeze for LetNode","synthetic":true,"types":[]},{"text":"impl Freeze for Let","synthetic":true,"types":[]},{"text":"impl !Freeze for IfNode","synthetic":true,"types":[]},{"text":"impl Freeze for If","synthetic":true,"types":[]},{"text":"impl !Freeze for TupleGetItemNode","synthetic":true,"types":[]},{"text":"impl Freeze for TupleGetItem","synthetic":true,"types":[]},{"text":"impl !Freeze for RefCreateNode","synthetic":true,"types":[]},{"text":"impl Freeze for RefCreate","synthetic":true,"types":[]},{"text":"impl !Freeze for RefReadNode","synthetic":true,"types":[]},{"text":"impl Freeze for RefRead","synthetic":true,"types":[]},{"text":"impl !Freeze for RefWriteNode","synthetic":true,"types":[]},{"text":"impl Freeze for RefWrite","synthetic":true,"types":[]},{"text":"impl !Freeze for ConstructorNode","synthetic":true,"types":[]},{"text":"impl Freeze for Constructor","synthetic":true,"types":[]},{"text":"impl !Freeze for PatternNode","synthetic":true,"types":[]},{"text":"impl Freeze for Pattern","synthetic":true,"types":[]},{"text":"impl !Freeze for PatternWildcardNode","synthetic":true,"types":[]},{"text":"impl Freeze for PatternWildcard","synthetic":true,"types":[]},{"text":"impl !Freeze for PatternVarNode","synthetic":true,"types":[]},{"text":"impl Freeze for PatternVar","synthetic":true,"types":[]},{"text":"impl !Freeze for PatternConstructorNode","synthetic":true,"types":[]},{"text":"impl Freeze for PatternConstructor","synthetic":true,"types":[]},{"text":"impl !Freeze for PatternTupleNode","synthetic":true,"types":[]},{"text":"impl Freeze for PatternTuple","synthetic":true,"types":[]},{"text":"impl !Freeze for ClauseNode","synthetic":true,"types":[]},{"text":"impl Freeze for Clause","synthetic":true,"types":[]},{"text":"impl !Freeze for MatchNode","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]},{"text":"impl !Freeze for FunctionNode","synthetic":true,"types":[]},{"text":"impl Freeze for Function","synthetic":true,"types":[]},{"text":"impl !Freeze for Conv2DAttrsNode","synthetic":true,"types":[]},{"text":"impl Freeze for Conv2DAttrs","synthetic":true,"types":[]},{"text":"impl !Freeze for BiasAddAttrsNode","synthetic":true,"types":[]},{"text":"impl Freeze for BiasAddAttrs","synthetic":true,"types":[]},{"text":"impl !Freeze for DenseAttrsNode","synthetic":true,"types":[]},{"text":"impl Freeze for DenseAttrs","synthetic":true,"types":[]},{"text":"impl !Freeze for GlobalPool2DAttrsNode","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalPool2DAttrs","synthetic":true,"types":[]},{"text":"impl !Freeze for MaxPool2DAttrsNode","synthetic":true,"types":[]},{"text":"impl Freeze for MaxPool2DAttrs","synthetic":true,"types":[]},{"text":"impl !Freeze for SoftmaxAttrsNode","synthetic":true,"types":[]},{"text":"impl Freeze for SoftmaxAttrs","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchNormAttrsNode","synthetic":true,"types":[]},{"text":"impl Freeze for BatchNormAttrs","synthetic":true,"types":[]},{"text":"impl !Freeze for ExpandDimsAttrsNode","synthetic":true,"types":[]},{"text":"impl Freeze for ExpandDimsAttrs","synthetic":true,"types":[]},{"text":"impl !Freeze for SourceNode","synthetic":true,"types":[]},{"text":"impl Freeze for Source","synthetic":true,"types":[]},{"text":"impl !Freeze for SourceMapNode","synthetic":true,"types":[]},{"text":"impl Freeze for SourceMap","synthetic":true,"types":[]},{"text":"impl !Freeze for SourceNameNode","synthetic":true,"types":[]},{"text":"impl Freeze for SourceName","synthetic":true,"types":[]},{"text":"impl !Freeze for SpanNode","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl !Freeze for IntImmNode","synthetic":true,"types":[]},{"text":"impl Freeze for IntImm","synthetic":true,"types":[]},{"text":"impl !Freeze for VarNode","synthetic":true,"types":[]},{"text":"impl Freeze for Var","synthetic":true,"types":[]},{"text":"impl !Freeze for AddNode","synthetic":true,"types":[]},{"text":"impl Freeze for Add","synthetic":true,"types":[]},{"text":"impl !Freeze for SubNode","synthetic":true,"types":[]},{"text":"impl Freeze for Sub","synthetic":true,"types":[]},{"text":"impl !Freeze for MulNode","synthetic":true,"types":[]},{"text":"impl Freeze for Mul","synthetic":true,"types":[]},{"text":"impl !Freeze for DivNode","synthetic":true,"types":[]},{"text":"impl Freeze for Div","synthetic":true,"types":[]},{"text":"impl !Freeze for ModNode","synthetic":true,"types":[]},{"text":"impl Freeze for Mod","synthetic":true,"types":[]},{"text":"impl !Freeze for FloorDivNode","synthetic":true,"types":[]},{"text":"impl Freeze for FloorDiv","synthetic":true,"types":[]},{"text":"impl !Freeze for FloorModNode","synthetic":true,"types":[]},{"text":"impl Freeze for FloorMod","synthetic":true,"types":[]},{"text":"impl !Freeze for MinNode","synthetic":true,"types":[]},{"text":"impl Freeze for Min","synthetic":true,"types":[]},{"text":"impl !Freeze for MaxNode","synthetic":true,"types":[]},{"text":"impl Freeze for Max","synthetic":true,"types":[]},{"text":"impl !Freeze for CastNode","synthetic":true,"types":[]},{"text":"impl Freeze for Cast","synthetic":true,"types":[]},{"text":"impl !Freeze for RampNode","synthetic":true,"types":[]},{"text":"impl Freeze for Ramp","synthetic":true,"types":[]},{"text":"impl !Freeze for SelectNode","synthetic":true,"types":[]},{"text":"impl Freeze for Select","synthetic":true,"types":[]},{"text":"impl !Freeze for EqNode","synthetic":true,"types":[]},{"text":"impl Freeze for Eq","synthetic":true,"types":[]},{"text":"impl !Freeze for NeNode","synthetic":true,"types":[]},{"text":"impl Freeze for Ne","synthetic":true,"types":[]},{"text":"impl !Freeze for LtNode","synthetic":true,"types":[]},{"text":"impl Freeze for Lt","synthetic":true,"types":[]},{"text":"impl !Freeze for LeNode","synthetic":true,"types":[]},{"text":"impl Freeze for Le","synthetic":true,"types":[]},{"text":"impl !Freeze for GtNode","synthetic":true,"types":[]},{"text":"impl Freeze for Gt","synthetic":true,"types":[]},{"text":"impl !Freeze for GeNode","synthetic":true,"types":[]},{"text":"impl Freeze for Ge","synthetic":true,"types":[]},{"text":"impl !Freeze for AndNode","synthetic":true,"types":[]},{"text":"impl Freeze for And","synthetic":true,"types":[]},{"text":"impl !Freeze for OrNode","synthetic":true,"types":[]},{"text":"impl Freeze for Or","synthetic":true,"types":[]},{"text":"impl !Freeze for NotNode","synthetic":true,"types":[]},{"text":"impl Freeze for Not","synthetic":true,"types":[]},{"text":"impl !Freeze for LetNode","synthetic":true,"types":[]},{"text":"impl Freeze for Let","synthetic":true,"types":[]},{"text":"impl !Freeze for TypeNode","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl !Freeze for PrimTypeNode","synthetic":true,"types":[]},{"text":"impl Freeze for PrimType","synthetic":true,"types":[]},{"text":"impl !Freeze for PointerTypeNode","synthetic":true,"types":[]},{"text":"impl Freeze for PointerType","synthetic":true,"types":[]},{"text":"impl !Freeze for TypeVarNode","synthetic":true,"types":[]},{"text":"impl Freeze for TypeVar","synthetic":true,"types":[]},{"text":"impl !Freeze for GlobalTypeVarNode","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalTypeVar","synthetic":true,"types":[]},{"text":"impl !Freeze for TupleTypeNode","synthetic":true,"types":[]},{"text":"impl Freeze for TupleType","synthetic":true,"types":[]},{"text":"impl !Freeze for TypeConstraintNode","synthetic":true,"types":[]},{"text":"impl Freeze for TypeConstraint","synthetic":true,"types":[]},{"text":"impl !Freeze for FuncTypeNode","synthetic":true,"types":[]},{"text":"impl Freeze for FuncType","synthetic":true,"types":[]},{"text":"impl !Freeze for IncompleteTypeNode","synthetic":true,"types":[]},{"text":"impl Freeze for IncompleteType","synthetic":true,"types":[]},{"text":"impl !Freeze for RelayRefTypeNode","synthetic":true,"types":[]},{"text":"impl Freeze for RefType","synthetic":true,"types":[]},{"text":"impl !Freeze for BaseTensorTypeNode","synthetic":true,"types":[]},{"text":"impl Freeze for BaseTensorType","synthetic":true,"types":[]},{"text":"impl !Freeze for TensorTypeNode","synthetic":true,"types":[]},{"text":"impl Freeze for TensorType","synthetic":true,"types":[]},{"text":"impl Freeze for TypeKind","synthetic":true,"types":[]},{"text":"impl Freeze for GraphRt","synthetic":true,"types":[]},{"text":"impl !Freeze for PassInfoNode","synthetic":true,"types":[]},{"text":"impl Freeze for PassInfo","synthetic":true,"types":[]}];
implementors["tvm_graph_rt"] = [{"text":"impl&lt;'a&gt; Freeze for Tensor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Graph","synthetic":true,"types":[]},{"text":"impl Freeze for Entry","synthetic":true,"types":[]},{"text":"impl Freeze for Node","synthetic":true,"types":[]},{"text":"impl&lt;'m, 't&gt; Freeze for GraphExecutor&lt;'m, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for DsoModule&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SystemLibModule","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Storage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionNotFound","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidPointer","synthetic":true,"types":[]},{"text":"impl Freeze for GraphFormatError","synthetic":true,"types":[]},{"text":"impl Freeze for ArrayError","synthetic":true,"types":[]}];
implementors["tvm_rt"] = [{"text":"impl !Freeze for Object","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ObjectPtr&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectRef","synthetic":true,"types":[]},{"text":"impl !Freeze for StringObj","synthetic":true,"types":[]},{"text":"impl Freeze for String","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Array&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionNotFoundError","synthetic":true,"types":[]},{"text":"impl Freeze for TypeMismatchError","synthetic":true,"types":[]},{"text":"impl Freeze for NDArrayError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Function","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Module","synthetic":true,"types":[]},{"text":"impl !Freeze for NDArrayContainer","synthetic":true,"types":[]},{"text":"impl Freeze for NDArray","synthetic":true,"types":[]}];
implementors["tvm_sys"] = [{"text":"impl Freeze for DLContext","synthetic":true,"types":[]},{"text":"impl Freeze for DLDataType","synthetic":true,"types":[]},{"text":"impl Freeze for DLTensor","synthetic":true,"types":[]},{"text":"impl Freeze for DLManagedTensor","synthetic":true,"types":[]},{"text":"impl Freeze for TVMByteArray","synthetic":true,"types":[]},{"text":"impl Freeze for TVMParallelGroupEnv","synthetic":true,"types":[]},{"text":"impl Freeze for TVMValue","synthetic":true,"types":[]},{"text":"impl Freeze for ByteArray","synthetic":true,"types":[]},{"text":"impl Freeze for Context","synthetic":true,"types":[]},{"text":"impl Freeze for UnsupportedDeviceError","synthetic":true,"types":[]},{"text":"impl Freeze for DeviceType","synthetic":true,"types":[]},{"text":"impl Freeze for DataType","synthetic":true,"types":[]},{"text":"impl Freeze for ParseDataTypeError","synthetic":true,"types":[]},{"text":"impl Freeze for ValueDowncastError","synthetic":true,"types":[]},{"text":"impl Freeze for FuncCallError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ArgValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RetValue","synthetic":true,"types":[]},{"text":"impl Freeze for UnsupportedDeviceError","synthetic":true,"types":[]}];
implementors["tyck"] = [{"text":"impl Freeze for Opt","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()